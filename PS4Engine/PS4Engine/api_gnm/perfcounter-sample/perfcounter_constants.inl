/* SIE CONFIDENTIAL
$PSLibId$
* Copyright (C) 2016 Sony Interactive Entertainment Inc.
* All Rights Reserved.
*/

#ifndef ENUM_VALUE_HardwareUnitCounterSlotCount
#define ENUM_VALUE_HardwareUnitCounterSlotCount(sym, val, desc_string)
#endif
ENUM_VALUE_HardwareUnitCounterSlotCount(NumCpPerfCounterSlots		, 2,	"Number of counter slots per CP (command processor graphics; aka CPG) unit")
ENUM_VALUE_HardwareUnitCounterSlotCount(NumCpcPerfCounterSlots		, 2,	"Number of counter slots per CPC (command processor compute) unit")
ENUM_VALUE_HardwareUnitCounterSlotCount(NumCpfPerfCounterSlots		, 2,	"Number of counter slots per CPF (command processor fetch) unit")
ENUM_VALUE_HardwareUnitCounterSlotCount(NumIaPerfCounterSlots		, 4,	"Number of counter slots per IA (input assembly) unit")
ENUM_VALUE_HardwareUnitCounterSlotCount(NumWdPerfCounterSlots		, 4,	"Number of counter slots per WD (work distributor) unit")
ENUM_VALUE_HardwareUnitCounterSlotCount(NumGdsPerfCounterSlots		, 4,	"Number of counter slots per GDS (global data store) unit")
ENUM_VALUE_HardwareUnitCounterSlotCount(NumTcaPerfCounterSlots		, 4,	"Number of counter slots per TCA (texture cache arbiter, aka L2 controller) unit")
ENUM_VALUE_HardwareUnitCounterSlotCount(NumTcsPerfCounterSlots		, 4,	"Number of counter slots per TCS (texture cache ?, aka L2 cache bypass) unit")
ENUM_VALUE_HardwareUnitCounterSlotCount(NumTccPerfCounterSlots		, 4,	"Number of counter slots per TCC (texture cache control, aka L2 bank) unit")
ENUM_VALUE_HardwareUnitCounterSlotCount(NumVgtPerfCounterSlots		, 4,	"Number of counter slots per VGT (vertex geometry tessellator) unit")
ENUM_VALUE_HardwareUnitCounterSlotCount(NumPaSuPerfCounterSlots		, 4,	"Number of counter slots per PA-SU (primitive assembly setup) unit")
ENUM_VALUE_HardwareUnitCounterSlotCount(NumPaScPerfCounterSlots		, 8,	"Number of counter slots per PA-SC (primitive assembly scan converter) unit")
ENUM_VALUE_HardwareUnitCounterSlotCount(NumSpiPerfCounterSlots		, 6,	"Number of counter slots per SPI (shader processor input) unit")
ENUM_VALUE_HardwareUnitCounterSlotCount(NumSxPerfCounterSlots		, 4,	"Number of counter slots per SX (shader export) unit")
ENUM_VALUE_HardwareUnitCounterSlotCount(NumCbPerfCounterSlots		, 4,	"Number of counter slots per CB (color buffer) unit")
ENUM_VALUE_HardwareUnitCounterSlotCount(NumDbPerfCounterSlots		, 4,	"Number of counter slots per DB (depth buffer) unit")
ENUM_VALUE_HardwareUnitCounterSlotCount(NumSqPerfCounterSlots		,16,	"Number of counter slots per SQ (sequencer) unit")
ENUM_VALUE_HardwareUnitCounterSlotCount(NumTaPerfCounterSlots		, 2,	"Number of counter slots per TA (texture address) unit")
ENUM_VALUE_HardwareUnitCounterSlotCount(NumTdPerfCounterSlots		, 2,	"Number of counter slots per TD (texture data) unit")
ENUM_VALUE_HardwareUnitCounterSlotCount(NumTcpPerfCounterSlots		, 4,	"Number of counter slots per TCP (texture cache pipe, aka L1 cache) unit")

#ifndef ENUM_VALUE_HardwareUnitStreamingCounterSlotCount
#define ENUM_VALUE_HardwareUnitStreamingCounterSlotCount(sym, val, desc_string)
#endif
ENUM_VALUE_HardwareUnitStreamingCounterSlotCount(NumCpStreamingPerfCounterSlots		, 4,	"Number of streaming counter slots per CP (command processor graphics; aka CPG) unit; 1 reg = 4 counters, overlaps with perfcounter0")
ENUM_VALUE_HardwareUnitStreamingCounterSlotCount(NumCpcStreamingPerfCounterSlots	, 4,	"Number of streaming counter slots per CPC (command processor compute) unit; 1 reg = 4 counters, overlaps with perfcounter0")
ENUM_VALUE_HardwareUnitStreamingCounterSlotCount(NumCpfStreamingPerfCounterSlots	, 4,	"Number of streaming counter slots per CPF (command processor fetch) unit; 1 reg = 4 counters, overlaps with perfcounter0")
ENUM_VALUE_HardwareUnitStreamingCounterSlotCount(NumIaStreamingPerfCounterSlots		, 4,	"Number of streaming counter slots per IA (input assembly) unit; 1 reg = 4 counters, overlaps with perfcounter0")
ENUM_VALUE_HardwareUnitStreamingCounterSlotCount(NumWdStreamingPerfCounterSlots		, 0,	"Number of streaming counter slots per WD (work distributor) unit")
ENUM_VALUE_HardwareUnitStreamingCounterSlotCount(NumGdsStreamingPerfCounterSlots	, 4,	"Number of streaming counter slots per GDS (global data store) unit; 1 reg = 4 counters, spc0 overlaps with perfcounter0")
ENUM_VALUE_HardwareUnitStreamingCounterSlotCount(NumTcaStreamingPerfCounterSlots	, 8,	"Number of streaming counter slots per TCA (texture cache arbiter, aka L2 controller) unit; 2 regs = 8 counters, overlap with perfcounter[0:1]")
ENUM_VALUE_HardwareUnitStreamingCounterSlotCount(NumTcsStreamingPerfCounterSlots	, 4,	"Number of streaming counter slots per TCS (texture cache ?, aka L2 cache bypass) unit; 1 reg = 4 counters, spc0 overlaps with perfcounter0")
ENUM_VALUE_HardwareUnitStreamingCounterSlotCount(NumTccStreamingPerfCounterSlots	, 8,	"Number of streaming counter slots per TCC (texture cache control, aka L2 bank) unit; 2 regs = 8 counters, overlap with perfcounter[0:1]")
ENUM_VALUE_HardwareUnitStreamingCounterSlotCount(NumVgtStreamingPerfCounterSlots	, 8,	"Number of streaming counter slots per VGT (vertex geometry tessellator) unit; 2 regs = 8 counters, overlap with perfcounter[0:1]")
ENUM_VALUE_HardwareUnitStreamingCounterSlotCount(NumPaSuStreamingPerfCounterSlots	, 8,	"Number of streaming counter slots per PA-SU (primitive assembly setup) unit; 2 regs = 8 counters, overlap with perfcounter[0:1]")
ENUM_VALUE_HardwareUnitStreamingCounterSlotCount(NumPaScStreamingPerfCounterSlots	, 4,	"Number of streaming counter slots per PA-SC (primitive assembly scan converter) unit; 1 regs = 4 counters, overlaps with perfcounter0")
ENUM_VALUE_HardwareUnitStreamingCounterSlotCount(NumSpiStreamingPerfCounterSlots	,16,	"Number of streaming counter slots per SPI (shader processor input) unit; 4 regs = 16 counters, overlap with perfcounter[0:3]")
ENUM_VALUE_HardwareUnitStreamingCounterSlotCount(NumSxStreamingPerfCounterSlots		, 8,	"Number of streaming counter slots per SX (shader export) unit; 2 regs = 8 counters, overlap with perfcounter[0:1]")
ENUM_VALUE_HardwareUnitStreamingCounterSlotCount(NumCbStreamingPerfCounterSlots		, 4,	"Number of streaming counter slots per CB (color buffer) unit; 1 reg = 4 counters, spc0 overlaps with perfcounter0")
ENUM_VALUE_HardwareUnitStreamingCounterSlotCount(NumDbStreamingPerfCounterSlots		, 8,	"Number of streaming counter slots per DB (depth buffer) unit; 2 regs = 8 counters, overlap with perfcounter[0:1]")
ENUM_VALUE_HardwareUnitStreamingCounterSlotCount(NumSqStreamingPerfCounterSlots		,16,	"Number of streaming counter slots per SQ (sequencer) unit; 16 regs = 16 counters, overlapping 1-to-1 with perfcounter[0:15]")
ENUM_VALUE_HardwareUnitStreamingCounterSlotCount(NumTaStreamingPerfCounterSlots		, 4,	"Number of streaming counter slots per TA (texture address) unit; 1 reg = 4 counters, spc0 overlaps with perfcounter0")
ENUM_VALUE_HardwareUnitStreamingCounterSlotCount(NumTdStreamingPerfCounterSlots		, 4,	"Number of streaming counter slots per TD (texture data) unit; 1 reg = 4 counters, spc0 overlaps with perfcounter0")
ENUM_VALUE_HardwareUnitStreamingCounterSlotCount(NumTcpStreamingPerfCounterSlots	, 8,	"Number of streaming counter slots per TCP (texture cache pipe, aka L1 cache) unit; 2 regs = 8 counters, overlap with perfcounter[0:1]")

#ifndef ENUM_VALUE_PerfmonCounterMode
#define ENUM_VALUE_PerfmonCounterMode(sym, val, desc_string)
#endif
ENUM_VALUE_PerfmonCounterMode(Accum					, 0,	"Accumulate increment values over enabled cycles to produce a running total.")
ENUM_VALUE_PerfmonCounterMode(ActiveCycles			, 1,	"Count the number of cycles with a nonzero increment val. ")
ENUM_VALUE_PerfmonCounterMode(Max					, 2,	"Store the largest increment val received over cycles counted. ")
ENUM_VALUE_PerfmonCounterMode(Dirty					, 3,	"Record whether a nonzero increment val was ever received. ")
ENUM_VALUE_PerfmonCounterMode(Sample				, 4,	"Just record the latest increment val. ")
ENUM_VALUE_PerfmonCounterMode(CyclesSinceFirstEvent	, 5,	"Count the cycles since a nonzero increment val. ")
ENUM_VALUE_PerfmonCounterMode(CyclesSinceLastEvent	, 6,	"Count the cycles since a zero increment val. ")
ENUM_VALUE_PerfmonCounterMode(CyclesGeHi			, 7,	"Count the cycles with an increment greater than or equal to the val in the high bits of the counter.")
ENUM_VALUE_PerfmonCounterMode(CyclesEqHi			, 8,	"Count the cycles with an increment equal to the val in the high bits of the counter.")
ENUM_VALUE_PerfmonCounterMode(InactiveCycles		, 9,	"Count the number of cycles with a zero increment val.")

#ifndef ENUM_VALUE_PerfmonStreamingCounterMode
#define ENUM_VALUE_PerfmonStreamingCounterMode(sym, val, desc_string)
#endif
ENUM_VALUE_PerfmonStreamingCounterMode(Off				,  0,	"Disable streaming performance counters. ")
ENUM_VALUE_PerfmonStreamingCounterMode(16BitClamp		,  1,	"16 bit streaming mode with clamp and reset.")
ENUM_VALUE_PerfmonStreamingCounterMode(16BitNoClamp		,  2,	"16 bit streaming mode with No clamp and No reset. ")
ENUM_VALUE_PerfmonStreamingCounterMode(32BitClamp		,  3,	"32 bit streaming mode with clamp and reset.")
ENUM_VALUE_PerfmonStreamingCounterMode(32BitNoClamp		,  4,	"32 bit streaming mode with No clamp and No reset. ")

#ifndef ENUM_VALUE_PerfmonState
#define ENUM_VALUE_PerfmonState(sym, val, desc_string)
#endif
ENUM_VALUE_PerfmonState(DisableAndReset		, 0,	"Stop counting and reset all performance counters to 0.")
ENUM_VALUE_PerfmonState(StartCounting		, 1,	"Start accumulating to all active performance counters.")
ENUM_VALUE_PerfmonState(StopCounting		, 2,	"Stop accumulating to all active performance counters.")

#ifndef ENUM_VALUE_PerfmonEnableMode
#define ENUM_VALUE_PerfmonEnableMode(sym, val, desc_string)
#endif
ENUM_VALUE_PerfmonEnableMode(AlwaysCount		, 0,	"Accumulate active performance counters for all contexts, regardless of PerfmonEnable state.")
ENUM_VALUE_PerfmonEnableMode(CountContextTrue	, 2,	"Accumulate active performance counters only for contexts with DrawCommandBuffer::setPerfmonEnable(kPerfmonEnable).")
ENUM_VALUE_PerfmonEnableMode(CountContextFalse	, 3,	"Accumulate active performance counters only for contexts with DrawCommandBuffer::setPerfmonEnable(kPerfmonDisable).")

#ifndef ENUM_VALUE_PerfmonSample
#define ENUM_VALUE_PerfmonSample(sym, val, desc_string)
#endif
ENUM_VALUE_PerfmonSample(NoSample	, 0,	"Do not sample active performance counters.")
ENUM_VALUE_PerfmonSample(Sample		, 1,	"Sample all active performance counters.")

#ifndef ENUM_VALUE_PerfmonEnable
#define ENUM_VALUE_PerfmonEnable(sym, val, desc_string)
#endif
ENUM_VALUE_PerfmonEnable(Disable	, 0,	"Mark following contexts as disabled for performance counter collection; how this affects whether counters will be collected depends on the PerfmonEnableMode set by DrawCommandBuffer::setPerfCounterControl.")
ENUM_VALUE_PerfmonEnable(Enable		, 1,	"Mark following contexts as enabled for performance counter collection; how this affects whether counters will be collected depends on the PerfmonEnableMode set by DrawCommandBuffer::setPerfCounterControl.")

#ifndef ENUM_VALUE_CbPerfCounterOpFilter
#define ENUM_VALUE_CbPerfCounterOpFilter(sym, val, desc_string)
#endif
ENUM_VALUE_CbPerfCounterOpFilter(WriteOnly				, 0,	"Only count write only operations.")
ENUM_VALUE_CbPerfCounterOpFilter(NeedsDestination		, 1,	"Only count an operation if it needs the destination data like blend or raster operation.")
ENUM_VALUE_CbPerfCounterOpFilter(Resolve				, 2,	"Only count resolve operations.")
ENUM_VALUE_CbPerfCounterOpFilter(Decompress				, 3,	"Only count decompress operations.")
ENUM_VALUE_CbPerfCounterOpFilter(FmaskDecompress		, 4,	"Only count FMASK decompress operations.")
ENUM_VALUE_CbPerfCounterOpFilter(EliminateFastClear		, 5,	"Only count eliminate fast clear operations.")

#ifndef ENUM_VALUE_CbPerfCounterClearFilter
#define ENUM_VALUE_CbPerfCounterClearFilter(sym, val, desc_string)
#endif
ENUM_VALUE_CbPerfCounterClearFilter(NonClear	, 0,	"Only count non-clears. ")
ENUM_VALUE_CbPerfCounterClearFilter(Clear		, 1,	"Only count empty quads marked as clear. ")

#ifndef ENUM_VALUE_CpPerfCounter
#define ENUM_VALUE_CpPerfCounter(sym, val, desc_string)
#endif
ENUM_VALUE_CpPerfCounter(AlwaysCount					,  0,	"Always count, i.e. counts elapsed cycles measured by the CP.")
ENUM_VALUE_CpPerfCounter(RbiuFifoFull					,  1,	"RBIU Transaction FIFO Full.")
ENUM_VALUE_CpPerfCounter(CpGrbmDwordsSent				,  4,	"Count of DWs actually sent to the GRBM.")
ENUM_VALUE_CpPerfCounter(MeParserBusy					,  5,	"Count of MicroEngine Busy Clocks.")
ENUM_VALUE_CpPerfCounter(CountType0Packets				,  6,	"Count of Type0 Packets processed in NRT.")
ENUM_VALUE_CpPerfCounter(CountType3Packets				,  7,	"Count of Type3 Packets processed in NRT.")
ENUM_VALUE_CpPerfCounter(CpGrbmOutOfCredits				,  9,	"CP to GRBM path has data to send but is waiting for credits (free signals).")
ENUM_VALUE_CpPerfCounter(CpPfpGrbmOutOfCredits			, 10,	"CP.PFP to GRBM path has data to send but is waiting for credits (free signals).")
ENUM_VALUE_CpPerfCounter(CpGdsGrbmOutOfCredits			, 11,	"CP to GRBM path to GDS has data to send but is waiting for credits (free signals).")
ENUM_VALUE_CpPerfCounter(RciuStalledOnMeRead			, 12,	"RCIU is stalled waiting for read data to be returned for the MicroEngine.")
ENUM_VALUE_CpPerfCounter(RciuStalledOnDmaRead			, 13,	"RCIU is stalled waiting for read data to be returned for the DMA.")
ENUM_VALUE_CpPerfCounter(SsuStalledOnActiveCntx			, 14,	"Surface Sync Unit is waiting on a matching base in an Active Context.")
ENUM_VALUE_CpPerfCounter(SsuStalledOnCleanSignals		, 15,	"Surface Sync Unit is waiting on all Clean signals to return.")
ENUM_VALUE_CpPerfCounter(QuStalledOnEopDonePulse		, 16,	"Query Unit is stalled waiting for an EOP Done signal from the SC or SPI.")
ENUM_VALUE_CpPerfCounter(QuStalledOnEopDoneWrConfirm	, 17,	"Query Unit is stalled waiting for a write confirm on EOP Done data.")
ENUM_VALUE_CpPerfCounter(PfpStalledOnCsfReady			, 18,	"PFP is stalled trying to write to the CSF.")
ENUM_VALUE_CpPerfCounter(PfpStalledOnMeqReady			, 19,	"PFP is stalled trying to write to the MEQ.")
ENUM_VALUE_CpPerfCounter(PfpStalledOnRciuReady			, 20,	"PFP is stalled trying to write to the RCIU")
ENUM_VALUE_CpPerfCounter(PfpStalledForDataFromRoq		, 21,	"PFP is stalled waiting for data from the ROQ.")
ENUM_VALUE_CpPerfCounter(MeStalledForDataFromPfp		, 22,	"MicroEngine is stalled waiting for data from the PFP.")
ENUM_VALUE_CpPerfCounter(MeStalledForDataFromStq		, 23,	"MicroEngine is stalled waiting for data from the State Queue.")
ENUM_VALUE_CpPerfCounter(MeStalledOnNoAvailGfxCntx		, 24,	"ME is stalled waiting for an available GFX context.")
ENUM_VALUE_CpPerfCounter(MeStalledWritingToRciu			, 25,	"ME is stalled trying to write to the RCIU (GRBM).")
ENUM_VALUE_CpPerfCounter(MeStalledWritingConstants		, 26,	"ME is stalled trying to write constants to the RCIU/MIU (GRBM/MC).")
ENUM_VALUE_CpPerfCounter(MeStalledOnPartialFlush		, 27,	"The ME sent out a Partial Flush event and is waiting for a response from the SPI.")
ENUM_VALUE_CpPerfCounter(MeWaitOnCeCounter				, 28,	"The ME is waiting on the CE to write the constants to memory (and increment the up/down counter).")
ENUM_VALUE_CpPerfCounter(MeWaitOnAvailBuffer			, 29,	"The ME is waiting on the next buffer to be available - it is still in use.")
ENUM_VALUE_CpPerfCounter(LoadStalledOnSetCoherency		, 31,	"LOAD packet is stalled waiting on Coherency Counter=0 (SET packet writes completed).")
ENUM_VALUE_CpPerfCounter(DynamicClkValid				, 32,	"Input from CGTT_LOCAL output: dyn_oclk_vld")
ENUM_VALUE_CpPerfCounter(RegisterClkValid				, 33,	"Input from CGTT_LOCAL output: reg_oclk_vld")
ENUM_VALUE_CpPerfCounter(MiuWriteRequestSent			, 34,	"Count of 64-byte MC write requests. This directly measures the CP-to-memory write bandwidth for the graphics command execution process. Note that reading performance counters will be counted here along with other DMA traffic.")
ENUM_VALUE_CpPerfCounter(MiuReadRequestSent				, 35,	"Count of 64-byte MC read requests. This directly measures the memory-to-CP read bandwidth for the graphics command execution process.")
ENUM_VALUE_CpPerfCounter(CeStallRamDump					, 36,	"CE is stalled while trying to issue a RAM DUMP.")
ENUM_VALUE_CpPerfCounter(CeStallRamWrite				, 37,	"CE is stalled while trying to issue a RAM WRITE.")
ENUM_VALUE_CpPerfCounter(CeStallOnIncFifo				, 38,	"CE is stalled while trying to write to the increment FIFO.")
ENUM_VALUE_CpPerfCounter(CeStallOnWrRamFifo				, 39,	"CE is stalled while trying to write to the write ram FIFO.")
ENUM_VALUE_CpPerfCounter(CeStallOnDataFromMiu			, 40,	"CE is stalled waiting on data from the MIU.")
ENUM_VALUE_CpPerfCounter(CeStallOnDataFromRoq			, 41,	"CE is stalled waiting on data from the ROQ.")
ENUM_VALUE_CpPerfCounter(CeStallOnCeBufferFlag			, 42,	"CE is stalled waiting for an available buffer.")
ENUM_VALUE_CpPerfCounter(CeStallOnDeCounter				, 43,	"CE is stalled waiting for the DE counter.")
ENUM_VALUE_CpPerfCounter(TciuStallWaitOnFree			, 44,	"TCIU is stalled waiting on credits from the TC.")
ENUM_VALUE_CpPerfCounter(TciuStallWaitOnTags			, 45,	"TCIU has used all available tags and is waiting on the TC to return them.")

#ifndef ENUM_VALUE_CpcPerfCounter
#define ENUM_VALUE_CpcPerfCounter(sym, val, desc_string)
#endif
ENUM_VALUE_CpcPerfCounter(AlwaysCount					,  0,	"Always count, i.e. counts elapsed cycles measured by the CPC.")
ENUM_VALUE_CpcPerfCounter(RciuStallWaitOnFree			,  1,	"Rciu Stall Waiting on Free.")
ENUM_VALUE_CpcPerfCounter(RciuStallPrivViolation		,  2,	"Rciu Stall on Priv violation.")
ENUM_VALUE_CpcPerfCounter(MiuStallOnRdreqFree			,  3,	"Miu stall On read req free.")
ENUM_VALUE_CpcPerfCounter(MiuStallOnWrreqFree			,  4,	"Miu Stall on wrreq free.")
ENUM_VALUE_CpcPerfCounter(TciuStallWaitOnFree			,  5,	"Tciu Stall waiting for free.")
ENUM_VALUE_CpcPerfCounter(Me1StallWaitOnRciuReady		,  6,	"Me1 stall waiting on Rciu Ready.")
ENUM_VALUE_CpcPerfCounter(Me1StallWaitOnRciuReadyPerf	,  7,	"Me1 stall waiting on Rciu Ready Perf.")
ENUM_VALUE_CpcPerfCounter(Me1StallWaitOnRciuRead		,  8,	"Me1 stall waiting on Rciu read.")
ENUM_VALUE_CpcPerfCounter(Me1StallWaitOnMiuRead			,  9,	"Me1 stall waiting on miu read.")
ENUM_VALUE_CpcPerfCounter(Me1StallWaitOnMiuWrite		, 10,	"Me1 stall waiting on miu wrute.")
ENUM_VALUE_CpcPerfCounter(Me1StallOnDataFromRoq			, 11,	"Me1 stall on data from roq.")
ENUM_VALUE_CpcPerfCounter(Me1StallOnDataFromRoqPerf		, 12,	"Me1 stall on data from roq Perf.")
ENUM_VALUE_CpcPerfCounter(Me1BusyForPacketDecode		, 13,	"Me1 busy for packet decode.")
ENUM_VALUE_CpcPerfCounter(Me2StallWaitOnRciuReady		, 14,	"Me2 stall waiting on Rciu Ready. (Valid Only if ME2 is available)")
ENUM_VALUE_CpcPerfCounter(Me2StallWaitOnRciuReadyPerf	, 15,	"Me2 stall waiting on Rciu Ready Perf. (Valid Only if ME2 is available)")
ENUM_VALUE_CpcPerfCounter(Me2StallWaitOnRciuRead		, 16,	"Me2 stall waiting on Rciu read. (Valid Only if ME2 is available)")
ENUM_VALUE_CpcPerfCounter(Me2StallWaitOnMiuRead			, 17,	"Me2 stall waiting on miu read. (Valid Only if ME2 is available)")
ENUM_VALUE_CpcPerfCounter(Me2StallWaitOnMiuWrite		, 18,	"Me2 stall waiting on miu wrute. (Valid Only if ME2 is available)")
ENUM_VALUE_CpcPerfCounter(Me2StallOnDataFromRoq			, 19,	"Me2 stall on data from roq. (Valid Only if ME2 is available)")
ENUM_VALUE_CpcPerfCounter(Me2StallOnDataFromRoqPerf		, 20,	"Me2 stall on data from roq Perf. (Valid Only if ME2 is available)")
ENUM_VALUE_CpcPerfCounter(Me2BusyForPacketDecode		, 21,	"Me2 busy for packet decode. (Valid Only if ME2 is available)")

#ifndef ENUM_VALUE_CpfPerfCounter
#define ENUM_VALUE_CpfPerfCounter(sym, val, desc_string)
#endif
ENUM_VALUE_CpfPerfCounter(AlwaysCount					,  0,	"Always count, i.e. counts elapsed cycles measured by the CPF.")
ENUM_VALUE_CpfPerfCounter(MiuStalledWaitingRdreqFree	,  1,	"CPF Miu stalled waiting on Rdreq free.")
ENUM_VALUE_CpfPerfCounter(TciuStalledWaitingOnFree		,  2,	"CPF Tciu stalled waiting on Free.")
ENUM_VALUE_CpfPerfCounter(TciuStalledWaitingOnTags		,  3,	"CPF Tciu stalled waiting on tags.")
ENUM_VALUE_CpfPerfCounter(CsfBusyForFetchingRing		,  4,	"CSF busy for fetching Ring data.")
ENUM_VALUE_CpfPerfCounter(CsfBusyForFetchingIb1			,  5,	"CSF busy for fetching Indrirect buffer 1.")
ENUM_VALUE_CpfPerfCounter(CsfBusyForFetchingIb2			,  6,	"CSF busy for fecthing Indirect buffer 2.")
ENUM_VALUE_CpfPerfCounter(CsfBusyForFetchingState		,  7,	"CSF busy for fetching state data.")
ENUM_VALUE_CpfPerfCounter(MiuBusyForOutstandingTags		,  8,	"Miu is busy for outstanding tags.")
ENUM_VALUE_CpfPerfCounter(CsfRtsMiuNotRtr				,  9,	"RTS sent from CSF but no RTR.")
ENUM_VALUE_CpfPerfCounter(CsfStateFifoNotRtr			, 10,	"CSF state fifo no RTR.")
ENUM_VALUE_CpfPerfCounter(CsfFetchingCmdBuffers			, 11,	"CSF is fetching command buffers.")
ENUM_VALUE_CpfPerfCounter(GrbmDwordsSent				, 12,	"CPF to GRBM dwords sent.")
ENUM_VALUE_CpfPerfCounter(DynamicClockValid				, 13,	"CPF Dynamic clock is valid.")
ENUM_VALUE_CpfPerfCounter(RegisterClockValid			, 14,	"CPF register clock is valid.")
ENUM_VALUE_CpfPerfCounter(MiuWriteRequestSent			, 15,	"Count of 64-byte MC write requests. This directly measures the CP to memory write bandwidth for the graphics command and constant prefetch process.")
ENUM_VALUE_CpfPerfCounter(MiuReadRequestSent			, 16,	"Count of 64-byte MC read requests. This directly measures the memory to CP read bandwidth for the graphics command and constant prefetch process.")
		
#ifndef ENUM_VALUE_WdPerfCounter
#define ENUM_VALUE_WdPerfCounter(sym, val, desc_string)
#endif
ENUM_VALUE_WdPerfCounter(RbiuFifosEventWindowActive		,  0,	"RBIU Fifo generated event window is active")
ENUM_VALUE_WdPerfCounter(RbiuDrFifoStarved				,  1,	"rbiu dma request fifo is starved")
ENUM_VALUE_WdPerfCounter(RbiuDrFifoStalled				,  2,	"rbiu dma request fifo is stalled")
ENUM_VALUE_WdPerfCounter(RbiuDiFifoStarved				,  3,	"rbiu draw initiator fifo is starved")
ENUM_VALUE_WdPerfCounter(RbiuDiFifoStalled				,  4,	"rbiu draw initiator fifo is stalled")
ENUM_VALUE_WdPerfCounter(WdBusy							,  5,	"Number of cycles where the WD was busy. Not windowable.")
ENUM_VALUE_WdPerfCounter(WdSclkRegVldEvent				,  6,	"Counts number of cycles sclk_reg is valid")
ENUM_VALUE_WdPerfCounter(WdSclkInputVldEvent			,  7,	"Counts number of cycles sclk_input is valid")
ENUM_VALUE_WdPerfCounter(WdSclkCoreVldEvent				,  8,	"Counts number of cycles sclk_core is valid")
ENUM_VALUE_WdPerfCounter(WdStalled						,  9,	"Number of cycles that the WD was stalled by full primitive output FIFOs; indicates that the VGT units were consuming indices to launch vertex shaders slower than the WD and IAs could transfer them, possibly due to back pressure from later stages or hardware units. Not windowable.")
ENUM_VALUE_WdPerfCounter(InsideTfBin0					, 10,	"NEO ONLY; Counts number of cycles, the average of inside tess factors is 0")
ENUM_VALUE_WdPerfCounter(InsideTfBin1					, 11,	"NEO ONLY; Counts number of cycles, the average of inside tess factors is 1")
ENUM_VALUE_WdPerfCounter(InsideTfBin2					, 12,	"NEO ONLY; Counts number of cycles, the average of inside tess factors is 2")
ENUM_VALUE_WdPerfCounter(InsideTfBin3					, 13,	"NEO ONLY; Counts number of cycles, the average of inside tess factors is 3")
ENUM_VALUE_WdPerfCounter(InsideTfBin4					, 14,	"NEO ONLY; Counts number of cycles, the average of inside tess factors is 4")
ENUM_VALUE_WdPerfCounter(InsideTfBin5					, 15,	"NEO ONLY; Counts number of cycles, the average of inside tess factors is 5")
ENUM_VALUE_WdPerfCounter(InsideTfBin6					, 16,	"NEO ONLY; Counts number of cycles, the average of inside tess factors is between 6-24 inclusive")
ENUM_VALUE_WdPerfCounter(InsideTfBin7					, 17,	"NEO ONLY; Counts number of cycles, the average of inside tess factors is between 25-44 inclusive")
ENUM_VALUE_WdPerfCounter(InsideTfBin8					, 18,	"NEO ONLY; Counts number of cycles, the average of inside tess factors is between 45-64 inclusive")
ENUM_VALUE_WdPerfCounter(TfreqLatBin0					, 19,	"NEO ONLY; Counts number of cycles when tf request latency is <64")
ENUM_VALUE_WdPerfCounter(TfreqLatBin1					, 20,	"NEO ONLY; Counts number of cycles when tf request latency is >64 <128")
ENUM_VALUE_WdPerfCounter(TfreqLatBin2					, 21,	"NEO ONLY; Counts number of cycles when tf request latency is >128 <192")
ENUM_VALUE_WdPerfCounter(TfreqLatBin3					, 22,	"NEO ONLY; Counts number of cycles when tf request latency is >192 <256")
ENUM_VALUE_WdPerfCounter(TfreqLatBin4					, 23,	"NEO ONLY; Counts number of cycles when tf request latency is >256 <320")
ENUM_VALUE_WdPerfCounter(TfreqLatBin5					, 24,	"NEO ONLY; Counts number of cycles when tf request latency is >320 <384")
ENUM_VALUE_WdPerfCounter(TfreqLatBin6					, 25,	"NEO ONLY; Counts number of cycles when tf request latency is >384 <512")
ENUM_VALUE_WdPerfCounter(TfreqLatBin7					, 26,	"NEO ONLY; Counts number of cycles when tf request latency is >512")
ENUM_VALUE_WdPerfCounter(WdStarvedOnHsDone				, 27,	"NEO ONLY; wd te11 is waiting for hs done")
ENUM_VALUE_WdPerfCounter(Se0HsDoneLatency				, 28,	"NEO ONLY; Total latency HS FLUSHES issued to the SX DONES received on SE0. Divide by HS FLUSHES issued for average latency. Sensitive to PERF_SEID_IGNORE_MASK")
ENUM_VALUE_WdPerfCounter(Se1HsDoneLatency				, 29,	"NEO ONLY; Total latency HS FLUSHES issued to the SX DONES received on SE1. Divide by HS FLUSHES issued for average latency. Sensitive to PERF_SEID_IGNORE_MASK")
ENUM_VALUE_WdPerfCounter(Se2HsDoneLatency				, 30,	"NEO ONLY; Total latency HS FLUSHES issued to the SX DONES received on SE2. Divide by HS FLUSHES issued for average latency. Sensitive to PERF_SEID_IGNORE_MASK")
ENUM_VALUE_WdPerfCounter(Se3HsDoneLatency				, 31,	"NEO ONLY; Total latency HS FLUSHES issued to the SX DONES received on SE3. Divide by HS FLUSHES issued for average latency. Sensitive to PERF_SEID_IGNORE_MASK")
ENUM_VALUE_WdPerfCounter(HsDoneSe0						, 32,	"NEO ONLY; Counts number of SX HS DONES received by the VGT0. Sensitive to PERF_SEID_IGNORE_MASK")
ENUM_VALUE_WdPerfCounter(HsDoneSe1						, 33,	"NEO ONLY; Counts number of SX HS DONES received by the VGT1. Sensitive to PERF_SEID_IGNORE_MASK")
ENUM_VALUE_WdPerfCounter(HsDoneSe2						, 34,	"NEO ONLY; Counts number of SX HS DONES received by the VGT2. Sensitive to PERF_SEID_IGNORE_MASK")
ENUM_VALUE_WdPerfCounter(HsDoneSe3						, 35,	"NEO ONLY; Counts number of SX HS DONES received by the VGT3. Sensitive to PERF_SEID_IGNORE_MASK")
ENUM_VALUE_WdPerfCounter(NullPatch						, 36,	"NEO ONLY; Count of patches determined to be null due to tessellation factors of negative, 0 or NAN")

#ifndef ENUM_VALUE_IaPerfCounter
#define ENUM_VALUE_IaPerfCounter(sym, val, desc_string)
#endif
ENUM_VALUE_IaPerfCounter(GrpInputEventWindowActive		,  0,	"Grouper input generated event window is active")
ENUM_VALUE_IaPerfCounter(McLatBin0						,  7,	"Memory Controller Latency Bin 0")
ENUM_VALUE_IaPerfCounter(McLatBin1						,  8,	"Memory Controller Latency Bin 1")
ENUM_VALUE_IaPerfCounter(McLatBin2						,  9,	"Memory Controller Latency Bin 2")
ENUM_VALUE_IaPerfCounter(McLatBin3						, 10,	"Memory Controller Latency Bin 3")
ENUM_VALUE_IaPerfCounter(McLatBin4						, 11,	"Memory Controller Latency Bin 4")
ENUM_VALUE_IaPerfCounter(McLatBin5						, 12,	"Memory Controller Latency Bin 5")
ENUM_VALUE_IaPerfCounter(McLatBin6						, 13,	"Memory Controller Latency Bin 6")
ENUM_VALUE_IaPerfCounter(McLatBin7						, 14,	"Memory Controller Latency Bin 7")
ENUM_VALUE_IaPerfCounter(IaBusy							, 15,	"Number of cycles where the IA was busy.")
ENUM_VALUE_IaPerfCounter(IaSclkRegVldEvent				, 16,	"Counts number of cycles sclk_reg is valid")
ENUM_VALUE_IaPerfCounter(IaSclkInputVldEvent			, 17,	"Counts number of cycles sclk_input is valid")
ENUM_VALUE_IaPerfCounter(IaSclkCoreVldEvent				, 18,	"Counts number of cycles sclk_core is valid")
ENUM_VALUE_IaPerfCounter(IaSclkInvalVldEvent			, 19,	"Counts number of cycles sclk_inval is valid")
ENUM_VALUE_IaPerfCounter(IaDmaReturn					, 20,	"Number of 32-byte DMAs of index data returned to the IA.  This directly measures the memory to IA read bandwidth for indices read via DMA.")
ENUM_VALUE_IaPerfCounter(IaStalled						, 21,	"Number of cycles that the IA was stalled by full primitive output FIFOs; indicates that the VGT units were consuming indices to launch vertex shaders slower than the IA could transfer them, possibly due to back pressure from later stages or hardware units.")

#ifndef ENUM_VALUE_GdsPerfCounter
#define ENUM_VALUE_GdsPerfCounter(sym, val, desc_string)
#endif
ENUM_VALUE_GdsPerfCounter(DsAddrConfl			,  0,	"Number of conflicting addresses in DS memory.")
ENUM_VALUE_GdsPerfCounter(DsBankConfl			,  1,	"Number of conflicting banks in DS memory.")
ENUM_VALUE_GdsPerfCounter(WbufFlush				,  2,	"Number of times the RBIU write buffer is flushed.")
ENUM_VALUE_GdsPerfCounter(WrComp				,  3,	"Number of times a WRITE_COMPLETE is put in the write buffer.")
ENUM_VALUE_GdsPerfCounter(WbufWr				,  4,	"Number of times the RBIU writes to buffer.")
ENUM_VALUE_GdsPerfCounter(RbufHit				,  5,	"Number of times an RBIU read hits in the buffer.")
ENUM_VALUE_GdsPerfCounter(RbufMiss				,  6,	"Number of times an RBIU read misses the buffer.")
ENUM_VALUE_GdsPerfCounter(Se0Sh0Noret			,  7,	"From SE:0 SH:0, number of commands that do not return data.")
ENUM_VALUE_GdsPerfCounter(Se0Sh0Ret				,  8,	"From SE:0 SH:0, number of commands that do return data.")
ENUM_VALUE_GdsPerfCounter(Se0Sh0OrdCnt			,  9,	"From SE:0 SH:0, number of ordered count operations.")
ENUM_VALUE_GdsPerfCounter(Se0Sh02CompReq		, 10,	"From SE:0 SH:0, number of commands that return two components.")
ENUM_VALUE_GdsPerfCounter(Se0Sh0OrdWaveValid	, 11,	"From SE:0 SH:0, number of valid wave ID's processed by ordered append.")
ENUM_VALUE_GdsPerfCounter(Se0Sh0GdsDataValid	, 12,	"From SE:0 SH:0, number of valid write enables from the data bus.")
ENUM_VALUE_GdsPerfCounter(Se0Sh0GdsStallByOrd	, 13,	"From SE:0 SH:0, number of cycles GDS data is stalled due to Ordered count data.")
ENUM_VALUE_GdsPerfCounter(Se0Sh0GdsWrOp			, 14,	"From SE:0 SH:0, number of GDS Write operations.")
ENUM_VALUE_GdsPerfCounter(Se0Sh0GdsRdOp			, 15,	"From SE:0 SH:0, number of GDS Read operations.")
ENUM_VALUE_GdsPerfCounter(Se0Sh0GdsAtomOp		, 16,	"From SE:0 SH:0, number of GDS Atomic operations.")
ENUM_VALUE_GdsPerfCounter(Se0Sh0GdsRelOp		, 17,	"From SE:0 SH:0, number of GDS Relative operations.")
ENUM_VALUE_GdsPerfCounter(Se0Sh0GdsCmpxchOp		, 18,	"From SE:0 SH:0, number of GDS Compare or Exchange operations.")
ENUM_VALUE_GdsPerfCounter(Se0Sh0GdsByteOp		, 19,	"From SE:0 SH:0, number of GDS byte operations.")
ENUM_VALUE_GdsPerfCounter(Se0Sh0GdsShortOp		, 20,	"From SE:0 SH:0, number of GDS short operations.")
ENUM_VALUE_GdsPerfCounter(Se0Sh1Noret			, 21,	"From SE:0 SH:1, number of commands that do not return data")
ENUM_VALUE_GdsPerfCounter(Se0Sh1Ret				, 22,	"From SE:0 SH:1, number of commands that do return data")
ENUM_VALUE_GdsPerfCounter(Se0Sh1OrdCnt			, 23,	"From SE:0 SH:1, number of ordered count operations")
ENUM_VALUE_GdsPerfCounter(Se0Sh12CompReq		, 24,	"From SE:0 SH:1, number of commands that return two components")
ENUM_VALUE_GdsPerfCounter(Se0Sh1OrdWaveValid	, 25,	"From SE:0 SH:1, number of valid wave ID's processed by ordered append")
ENUM_VALUE_GdsPerfCounter(Se0Sh1GdsDataValid	, 26,	"From SE:0 SH:1, number of valid write enables from the data bus")
ENUM_VALUE_GdsPerfCounter(Se0Sh1GdsStallByOrd	, 27,	"From SE:0 SH:1, number of cycles GDS data is stalled due to Ordered count data")
ENUM_VALUE_GdsPerfCounter(Se0Sh1GdsWrOp			, 28,	"From SE:0 SH:1, number of GDS Write operations")
ENUM_VALUE_GdsPerfCounter(Se0Sh1GdsRdOp			, 29,	"From SE:0 SH:1, number of GDS Read operations")
ENUM_VALUE_GdsPerfCounter(Se0Sh1GdsAtomOp		, 30,	"From SE:0 SH:1, number of GDS Atomic operations")
ENUM_VALUE_GdsPerfCounter(Se0Sh1GdsRelOp		, 31,	"From SE:0 SH:1, number of GDS Relative operations")
ENUM_VALUE_GdsPerfCounter(Se0Sh1GdsCmpxchOp		, 32,	"From SE:0 SH:1, number of GDS Compare or Exchange operations")
ENUM_VALUE_GdsPerfCounter(Se0Sh1GdsByteOp		, 33,	"From SE:0 SH:1, number of GDS byte operations")
ENUM_VALUE_GdsPerfCounter(Se0Sh1GdsShortOp		, 34,	"From SE:0 SH:1, number of GDS short operations")
ENUM_VALUE_GdsPerfCounter(Se1Sh0Noret			, 35,	"From SE:1 SH:0, number of commands that do not return data.")
ENUM_VALUE_GdsPerfCounter(Se1Sh0Ret				, 36,	"From SE:1 SH:0, number of commands that do return data.")
ENUM_VALUE_GdsPerfCounter(Se1Sh0OrdCnt			, 37,	"From SE:1 SH:0, number of ordered count operations.")
ENUM_VALUE_GdsPerfCounter(Se1Sh02CompReq		, 38,	"From SE:1 SH:0, number of commands that return two components.")
ENUM_VALUE_GdsPerfCounter(Se1Sh0OrdWaveValid	, 39,	"From SE:1 SH:0, number of valid wave ID's processed by ordered append.")
ENUM_VALUE_GdsPerfCounter(Se1Sh0GdsDataValid	, 40,	"From SE:1 SH:0, number of valid write enables from the data bus.")
ENUM_VALUE_GdsPerfCounter(Se1Sh0GdsStallByOrd	, 41,	"From SE:1 SH:0, number of cycles GDS data is stalled due to Ordered count data.")
ENUM_VALUE_GdsPerfCounter(Se1Sh0GdsWrOp			, 42,	"From SE:1 SH:0, number of GDS Write operations.")
ENUM_VALUE_GdsPerfCounter(Se1Sh0GdsRdOp			, 43,	"From SE:1 SH:0, number of GDS Read operations.")
ENUM_VALUE_GdsPerfCounter(Se1Sh0GdsAtomOp		, 44,	"From SE:1 SH:0, number of GDS Atomic operations.")
ENUM_VALUE_GdsPerfCounter(Se1Sh0GdsRelOp		, 45,	"From SE:1 SH:0, number of GDS Relative operations.")
ENUM_VALUE_GdsPerfCounter(Se1Sh0GdsCmpxchOp		, 46,	"From SE:1 SH:0, number of GDS Compare or Exchange operations.")
ENUM_VALUE_GdsPerfCounter(Se1Sh0GdsByteOp		, 47,	"From SE:1 SH:0, number of GDS byte operations.")
ENUM_VALUE_GdsPerfCounter(Se1Sh0GdsShortOp		, 48,	"From SE:1 SH:0, number of GDS short operations.")
ENUM_VALUE_GdsPerfCounter(Se1Sh1Noret			, 49,	"From SE:1 SH:1, number of commands that do not return data")
ENUM_VALUE_GdsPerfCounter(Se1Sh1Ret				, 50,	"From SE:1 SH:1, number of commands that do return data")
ENUM_VALUE_GdsPerfCounter(Se1Sh1OrdCnt			, 51,	"From SE:1 SH:1, number of ordered count operations")
ENUM_VALUE_GdsPerfCounter(Se1Sh12CompReq		, 52,	"From SE:1 SH:1, number of commands that return two components")
ENUM_VALUE_GdsPerfCounter(Se1Sh1OrdWaveValid	, 53,	"From SE:1 SH:1, number of valid wave ID's processed by ordered append")
ENUM_VALUE_GdsPerfCounter(Se1Sh1GdsDataValid	, 54,	"From SE:1 SH:1, number of valid write enables from the data bus")
ENUM_VALUE_GdsPerfCounter(Se1Sh1GdsStallByOrd	, 55,	"From SE:1 SH:1, number of cycles GDS data is stalled due to Ordered count data")
ENUM_VALUE_GdsPerfCounter(Se1Sh1GdsWrOp			, 56,	"From SE:1 SH:1, number of GDS Write operations")
ENUM_VALUE_GdsPerfCounter(Se1Sh1GdsRdOp			, 57,	"From SE:1 SH:1, number of GDS Read operations")
ENUM_VALUE_GdsPerfCounter(Se1Sh1GdsAtomOp		, 58,	"From SE:1 SH:1, number of GDS Atomic operations")
ENUM_VALUE_GdsPerfCounter(Se1Sh1GdsRelOp		, 59,	"From SE:1 SH:1, number of GDS Relative operations")
ENUM_VALUE_GdsPerfCounter(Se1Sh1GdsCmpxchOp		, 60,	"From SE:1 SH:1, number of GDS Compare or Exchange operations")
ENUM_VALUE_GdsPerfCounter(Se1Sh1GdsByteOp		, 61,	"From SE:1 SH:1, number of GDS byte operations")
ENUM_VALUE_GdsPerfCounter(Se1Sh1GdsShortOp		, 62,	"From SE:1 SH:1, number of GDS short operations")
ENUM_VALUE_GdsPerfCounter(Se2Sh0Noret			, 63,	"From SE:2 SH:0, number of commands that do not return data")
ENUM_VALUE_GdsPerfCounter(Se2Sh0Ret				, 64,	"From SE:2 SH:0, number of commands that do return data")
ENUM_VALUE_GdsPerfCounter(Se2Sh0OrdCnt			, 65,	"From SE:2 SH:0, number of ordered count operations")
ENUM_VALUE_GdsPerfCounter(Se2Sh02CompReq		, 66,	"From SE:2 SH:0, number of commands that return two components")
ENUM_VALUE_GdsPerfCounter(Se2Sh0OrdWaveValid	, 67,	"From SE:2 SH:0, number of valid wave ID's processed by ordered append")
ENUM_VALUE_GdsPerfCounter(Se2Sh0GdsDataValid	, 68,	"From SE:2 SH:0, number of valid write enables from the data bus")
ENUM_VALUE_GdsPerfCounter(Se2Sh0GdsStallByOrd	, 69,	"From SE:2 SH:0, number of cycles GDS data is stalled due to Ordered count data")
ENUM_VALUE_GdsPerfCounter(Se2Sh0GdsWrOp			, 70,	"From SE:2 SH:0, number of GDS Write operations")
ENUM_VALUE_GdsPerfCounter(Se2Sh0GdsRdOp			, 71,	"From SE:2 SH:0, number of GDS Read operations")
ENUM_VALUE_GdsPerfCounter(Se2Sh0GdsAtomOp		, 72,	"From SE:2 SH:0, number of GDS Atomic operations")
ENUM_VALUE_GdsPerfCounter(Se2Sh0GdsRelOp		, 73,	"From SE:2 SH:0, number of GDS Relative operations")
ENUM_VALUE_GdsPerfCounter(Se2Sh0GdsCmpxchOp		, 74,	"From SE:2 SH:0, number of GDS Compare or Exchange operations")
ENUM_VALUE_GdsPerfCounter(Se2Sh0GdsByteOp		, 75,	"From SE:2 SH:0, number of GDS byte operations")
ENUM_VALUE_GdsPerfCounter(Se2Sh0GdsShortOp		, 76,	"From SE:2 SH:0, number of GDS short operations")
ENUM_VALUE_GdsPerfCounter(Se2Sh1Noret			, 77,	"From SE:2 SH:1, number of commands that do not return data")
ENUM_VALUE_GdsPerfCounter(Se2Sh1Ret				, 78,	"From SE:2 SH:1, number of commands that do return data")
ENUM_VALUE_GdsPerfCounter(Se2Sh1OrdCnt			, 79,	"From SE:2 SH:1, number of ordered count operations")
ENUM_VALUE_GdsPerfCounter(Se2Sh12CompReq		, 80,	"From SE:2 SH:1, number of commands that return two components")
ENUM_VALUE_GdsPerfCounter(Se2Sh1OrdWaveValid	, 81,	"From SE:2 SH:1, number of valid wave ID's processed by ordered append")
ENUM_VALUE_GdsPerfCounter(Se2Sh1GdsDataValid	, 82,	"From SE:2 SH:1, number of valid write enables from the data bus")
ENUM_VALUE_GdsPerfCounter(Se2Sh1GdsStallByOrd	, 83,	"From SE:2 SH:1, number of cycles GDS data is stalled due to Ordered count data")
ENUM_VALUE_GdsPerfCounter(Se2Sh1GdsWrOp			, 84,	"From SE:2 SH:1, number of GDS Write operations")
ENUM_VALUE_GdsPerfCounter(Se2Sh1GdsRdOp			, 85,	"From SE:2 SH:1, number of GDS Read operations")
ENUM_VALUE_GdsPerfCounter(Se2Sh1GdsAtomOp		, 86,	"From SE:2 SH:1, number of GDS Atomic operations")
ENUM_VALUE_GdsPerfCounter(Se2Sh1GdsRelOp		, 87,	"From SE:2 SH:1, number of GDS Relative operations")
ENUM_VALUE_GdsPerfCounter(Se2Sh1GdsCmpxchOp		, 88,	"From SE:2 SH:1, number of GDS Compare or Exchange operations")
ENUM_VALUE_GdsPerfCounter(Se2Sh1GdsByteOp		, 89,	"From SE:2 SH:1, number of GDS byte operations")
ENUM_VALUE_GdsPerfCounter(Se2Sh1GdsShortOp		, 90,	"From SE:2 SH:1, number of GDS short operations")
ENUM_VALUE_GdsPerfCounter(Se3Sh0Noret			, 91,	"From SE:3 SH:0, number of commands that do not return data")
ENUM_VALUE_GdsPerfCounter(Se3Sh0Ret				, 92,	"From SE:3 SH:0, number of commands that do return data")
ENUM_VALUE_GdsPerfCounter(Se3Sh0OrdCnt			, 93,	"From SE:3 SH:0, number of ordered count operations")
ENUM_VALUE_GdsPerfCounter(Se3Sh02CompReq		, 94,	"From SE:3 SH:0, number of commands that return two components")
ENUM_VALUE_GdsPerfCounter(Se3Sh0OrdWaveValid	, 95,	"From SE:3 SH:0, number of valid wave ID's processed by ordered append")
ENUM_VALUE_GdsPerfCounter(Se3Sh0GdsDataValid	, 96,	"From SE:3 SH:0, number of valid write enables from the data bus")
ENUM_VALUE_GdsPerfCounter(Se3Sh0GdsStallByOrd	, 97,	"From SE:3 SH:0, number of cycles GDS data is stalled due to Ordered count data")
ENUM_VALUE_GdsPerfCounter(Se3Sh0GdsWrOp			, 98,	"From SE:3 SH:0, number of GDS Write operations")
ENUM_VALUE_GdsPerfCounter(Se3Sh0GdsRdOp			, 99,	"From SE:3 SH:0, number of GDS Read operations")
ENUM_VALUE_GdsPerfCounter(Se3Sh0GdsAtomOp		,100,	"From SE:3 SH:0, number of GDS Atomic operations")
ENUM_VALUE_GdsPerfCounter(Se3Sh0GdsRelOp		,101,	"From SE:3 SH:0, number of GDS Relative operations")
ENUM_VALUE_GdsPerfCounter(Se3Sh0GdsCmpxchOp		,102,	"From SE:3 SH:0, number of GDS Compare or Exchange operations")
ENUM_VALUE_GdsPerfCounter(Se3Sh0GdsByteOp		,103,	"From SE:3 SH:0, number of GDS byte operations")
ENUM_VALUE_GdsPerfCounter(Se3Sh0GdsShortOp		,104,	"From SE:3 SH:0, number of GDS short operations")
ENUM_VALUE_GdsPerfCounter(Se3Sh1Noret			,105,	"From SE:3 SH:1, number of commands that do not return data")
ENUM_VALUE_GdsPerfCounter(Se3Sh1Ret				,106,	"From SE:3 SH:1, number of commands that do return data")
ENUM_VALUE_GdsPerfCounter(Se3Sh1OrdCnt			,107,	"From SE:3 SH:1, number of ordered count operations")
ENUM_VALUE_GdsPerfCounter(Se3Sh12CompReq		,108,	"From SE:3 SH:1, number of commands that return two components")
ENUM_VALUE_GdsPerfCounter(Se3Sh1OrdWaveValid	,109,	"From SE:3 SH:1, number of valid wave ID's processed by ordered append")
ENUM_VALUE_GdsPerfCounter(Se3Sh1GdsDataValid	,110,	"From SE:3 SH:1, number of valid write enables from the data bus")
ENUM_VALUE_GdsPerfCounter(Se3Sh1GdsStallByOrd	,111,	"From SE:3 SH:1, number of cycles GDS data is stalled due to Ordered count data")
ENUM_VALUE_GdsPerfCounter(Se3Sh1GdsWrOp			,112,	"From SE:3 SH:1, number of GDS Write operations")
ENUM_VALUE_GdsPerfCounter(Se3Sh1GdsRdOp			,113,	"From SE:3 SH:1, number of GDS Read operations")
ENUM_VALUE_GdsPerfCounter(Se3Sh1GdsAtomOp		,114,	"From SE:3 SH:1, number of GDS Atomic operations")
ENUM_VALUE_GdsPerfCounter(Se3Sh1GdsRelOp		,115,	"From SE:3 SH:1, number of GDS Relative operations")
ENUM_VALUE_GdsPerfCounter(Se3Sh1GdsCmpxchOp		,116,	"From SE:3 SH:1, number of GDS Compare or Exchange operations")
ENUM_VALUE_GdsPerfCounter(Se3Sh1GdsByteOp		,117,	"From SE:3 SH:1, number of GDS byte operations")
ENUM_VALUE_GdsPerfCounter(Se3Sh1GdsShortOp		,118,	"From SE:3 SH:1, number of GDS short operations")
ENUM_VALUE_GdsPerfCounter(GwsReleased			,119,	"Number of waves released by GWS.")
ENUM_VALUE_GdsPerfCounter(GwsBypass				,120,	"Number of waves bypassed by GWS.")

#ifndef ENUM_VALUE_TcaPerfCounter
#define ENUM_VALUE_TcaPerfCounter(sym, val, desc_string)
#endif
ENUM_VALUE_TcaPerfCounter(None						,  0,	"Do not count anything.")
ENUM_VALUE_TcaPerfCounter(Cycle						,  1,	"Number of cycles.")
ENUM_VALUE_TcaPerfCounter(Busy						,  2,	"Number of cycles the texture cache arbiter has a request pending.")
ENUM_VALUE_TcaPerfCounter(ForcedHoleTcc0			,  3,	"Number of TCC0 hole requests that waited so long that it was decided that they should be forced rather than opportunistic. The TCC number is based on the TCCs connected to this TCA and not on the global numbering.")
ENUM_VALUE_TcaPerfCounter(ForcedHoleTcc1			,  4,	"Number of TCC1 hole requests that waited so long that it was decided that they should be forced rather than opportunistic. The TCC number is based on the TCCs connected to this TCA and not on the global numbering.")
ENUM_VALUE_TcaPerfCounter(ForcedHoleTcc2			,  5,	"Number of TCC2 hole requests that waited so long that it was decided that they should be forced rather than opportunistic. The TCC number is based on the TCCs connected to this TCA and not on the global numbering.")
ENUM_VALUE_TcaPerfCounter(ForcedHoleTcc3			,  6,	"Number of TCC3 hole requests that waited so long that it was decided that they should be forced rather than opportunistic. The TCC number is based on the TCCs connected to this TCA and not on the global numbering.")
ENUM_VALUE_TcaPerfCounter(ForcedHoleTcc4			,  7,	"Number of TCC4 hole requests that waited so long that it was decided that they should be forced rather than opportunistic. The TCC number is based on the TCCs connected to this TCA and not on the global numbering.")
ENUM_VALUE_TcaPerfCounter(ForcedHoleTcc5			,  8,	"Number of TCC5 hole requests that waited so long that it was decided that they should be forced rather than opportunistic. The TCC number is based on the TCCs connected to this TCA and not on the global numbering.")
ENUM_VALUE_TcaPerfCounter(ForcedHoleTcc6			,  9,	"Number of TCC6 hole requests that waited so long that it was decided that they should be forced rather than opportunistic. The TCC number is based on the TCCs connected to this TCA and not on the global numbering.")
ENUM_VALUE_TcaPerfCounter(ForcedHoleTcc7			, 10,	"Number of TCC7 hole requests that waited so long that it was decided that they should be forced rather than opportunistic. The TCC number is based on the TCCs connected to this TCA and not on the global numbering.")
ENUM_VALUE_TcaPerfCounter(ReqTcc0					, 11,	"Number of requests sent to TCC0. This should report the same thing as kTccPerfCounterReq in the corresponding TCC in the long run.  It is only offered to create a deterministic counter in the TCA so that the counters may be sanity tested.")
ENUM_VALUE_TcaPerfCounter(ReqTcc1					, 12,	"Number of requests sent to TCC1. This should report the same thing as kTccPerfCounterReq in the corresponding TCC in the long run.  It is only offered to create a deterministic counter in the TCA so that the counters may be sanity tested.")
ENUM_VALUE_TcaPerfCounter(ReqTcc2					, 13,	"Number of requests sent to TCC2. This should report the same thing as kTccPerfCounterReq in the corresponding TCC in the long run.  It is only offered to create a deterministic counter in the TCA so that the counters may be sanity tested.")
ENUM_VALUE_TcaPerfCounter(ReqTcc3					, 14,	"Number of requests sent to TCC3. This should report the same thing as kTccPerfCounterReq in the corresponding TCC in the long run.  It is only offered to create a deterministic counter in the TCA so that the counters may be sanity tested.")
ENUM_VALUE_TcaPerfCounter(ReqTcc4					, 15,	"Number of requests sent to TCC4. This should report the same thing as kTccPerfCounterReq in the corresponding TCC in the long run.  It is only offered to create a deterministic counter in the TCA so that the counters may be sanity tested.")
ENUM_VALUE_TcaPerfCounter(ReqTcc5					, 16,	"Number of requests sent to TCC5. This should report the same thing as kTccPerfCounterReq in the corresponding TCC in the long run.  It is only offered to create a deterministic counter in the TCA so that the counters may be sanity tested.")
ENUM_VALUE_TcaPerfCounter(ReqTcc6					, 17,	"Number of requests sent to TCC6. This should report the same thing as kTccPerfCounterReq in the corresponding TCC in the long run.  It is only offered to create a deterministic counter in the TCA so that the counters may be sanity tested.")
ENUM_VALUE_TcaPerfCounter(ReqTcc7					, 18,	"Number of requests sent to TCC7. This should report the same thing as kTccPerfCounterReq in the corresponding TCC in the long run.  It is only offered to create a deterministic counter in the TCA so that the counters may be sanity tested.")
ENUM_VALUE_TcaPerfCounter(CrossbarDoubleArbTcc0		, 19,	"Number of cycles two requests were sent in one clock to TCC0. The TCC number is based on the TCCs connected to this TCA and not on the global numbering.")
ENUM_VALUE_TcaPerfCounter(CrossbarDoubleArbTcc1		, 20,	"Number of cycles two requests were sent in one clock to TCC1. The TCC number is based on the TCCs connected to this TCA and not on the global numbering.")
ENUM_VALUE_TcaPerfCounter(CrossbarDoubleArbTcc2		, 21,	"Number of cycles two requests were sent in one clock to TCC2. The TCC number is based on the TCCs connected to this TCA and not on the global numbering.")
ENUM_VALUE_TcaPerfCounter(CrossbarDoubleArbTcc3		, 22,	"Number of cycles two requests were sent in one clock to TCC3. The TCC number is based on the TCCs connected to this TCA and not on the global numbering.")
ENUM_VALUE_TcaPerfCounter(CrossbarDoubleArbTcc4		, 23,	"Number of cycles two requests were sent in one clock to TCC4. The TCC number is based on the TCCs connected to this TCA and not on the global numbering.")
ENUM_VALUE_TcaPerfCounter(CrossbarDoubleArbTcc5		, 24,	"Number of cycles two requests were sent in one clock to TCC5. The TCC number is based on the TCCs connected to this TCA and not on the global numbering.")
ENUM_VALUE_TcaPerfCounter(CrossbarDoubleArbTcc6		, 25,	"Number of cycles two requests were sent in one clock to TCC6. The TCC number is based on the TCCs connected to this TCA and not on the global numbering.")
ENUM_VALUE_TcaPerfCounter(CrossbarDoubleArbTcc7		, 26,	"Number of cycles two requests were sent in one clock to TCC7. The TCC number is based on the TCCs connected to this TCA and not on the global numbering.")
ENUM_VALUE_TcaPerfCounter(CrossbarStallTcc0			, 27,	"Number of cycles no requests could be sent to TCC0 because its fifos were expected to be full. The TCC number is based on the TCCs connected to this TCA and not on the global numbering.")
ENUM_VALUE_TcaPerfCounter(CrossbarStallTcc1			, 28,	"Number of cycles no requests could be sent to TCC1 because its fifos were expected to be full. The TCC number is based on the TCCs connected to this TCA and not on the global numbering.")
ENUM_VALUE_TcaPerfCounter(CrossbarStallTcc2			, 29,	"Number of cycles no requests could be sent to TCC2 because its fifos were expected to be full. The TCC number is based on the TCCs connected to this TCA and not on the global numbering.")
ENUM_VALUE_TcaPerfCounter(CrossbarStallTcc3			, 30,	"Number of cycles no requests could be sent to TCC3 because its fifos were expected to be full. The TCC number is based on the TCCs connected to this TCA and not on the global numbering.")
ENUM_VALUE_TcaPerfCounter(CrossbarStallTcc4			, 31,	"Number of cycles no requests could be sent to TCC4 because its fifos were expected to be full. The TCC number is based on the TCCs connected to this TCA and not on the global numbering.")
ENUM_VALUE_TcaPerfCounter(CrossbarStallTcc5			, 32,	"Number of cycles no requests could be sent to TCC5 because its fifos were expected to be full. The TCC number is based on the TCCs connected to this TCA and not on the global numbering.")
ENUM_VALUE_TcaPerfCounter(CrossbarStallTcc6			, 33,	"Number of cycles no requests could be sent to TCC6 because its fifos were expected to be full. The TCC number is based on the TCCs connected to this TCA and not on the global numbering.")
ENUM_VALUE_TcaPerfCounter(CrossbarStallTcc7			, 34,	"Number of cycles no requests could be sent to TCC7 because its fifos were expected to be full. The TCC number is based on the TCCs connected to this TCA and not on the global numbering.")
ENUM_VALUE_TcaPerfCounter(ForcedHoleTcs				, 35,	"Number of TCS hole requests that waited so long that it was decided that they should be forced rather than opportunistic.")
ENUM_VALUE_TcaPerfCounter(ReqTcs					, 36,	"Number of requests sent to TCS. This should report the same thing as kTcsPerfCounterReq on the TCS in the long run.  It is only offered to create a deterministic counter in the TCA so that the counters may be sanity tested.")
ENUM_VALUE_TcaPerfCounter(CrossbarDoubleArbTcs		, 37,	"Number of cycles two requests were sent in one clock to the TCS.")
ENUM_VALUE_TcaPerfCounter(CrossbarStallTcs			, 38,	"Number of cycles no requests could be sent to the TCS because its fifos were expected to be full.")
ENUM_VALUE_TcaPerfCounterVirtualized(ForcedHoleTcc0			,512, "Number of TCC0 hole requests that waited so long that it was decided that they should be forced rather than opportunistic.")
ENUM_VALUE_TcaPerfCounterVirtualized(ForcedHoleTcc1			,513, "Number of TCC1 hole requests that waited so long that it was decided that they should be forced rather than opportunistic.")
ENUM_VALUE_TcaPerfCounterVirtualized(ForcedHoleTcc2			,514, "Number of TCC2 hole requests that waited so long that it was decided that they should be forced rather than opportunistic.")
ENUM_VALUE_TcaPerfCounterVirtualized(ForcedHoleTcc3			,515, "Number of TCC3 hole requests that waited so long that it was decided that they should be forced rather than opportunistic.")
ENUM_VALUE_TcaPerfCounterVirtualized(ForcedHoleTcc4			,516, "Number of TCC4 hole requests that waited so long that it was decided that they should be forced rather than opportunistic.")
ENUM_VALUE_TcaPerfCounterVirtualized(ForcedHoleTcc5			,517, "Number of TCC5 hole requests that waited so long that it was decided that they should be forced rather than opportunistic.")
ENUM_VALUE_TcaPerfCounterVirtualized(ForcedHoleTcc6			,518, "Number of TCC6 hole requests that waited so long that it was decided that they should be forced rather than opportunistic.")
ENUM_VALUE_TcaPerfCounterVirtualized(ForcedHoleTcc7			,519, "Number of TCC7 hole requests that waited so long that it was decided that they should be forced rather than opportunistic.")
ENUM_VALUE_TcaPerfCounterVirtualized(ForcedHoleTcc8			,520, "NEO ONLY; Number of TCC8 hole requests that waited so long that it was decided that they should be forced rather than opportunistic.")
ENUM_VALUE_TcaPerfCounterVirtualized(ForcedHoleTcc9			,521, "NEO ONLY; Number of TCC9 hole requests that waited so long that it was decided that they should be forced rather than opportunistic.")
ENUM_VALUE_TcaPerfCounterVirtualized(ForcedHoleTcc10		,522, "NEO ONLY; Number of TCC10 hole requests that waited so long that it was decided that they should be forced rather than opportunistic.")
ENUM_VALUE_TcaPerfCounterVirtualized(ForcedHoleTcc11		,523, "NEO ONLY; Number of TCC11 hole requests that waited so long that it was decided that they should be forced rather than opportunistic.")
ENUM_VALUE_TcaPerfCounterVirtualized(ForcedHoleTcc12		,524, "NEO ONLY; Number of TCC12 hole requests that waited so long that it was decided that they should be forced rather than opportunistic.")
ENUM_VALUE_TcaPerfCounterVirtualized(ForcedHoleTcc13		,525, "NEO ONLY; Number of TCC13 hole requests that waited so long that it was decided that they should be forced rather than opportunistic.")
ENUM_VALUE_TcaPerfCounterVirtualized(ForcedHoleTcc14		,526, "NEO ONLY; Number of TCC14 hole requests that waited so long that it was decided that they should be forced rather than opportunistic.")
ENUM_VALUE_TcaPerfCounterVirtualized(ForcedHoleTcc15		,527, "NEO ONLY; Number of TCC15 hole requests that waited so long that it was decided that they should be forced rather than opportunistic.")
ENUM_VALUE_TcaPerfCounterVirtualized(ReqTcc0				,528, "Number of requests sent to TCC0. This should report the same thing as kTccPerfCounterReq in the corresponding TCC in the long run. It is only offered to create a deterministic counter in the TCA so that the counters may be sanity tested.")
ENUM_VALUE_TcaPerfCounterVirtualized(ReqTcc1				,529, "Number of requests sent to TCC1. This should report the same thing as kTccPerfCounterReq in the corresponding TCC in the long run. It is only offered to create a deterministic counter in the TCA so that the counters may be sanity tested.")
ENUM_VALUE_TcaPerfCounterVirtualized(ReqTcc2				,530, "Number of requests sent to TCC2. This should report the same thing as kTccPerfCounterReq in the corresponding TCC in the long run. It is only offered to create a deterministic counter in the TCA so that the counters may be sanity tested.")
ENUM_VALUE_TcaPerfCounterVirtualized(ReqTcc3				,531, "Number of requests sent to TCC3. This should report the same thing as kTccPerfCounterReq in the corresponding TCC in the long run. It is only offered to create a deterministic counter in the TCA so that the counters may be sanity tested.")
ENUM_VALUE_TcaPerfCounterVirtualized(ReqTcc4				,532, "Number of requests sent to TCC4. This should report the same thing as kTccPerfCounterReq in the corresponding TCC in the long run. It is only offered to create a deterministic counter in the TCA so that the counters may be sanity tested.")
ENUM_VALUE_TcaPerfCounterVirtualized(ReqTcc5				,533, "Number of requests sent to TCC5. This should report the same thing as kTccPerfCounterReq in the corresponding TCC in the long run. It is only offered to create a deterministic counter in the TCA so that the counters may be sanity tested.")
ENUM_VALUE_TcaPerfCounterVirtualized(ReqTcc6				,534, "Number of requests sent to TCC6. This should report the same thing as kTccPerfCounterReq in the corresponding TCC in the long run. It is only offered to create a deterministic counter in the TCA so that the counters may be sanity tested.")
ENUM_VALUE_TcaPerfCounterVirtualized(ReqTcc7				,535, "Number of requests sent to TCC7. This should report the same thing as kTccPerfCounterReq in the corresponding TCC in the long run. It is only offered to create a deterministic counter in the TCA so that the counters may be sanity tested.")
ENUM_VALUE_TcaPerfCounterVirtualized(ReqTcc8				,536, "NEO ONLY; Number of requests sent to TCC8. This should report the same thing as kTccPerfCounterReq in the corresponding TCC in the long run. It is only offered to create a deterministic counter in the TCA so that the counters may be sanity tested.")
ENUM_VALUE_TcaPerfCounterVirtualized(ReqTcc9				,537, "NEO ONLY; Number of requests sent to TCC9. This should report the same thing as kTccPerfCounterReq in the corresponding TCC in the long run. It is only offered to create a deterministic counter in the TCA so that the counters may be sanity tested.")
ENUM_VALUE_TcaPerfCounterVirtualized(ReqTcc10				,538, "NEO ONLY; Number of requests sent to TCC10. This should report the same thing as kTccPerfCounterReq in the corresponding TCC in the long run. It is only offered to create a deterministic counter in the TCA so that the counters may be sanity tested.")
ENUM_VALUE_TcaPerfCounterVirtualized(ReqTcc11				,539, "NEO ONLY; Number of requests sent to TCC11. This should report the same thing as kTccPerfCounterReq in the corresponding TCC in the long run. It is only offered to create a deterministic counter in the TCA so that the counters may be sanity tested.")
ENUM_VALUE_TcaPerfCounterVirtualized(ReqTcc12				,540, "NEO ONLY; Number of requests sent to TCC12. This should report the same thing as kTccPerfCounterReq in the corresponding TCC in the long run. It is only offered to create a deterministic counter in the TCA so that the counters may be sanity tested.")
ENUM_VALUE_TcaPerfCounterVirtualized(ReqTcc13				,541, "NEO ONLY; Number of requests sent to TCC13. This should report the same thing as kTccPerfCounterReq in the corresponding TCC in the long run. It is only offered to create a deterministic counter in the TCA so that the counters may be sanity tested.")
ENUM_VALUE_TcaPerfCounterVirtualized(ReqTcc14				,542, "NEO ONLY; Number of requests sent to TCC14. This should report the same thing as kTccPerfCounterReq in the corresponding TCC in the long run. It is only offered to create a deterministic counter in the TCA so that the counters may be sanity tested.")
ENUM_VALUE_TcaPerfCounterVirtualized(ReqTcc15				,543, "NEO ONLY; Number of requests sent to TCC15. This should report the same thing as kTccPerfCounterReq in the corresponding TCC in the long run. It is only offered to create a deterministic counter in the TCA so that the counters may be sanity tested.")
ENUM_VALUE_TcaPerfCounterVirtualized(CrossbarDoubleArbTcc0	,544, "Number of cycles two requests were sent in one clock to TCC0.")
ENUM_VALUE_TcaPerfCounterVirtualized(CrossbarDoubleArbTcc1	,545, "Number of cycles two requests were sent in one clock to TCC1.")
ENUM_VALUE_TcaPerfCounterVirtualized(CrossbarDoubleArbTcc2	,546, "Number of cycles two requests were sent in one clock to TCC2.")
ENUM_VALUE_TcaPerfCounterVirtualized(CrossbarDoubleArbTcc3	,547, "Number of cycles two requests were sent in one clock to TCC3.")
ENUM_VALUE_TcaPerfCounterVirtualized(CrossbarDoubleArbTcc4	,548, "Number of cycles two requests were sent in one clock to TCC4.")
ENUM_VALUE_TcaPerfCounterVirtualized(CrossbarDoubleArbTcc5	,549, "Number of cycles two requests were sent in one clock to TCC5.")
ENUM_VALUE_TcaPerfCounterVirtualized(CrossbarDoubleArbTcc6	,550, "Number of cycles two requests were sent in one clock to TCC6.")
ENUM_VALUE_TcaPerfCounterVirtualized(CrossbarDoubleArbTcc7	,551, "Number of cycles two requests were sent in one clock to TCC7.")
ENUM_VALUE_TcaPerfCounterVirtualized(CrossbarDoubleArbTcc8	,552, "NEO ONLY; Number of cycles two requests were sent in one clock to TCC8.")
ENUM_VALUE_TcaPerfCounterVirtualized(CrossbarDoubleArbTcc9	,553, "NEO ONLY; Number of cycles two requests were sent in one clock to TCC9.")
ENUM_VALUE_TcaPerfCounterVirtualized(CrossbarDoubleArbTcc10	,554, "NEO ONLY; Number of cycles two requests were sent in one clock to TCC10.")
ENUM_VALUE_TcaPerfCounterVirtualized(CrossbarDoubleArbTcc11	,555, "NEO ONLY; Number of cycles two requests were sent in one clock to TCC11.")
ENUM_VALUE_TcaPerfCounterVirtualized(CrossbarDoubleArbTcc12	,556, "NEO ONLY; Number of cycles two requests were sent in one clock to TCC12.")
ENUM_VALUE_TcaPerfCounterVirtualized(CrossbarDoubleArbTcc13	,557, "NEO ONLY; Number of cycles two requests were sent in one clock to TCC13.")
ENUM_VALUE_TcaPerfCounterVirtualized(CrossbarDoubleArbTcc14	,558, "NEO ONLY; Number of cycles two requests were sent in one clock to TCC14.")
ENUM_VALUE_TcaPerfCounterVirtualized(CrossbarDoubleArbTcc15	,559, "NEO ONLY; Number of cycles two requests were sent in one clock to TCC15.")
ENUM_VALUE_TcaPerfCounterVirtualized(CrossbarStallTcc0		,560, "Number of cycles no requests could be sent to TCC0 because its fifos were expected to be full.")
ENUM_VALUE_TcaPerfCounterVirtualized(CrossbarStallTcc1		,561, "Number of cycles no requests could be sent to TCC1 because its fifos were expected to be full.")
ENUM_VALUE_TcaPerfCounterVirtualized(CrossbarStallTcc2		,562, "Number of cycles no requests could be sent to TCC2 because its fifos were expected to be full.")
ENUM_VALUE_TcaPerfCounterVirtualized(CrossbarStallTcc3		,563, "Number of cycles no requests could be sent to TCC3 because its fifos were expected to be full.")
ENUM_VALUE_TcaPerfCounterVirtualized(CrossbarStallTcc4		,564, "Number of cycles no requests could be sent to TCC4 because its fifos were expected to be full.")
ENUM_VALUE_TcaPerfCounterVirtualized(CrossbarStallTcc5		,565, "Number of cycles no requests could be sent to TCC5 because its fifos were expected to be full.")
ENUM_VALUE_TcaPerfCounterVirtualized(CrossbarStallTcc6		,566, "Number of cycles no requests could be sent to TCC6 because its fifos were expected to be full.")
ENUM_VALUE_TcaPerfCounterVirtualized(CrossbarStallTcc7		,567, "Number of cycles no requests could be sent to TCC7 because its fifos were expected to be full.")
ENUM_VALUE_TcaPerfCounterVirtualized(CrossbarStallTcc8		,568, "NEO ONLY; Number of cycles no requests could be sent to TCC8 because its fifos were expected to be full.")
ENUM_VALUE_TcaPerfCounterVirtualized(CrossbarStallTcc9		,569, "NEO ONLY; Number of cycles no requests could be sent to TCC9 because its fifos were expected to be full.")
ENUM_VALUE_TcaPerfCounterVirtualized(CrossbarStallTcc10		,570, "NEO ONLY; Number of cycles no requests could be sent to TCC10 because its fifos were expected to be full.")
ENUM_VALUE_TcaPerfCounterVirtualized(CrossbarStallTcc11		,571, "NEO ONLY; Number of cycles no requests could be sent to TCC11 because its fifos were expected to be full.")
ENUM_VALUE_TcaPerfCounterVirtualized(CrossbarStallTcc12		,572, "NEO ONLY; Number of cycles no requests could be sent to TCC12 because its fifos were expected to be full.")
ENUM_VALUE_TcaPerfCounterVirtualized(CrossbarStallTcc13		,573, "NEO ONLY; Number of cycles no requests could be sent to TCC13 because its fifos were expected to be full.")
ENUM_VALUE_TcaPerfCounterVirtualized(CrossbarStallTcc14		,574, "NEO ONLY; Number of cycles no requests could be sent to TCC14 because its fifos were expected to be full.")
ENUM_VALUE_TcaPerfCounterVirtualized(CrossbarStallTcc15		,575, "NEO ONLY; Number of cycles no requests could be sent to TCC15 because its fifos were expected to be full.")

#ifndef ENUM_VALUE_TcsPerfCounter
#define ENUM_VALUE_TcsPerfCounter(sym, val, desc_string)
#endif
ENUM_VALUE_TcsPerfCounter(None					,  0,	"Do not count anything.")
ENUM_VALUE_TcsPerfCounter(Cycle					,  1,	"Number of cycles.")
ENUM_VALUE_TcsPerfCounter(Busy					,  2,	"Number of cycles the TCS has a request pending.")
ENUM_VALUE_TcsPerfCounter(Req					,  3,	"Number of requests of all types. Requests are 64 byte cache lines and always continue through the TCS to memory. This counter can be used to measure the total Onion+ bus bandwidth to memory.")
ENUM_VALUE_TcsPerfCounter(Read					,  4,	"Number of read requests.")
ENUM_VALUE_TcsPerfCounter(Write					,  5,	"Number of write requests.")
ENUM_VALUE_TcsPerfCounter(Atomic				,  6,	"Number of atomic requests of all types.")
ENUM_VALUE_TcsPerfCounter(HoleFifoFull			,  7,	"Number of cycles the hole fifos were expected to be full as measured at the IB block.  This is the sum total of the effect of the hole fifos in the TCA and the src fifos in the TCS.")
ENUM_VALUE_TcsPerfCounter(ReqFifoFull			,  8,	"Number of cycles the req fifo is full.")
ENUM_VALUE_TcsPerfCounter(ReqCreditStall		,  9,	"Number of cycles the request block was stalled while trying to send a request to the chub due to a lack of interface credits.")
ENUM_VALUE_TcsPerfCounter(ReqNoSrcDataStall		, 10,	"Number of cycles the request block was stalled while trying to send a request to the chub due to a lack of source data availability.")
ENUM_VALUE_TcsPerfCounter(ReqStall				, 11,	"Number of cycles the request block was stalled while trying to send a request to the chub for any reason.")
ENUM_VALUE_TcsPerfCounter(TcsChubReqSend		, 12,	"Number of cycles something is sent over the TCS to CHUB req bus.")
ENUM_VALUE_TcsPerfCounter(ChubTcsRetSend		, 13,	"Number of cycles something is sent over the CHUB to TCS ret bus.")
ENUM_VALUE_TcsPerfCounter(ReturnAck				, 14,	"Number of times only an acknowledgement was sent on the return bus.")
ENUM_VALUE_TcsPerfCounter(ReturnData			, 15,	"Number of times only data was sent on the return bus.")
ENUM_VALUE_TcsPerfCounter(IbTotalRequestsStall	, 16,	"Number of cycles a request was stalled at the IB because the maximum allowable number of in flight requests in the tcs was reached.")
ENUM_VALUE_TcsPerfCounter(IbStall				, 17,	"Number of cycles the IB output was stalled.")
ENUM_VALUE_TcsPerfCounter(TcaLevel				, 18,	"The sum of the number of requests sent to the TCA for output arbitration in flight. Average TCA arbitration latency = kTcsPerfCounterTcaLevel / kTcsPerfCounterReq.")
ENUM_VALUE_TcsPerfCounter(HoleLevel				, 19,	"The sum of the number of hole requests in flight from the TCS requests to the data return to the TCS.  Average hole latency = kTcsPerfCounterHoleLevel/(kTcsPerfCounterWrite+kTcsPerfCounterAtomic).  Not windowable.")
ENUM_VALUE_TcsPerfCounter(ChubLevel				, 20,	"The sum of the number of chub requests in flight.  Average chub latency = kTcsPerfCounterChubLevel/TCS_PERF_REQ.")
ENUM_VALUE_TcsPerfCounter(Client0Req			, 64,	"Number of cycles client  0 sent a request to the TCS.")
ENUM_VALUE_TcsPerfCounter(Client1Req			, 65,	"Number of cycles client  1 sent a request to the TCS.")
ENUM_VALUE_TcsPerfCounter(Client2Req			, 66,	"Number of cycles client  2 sent a request to the TCS.")
ENUM_VALUE_TcsPerfCounter(Client3Req			, 67,	"Number of cycles client  3 sent a request to the TCS.")
ENUM_VALUE_TcsPerfCounter(Client4Req			, 68,	"Number of cycles client  4 sent a request to the TCS.")
ENUM_VALUE_TcsPerfCounter(Client5Req			, 69,	"Number of cycles client  5 sent a request to the TCS.")
ENUM_VALUE_TcsPerfCounter(Client6Req			, 70,	"Number of cycles client  6 sent a request to the TCS.")
ENUM_VALUE_TcsPerfCounter(Client7Req			, 71,	"Number of cycles client  7 sent a request to the TCS.")
ENUM_VALUE_TcsPerfCounter(Client8Req			, 72,	"Number of cycles client  8 sent a request to the TCS.")
ENUM_VALUE_TcsPerfCounter(Client9Req			, 73,	"Number of cycles client  9 sent a request to the TCS.")
ENUM_VALUE_TcsPerfCounter(Client10Req			, 74,	"Number of cycles client 10 sent a request to the TCS.")
ENUM_VALUE_TcsPerfCounter(Client11Req			, 75,	"Number of cycles client 11 sent a request to the TCS.")
ENUM_VALUE_TcsPerfCounter(Client12Req			, 76,	"Number of cycles client 12 sent a request to the TCS.")
ENUM_VALUE_TcsPerfCounter(Client13Req			, 77,	"Number of cycles client 13 sent a request to the TCS.")
ENUM_VALUE_TcsPerfCounter(Client14Req			, 78,	"Number of cycles client 14 sent a request to the TCS.")
ENUM_VALUE_TcsPerfCounter(Client15Req			, 79,	"Number of cycles client 15 sent a request to the TCS.")
ENUM_VALUE_TcsPerfCounter(Client16Req			, 80,	"Number of cycles client 16 sent a request to the TCS.")
ENUM_VALUE_TcsPerfCounter(Client17Req			, 81,	"Number of cycles client 17 sent a request to the TCS.")
ENUM_VALUE_TcsPerfCounter(Client18Req			, 82,	"Number of cycles client 18 sent a request to the TCS.")
ENUM_VALUE_TcsPerfCounter(Client19Req			, 83,	"Number of cycles client 19 sent a request to the TCS.")
ENUM_VALUE_TcsPerfCounter(Client20Req			, 84,	"Number of cycles client 20 sent a request to the TCS.")
ENUM_VALUE_TcsPerfCounter(Client21Req			, 85,	"Number of cycles client 21 sent a request to the TCS.")
ENUM_VALUE_TcsPerfCounter(Client22Req			, 86,	"Number of cycles client 22 sent a request to the TCS.")
ENUM_VALUE_TcsPerfCounter(Client23Req			, 87,	"Number of cycles client 23 sent a request to the TCS.")
ENUM_VALUE_TcsPerfCounter(Client24Req			, 88,	"Number of cycles client 24 sent a request to the TCS.")
ENUM_VALUE_TcsPerfCounter(Client25Req			, 89,	"Number of cycles client 25 sent a request to the TCS.")
ENUM_VALUE_TcsPerfCounter(Client26Req			, 90,	"Number of cycles client 26 sent a request to the TCS.")
ENUM_VALUE_TcsPerfCounter(Client27Req			, 91,	"Number of cycles client 27 sent a request to the TCS.")
ENUM_VALUE_TcsPerfCounter(Client28Req			, 92,	"Number of cycles client 28 sent a request to the TCS.")
ENUM_VALUE_TcsPerfCounter(Client29Req			, 93,	"Number of cycles client 29 sent a request to the TCS.")
ENUM_VALUE_TcsPerfCounter(Client30Req			, 94,	"Number of cycles client 30 sent a request to the TCS.")
ENUM_VALUE_TcsPerfCounter(Client31Req			, 95,	"Number of cycles client 31 sent a request to the TCS.")
ENUM_VALUE_TcsPerfCounter(Client32Req			, 96,	"Number of cycles client 32 sent a request to the TCS.")
ENUM_VALUE_TcsPerfCounter(Client33Req			, 97,	"Number of cycles client 33 sent a request to the TCS.")
ENUM_VALUE_TcsPerfCounter(Client34Req			, 98,	"Number of cycles client 34 sent a request to the TCS.")
ENUM_VALUE_TcsPerfCounter(Client35Req			, 99,	"Number of cycles client 35 sent a request to the TCS.")
ENUM_VALUE_TcsPerfCounter(Client36Req			,100,	"Number of cycles client 36 sent a request to the TCS.")
ENUM_VALUE_TcsPerfCounter(Client37Req			,101,	"Number of cycles client 37 sent a request to the TCS.")
ENUM_VALUE_TcsPerfCounter(Client38Req			,102,	"Number of cycles client 38 sent a request to the TCS.")
ENUM_VALUE_TcsPerfCounter(Client39Req			,103,	"Number of cycles client 39 sent a request to the TCS.")
ENUM_VALUE_TcsPerfCounter(Client40Req			,104,	"Number of cycles client 40 sent a request to the TCS.")
ENUM_VALUE_TcsPerfCounter(Client41Req			,105,	"Number of cycles client 41 sent a request to the TCS.")
ENUM_VALUE_TcsPerfCounter(Client42Req			,106,	"Number of cycles client 42 sent a request to the TCS.")
ENUM_VALUE_TcsPerfCounter(Client43Req			,107,	"Number of cycles client 43 sent a request to the TCS.")
ENUM_VALUE_TcsPerfCounter(Client44Req			,108,	"Number of cycles client 44 sent a request to the TCS.")
ENUM_VALUE_TcsPerfCounter(Client45Req			,109,	"Number of cycles client 45 sent a request to the TCS.")
ENUM_VALUE_TcsPerfCounter(Client46Req			,110,	"Number of cycles client 46 sent a request to the TCS.")
ENUM_VALUE_TcsPerfCounter(Client47Req			,111,	"Number of cycles client 47 sent a request to the TCS.")
ENUM_VALUE_TcsPerfCounter(Client48Req			,112,	"Number of cycles client 48 sent a request to the TCS.")
ENUM_VALUE_TcsPerfCounter(Client49Req			,113,	"Number of cycles client 49 sent a request to the TCS.")
ENUM_VALUE_TcsPerfCounter(Client50Req			,114,	"Number of cycles client 50 sent a request to the TCS.")
ENUM_VALUE_TcsPerfCounter(Client51Req			,115,	"Number of cycles client 51 sent a request to the TCS.")
ENUM_VALUE_TcsPerfCounter(Client52Req			,116,	"Number of cycles client 52 sent a request to the TCS.")
ENUM_VALUE_TcsPerfCounter(Client53Req			,117,	"Number of cycles client 53 sent a request to the TCS.")
ENUM_VALUE_TcsPerfCounter(Client54Req			,118,	"Number of cycles client 54 sent a request to the TCS.")
ENUM_VALUE_TcsPerfCounter(Client55Req			,119,	"Number of cycles client 55 sent a request to the TCS.")
ENUM_VALUE_TcsPerfCounter(Client56Req			,120,	"Number of cycles client 56 sent a request to the TCS.")
ENUM_VALUE_TcsPerfCounter(Client57Req			,121,	"Number of cycles client 57 sent a request to the TCS.")
ENUM_VALUE_TcsPerfCounter(Client58Req			,122,	"Number of cycles client 58 sent a request to the TCS.")
ENUM_VALUE_TcsPerfCounter(Client59Req			,123,	"Number of cycles client 59 sent a request to the TCS.")
ENUM_VALUE_TcsPerfCounter(Client60Req			,124,	"Number of cycles client 60 sent a request to the TCS.")
ENUM_VALUE_TcsPerfCounter(Client61Req			,125,	"Number of cycles client 61 sent a request to the TCS.")
ENUM_VALUE_TcsPerfCounter(Client62Req			,126,	"Number of cycles client 62 sent a request to the TCS.")
ENUM_VALUE_TcsPerfCounter(Client63Req			,127,	"Number of cycles client 63 sent a request to the TCS.")
ENUM_VALUE_TcsPerfCounterVirtualized(Se0Cu0Req	,512,	"Number of cycles CU0 in SE0 sent a request to this TCS.")
ENUM_VALUE_TcsPerfCounterVirtualized(Se0Cu1Req	,513,	"Number of cycles CU1 in SE0 sent a request to this TCS.")
ENUM_VALUE_TcsPerfCounterVirtualized(Se0Cu2Req	,514,	"Number of cycles CU2 in SE0 sent a request to this TCS.")
ENUM_VALUE_TcsPerfCounterVirtualized(Se0Cu3Req	,515,	"Number of cycles CU3 in SE0 sent a request to this TCS.")
ENUM_VALUE_TcsPerfCounterVirtualized(Se0Cu4Req	,516,	"Number of cycles CU4 in SE0 sent a request to this TCS.")
ENUM_VALUE_TcsPerfCounterVirtualized(Se0Cu5Req	,517,	"Number of cycles CU5 in SE0 sent a request to this TCS.")
ENUM_VALUE_TcsPerfCounterVirtualized(Se0Cu6Req	,518,	"Number of cycles CU6 in SE0 sent a request to this TCS.")
ENUM_VALUE_TcsPerfCounterVirtualized(Se0Cu7Req	,519,	"Number of cycles CU7 in SE0 sent a request to this TCS.")
ENUM_VALUE_TcsPerfCounterVirtualized(Se0Cu8Req	,520,	"Number of cycles CU8 in SE0 sent a request to this TCS.")
ENUM_VALUE_TcsPerfCounterVirtualized(Se1Cu0Req	,521,	"Number of cycles CU0 in SE1 sent a request to this TCS.")
ENUM_VALUE_TcsPerfCounterVirtualized(Se1Cu1Req	,522,	"Number of cycles CU1 in SE1 sent a request to this TCS.")
ENUM_VALUE_TcsPerfCounterVirtualized(Se1Cu2Req	,523,	"Number of cycles CU2 in SE1 sent a request to this TCS.")
ENUM_VALUE_TcsPerfCounterVirtualized(Se1Cu3Req	,524,	"Number of cycles CU3 in SE1 sent a request to this TCS.")
ENUM_VALUE_TcsPerfCounterVirtualized(Se1Cu4Req	,525,	"Number of cycles CU4 in SE1 sent a request to this TCS.")
ENUM_VALUE_TcsPerfCounterVirtualized(Se1Cu5Req	,526,	"Number of cycles CU5 in SE1 sent a request to this TCS.")
ENUM_VALUE_TcsPerfCounterVirtualized(Se1Cu6Req	,527,	"Number of cycles CU6 in SE1 sent a request to this TCS.")
ENUM_VALUE_TcsPerfCounterVirtualized(Se1Cu7Req	,528,	"Number of cycles CU7 in SE1 sent a request to this TCS.")
ENUM_VALUE_TcsPerfCounterVirtualized(Se1Cu8Req	,529,	"Number of cycles CU8 in SE1 sent a request to this TCS.")
ENUM_VALUE_TcsPerfCounterVirtualized(Se2Cu0Req	,530,	"NEO ONLY; Number of cycles CU0 in SE2 sent a request to this TCS.")
ENUM_VALUE_TcsPerfCounterVirtualized(Se2Cu1Req	,531,	"NEO ONLY; Number of cycles CU1 in SE2 sent a request to this TCS.")
ENUM_VALUE_TcsPerfCounterVirtualized(Se2Cu2Req	,532,	"NEO ONLY; Number of cycles CU2 in SE2 sent a request to this TCS.")
ENUM_VALUE_TcsPerfCounterVirtualized(Se2Cu3Req	,533,	"NEO ONLY; Number of cycles CU3 in SE2 sent a request to this TCS.")
ENUM_VALUE_TcsPerfCounterVirtualized(Se2Cu4Req	,534,	"NEO ONLY; Number of cycles CU4 in SE2 sent a request to this TCS.")
ENUM_VALUE_TcsPerfCounterVirtualized(Se2Cu5Req	,535,	"NEO ONLY; Number of cycles CU5 in SE2 sent a request to this TCS.")
ENUM_VALUE_TcsPerfCounterVirtualized(Se2Cu6Req	,536,	"NEO ONLY; Number of cycles CU6 in SE2 sent a request to this TCS.")
ENUM_VALUE_TcsPerfCounterVirtualized(Se2Cu7Req	,537,	"NEO ONLY; Number of cycles CU7 in SE2 sent a request to this TCS.")
ENUM_VALUE_TcsPerfCounterVirtualized(Se2Cu8Req	,538,	"NEO ONLY; Number of cycles CU8 in SE2 sent a request to this TCS.")
ENUM_VALUE_TcsPerfCounterVirtualized(Se3Cu0Req	,539,	"NEO ONLY; Number of cycles CU0 in SE3 sent a request to this TCS.")
ENUM_VALUE_TcsPerfCounterVirtualized(Se3Cu1Req	,540,	"NEO ONLY; Number of cycles CU1 in SE3 sent a request to this TCS.")
ENUM_VALUE_TcsPerfCounterVirtualized(Se3Cu2Req	,541,	"NEO ONLY; Number of cycles CU2 in SE3 sent a request to this TCS.")
ENUM_VALUE_TcsPerfCounterVirtualized(Se3Cu3Req	,542,	"NEO ONLY; Number of cycles CU3 in SE3 sent a request to this TCS.")
ENUM_VALUE_TcsPerfCounterVirtualized(Se3Cu4Req	,543,	"NEO ONLY; Number of cycles CU4 in SE3 sent a request to this TCS.")
ENUM_VALUE_TcsPerfCounterVirtualized(Se3Cu5Req	,544,	"NEO ONLY; Number of cycles CU5 in SE3 sent a request to this TCS.")
ENUM_VALUE_TcsPerfCounterVirtualized(Se3Cu6Req	,545,	"NEO ONLY; Number of cycles CU6 in SE3 sent a request to this TCS.")
ENUM_VALUE_TcsPerfCounterVirtualized(Se3Cu7Req	,546,	"NEO ONLY; Number of cycles CU7 in SE3 sent a request to this TCS.")
ENUM_VALUE_TcsPerfCounterVirtualized(Se3Cu8Req	,547,	"NEO ONLY; Number of cycles CU8 in SE3 sent a request to this TCS.")

#ifndef ENUM_VALUE_TccPerfCounter
#define ENUM_VALUE_TccPerfCounter(sym, val, desc_string)
#endif
ENUM_VALUE_TccPerfCounter(None								,  0,	"Do not count anything.")
ENUM_VALUE_TccPerfCounter(Cycle								,  1,	"Number of cycles. Performance windowing is not supported for this counter.")
ENUM_VALUE_TccPerfCounter(Busy								,  2,	"Number of cycles the TCC has a request pending. Performance windowing is not supported for this counter.")
ENUM_VALUE_TccPerfCounter(Req								,  3,	"Number of requests of all types. Requests are 64 byte cache lines. This can be used to measure the total bandwidth served by the L2 to all clients (such as L1, CP).")
ENUM_VALUE_TccPerfCounter(StreamingReq						,  4,	"Number of streaming requests.")
ENUM_VALUE_TccPerfCounter(Read								,  5,	"Number of read requests.")
ENUM_VALUE_TccPerfCounter(Write								,  6,	"Number of write requests.")
ENUM_VALUE_TccPerfCounter(Atomic							,  7,	"Number of atomic requests of all types.")
ENUM_VALUE_TccPerfCounter(Hit								, 10,	"Number of cache hits.")
ENUM_VALUE_TccPerfCounter(Miss								, 11,	"Number of cache misses.")
ENUM_VALUE_TccPerfCounter(DewriteAllocateHit				, 12,	"Number of times a read was performed on a cache line that had only been written into before. This can only occur once for the life of a cache line.")
ENUM_VALUE_TccPerfCounter(FullyWrittenHit					, 13,	"Number of times a read from the memory controller was avoided because the cache line was already fully written with data. This can only occur once for the life of a cache line.")
ENUM_VALUE_TccPerfCounter(Writeback							, 14,	"Number of lines written back to main memory.")
ENUM_VALUE_TccPerfCounter(LatencyFifoFull					, 15,	"Number of cycles the latency FIFO was full.")
ENUM_VALUE_TccPerfCounter(SrcFifoFull						, 16,	"Number of cycles the src fifo was expected to be full as measured at the IB block.")
ENUM_VALUE_TccPerfCounter(HoleFifoFull						, 17,	"Number of cycles the hole fifos in the TCAs were expected to be full as measured at the IB block.  This is usually an indication that there was insufficient bandwidth available on the data bus for source data.")
ENUM_VALUE_TccPerfCounter(McWrreq							, 18,	"Number of 32-byte write requests sent to the memory controller. This directly measures L2-to-memory write bandwidth.")
ENUM_VALUE_TccPerfCounter(McWrreqStall						, 19,	"Number of cycles a write request was stalled.")
ENUM_VALUE_TccPerfCounter(McWrreqCreditStall				, 20,	"Number of cycles a mc write request was stalled because the interface was out of credits.")
ENUM_VALUE_TccPerfCounter(McWrreqMcHaltStall				, 21,	"Number of cycles a mc write request was stalled because the MC halted the interface.")
ENUM_VALUE_TccPerfCounter(TooManyMcWrreqsStall				, 22,	"Number of cycles the TCC could not send a mc write request because it already reached its maximum number of pending mc write requests.")
ENUM_VALUE_TccPerfCounter(McWrreqLevel						, 23,	"The sum of the number of 32-byte write requests in flight to the memory controller. This is primarily meant for measure the average write latency from the TCC (L2) to memory. Average write latency = kTccPerfCounterMcWrreqLevel / kTccPerfCounterMcWrreq.")
ENUM_VALUE_TccPerfCounter(McRdreq							, 24,	"Number of 32-byte reads. The hardware actually does 64-byte reads but the number is adjusted to provide uniformity. This directly measures L2-to-memory read bandwidth.")
ENUM_VALUE_TccPerfCounter(McRdreqCreditStall				, 25,	"Number of cycles there was a stall because the read request interface was out of credits.  Stalls occur regardless of whether a read needed to be performed or not.")
ENUM_VALUE_TccPerfCounter(McRdreqMcHaltStall				, 26,	"Number of cycles there was a stall because the read request interface was halted by the MC.  Stalls occur regardless of whether a read needed to be performed or not.")
ENUM_VALUE_TccPerfCounter(McRdreqLevel						, 27,	"The sum of the number of 32-byte read requests in flight to the memory controller. This is primarily meant for measure average read latency from the TCC (L2) to memory. Average read latency = kTccPerfCounterMcRdreqLevel / kTccPerfCounterMcRdreq.")
ENUM_VALUE_TccPerfCounter(TagStall							, 28,	"Number of cycles the tag is stalled for any reason.  This also includes kTccPerfCounterMcRdreqCreditStall and kTccPerfCounterMcRdreqMcHaltStall stall cycles.")
ENUM_VALUE_TccPerfCounter(TagWritebackFifoFull				, 29,	"Number of cycles that the writeback fifo within the tag block is full.  This does not immediately cause a stall, but it will cause problems in the long run.")
ENUM_VALUE_TccPerfCounter(TagMissNothingReplaceableStall	, 30,	"Number of cycles there is a cache miss and a line that can be replaced is not available.")
ENUM_VALUE_TccPerfCounter(ReadReturnTimeout					, 31,	"Number of bubbles requests sent to the TCA because a mc read return waited so long for a cache ram port that it timed out.")
ENUM_VALUE_TccPerfCounter(WritebackReadTimeout				, 32,	"Number of bubbles requests sent to the TCA because a writeback waited so long for a cache ram port that it timed out.")
ENUM_VALUE_TccPerfCounter(ReadReturnFullBubble				, 33,	"Number of bubbles requests sent to the TCA to prevent the mc read return fifos from overflowing.  Not windowable.")
ENUM_VALUE_TccPerfCounter(Bubble							, 34,	"Total number of bubble requests sent to the TCA")
ENUM_VALUE_TccPerfCounter(ReturnAck							, 35,	"Number of times only an ack was sent on the return bus.")
ENUM_VALUE_TccPerfCounter(ReturnData						, 36,	"Number of times only data was sent on the return bus.")
ENUM_VALUE_TccPerfCounter(ReturnHole						, 37,	"Number of times only a hole was sent on the return bus.")
ENUM_VALUE_TccPerfCounter(ReturnAckHole						, 38,	"Number of times an ack and a hole were sent at the same time on the return bus.")
ENUM_VALUE_TccPerfCounter(IbStall							, 39,	"Number of cycles the IB output was stalled.")
ENUM_VALUE_TccPerfCounter(TcaLevel							, 40,	"The sum of the number of requests sent to the TCA for output arbitration in flight. Average TCA arbitration latency = kTccPerfCounterTcaLevel / TccPerfCounterReq.")
ENUM_VALUE_TccPerfCounter(HoleLevel							, 41,	"The sum of the number of hole requests in flight.  Average hole latency = kTccPerfCounterHoleLevel/(kTccPerfCounterWrite+kTccPerfCounterAtomic).  Not windowable.")
ENUM_VALUE_TccPerfCounter(McRdretNack						, 42,	"The number of 32-byte mc read returns that were nacked.")
ENUM_VALUE_TccPerfCounter(McWrretNack						, 43,	"The number of 32-byte mc write returns that were nacked.")
ENUM_VALUE_TccPerfCounter(Client0Req						, 64,	"Number of cycles client  0 sent a request to this TCC.")
ENUM_VALUE_TccPerfCounter(Client1Req						, 65,	"Number of cycles client  1 sent a request to this TCC.")
ENUM_VALUE_TccPerfCounter(Client2Req						, 66,	"Number of cycles client  2 sent a request to this TCC.")
ENUM_VALUE_TccPerfCounter(Client3Req						, 67,	"Number of cycles client  3 sent a request to this TCC.")
ENUM_VALUE_TccPerfCounter(Client4Req						, 68,	"Number of cycles client  4 sent a request to this TCC.")
ENUM_VALUE_TccPerfCounter(Client5Req						, 69,	"Number of cycles client  5 sent a request to this TCC.")
ENUM_VALUE_TccPerfCounter(Client6Req						, 70,	"Number of cycles client  6 sent a request to this TCC.")
ENUM_VALUE_TccPerfCounter(Client7Req						, 71,	"Number of cycles client  7 sent a request to this TCC.")
ENUM_VALUE_TccPerfCounter(Client8Req						, 72,	"Number of cycles client  8 sent a request to this TCC.")
ENUM_VALUE_TccPerfCounter(Client9Req						, 73,	"Number of cycles client  9 sent a request to this TCC.")
ENUM_VALUE_TccPerfCounter(Client10Req						, 74,	"Number of cycles client 10 sent a request to this TCC.")
ENUM_VALUE_TccPerfCounter(Client11Req						, 75,	"Number of cycles client 11 sent a request to this TCC.")
ENUM_VALUE_TccPerfCounter(Client12Req						, 76,	"Number of cycles client 12 sent a request to this TCC.")
ENUM_VALUE_TccPerfCounter(Client13Req						, 77,	"Number of cycles client 13 sent a request to this TCC.")
ENUM_VALUE_TccPerfCounter(Client14Req						, 78,	"Number of cycles client 14 sent a request to this TCC.")
ENUM_VALUE_TccPerfCounter(Client15Req						, 79,	"Number of cycles client 15 sent a request to this TCC.")
ENUM_VALUE_TccPerfCounter(Client16Req						, 80,	"Number of cycles client 16 sent a request to this TCC.")
ENUM_VALUE_TccPerfCounter(Client17Req						, 81,	"Number of cycles client 17 sent a request to this TCC.")
ENUM_VALUE_TccPerfCounter(Client18Req						, 82,	"Number of cycles client 18 sent a request to this TCC.")
ENUM_VALUE_TccPerfCounter(Client19Req						, 83,	"Number of cycles client 19 sent a request to this TCC.")
ENUM_VALUE_TccPerfCounter(Client20Req						, 84,	"Number of cycles client 20 sent a request to this TCC.")
ENUM_VALUE_TccPerfCounter(Client21Req						, 85,	"Number of cycles client 21 sent a request to this TCC.")
ENUM_VALUE_TccPerfCounter(Client22Req						, 86,	"Number of cycles client 22 sent a request to this TCC.")
ENUM_VALUE_TccPerfCounter(Client23Req						, 87,	"Number of cycles client 23 sent a request to this TCC.")
ENUM_VALUE_TccPerfCounter(Client24Req						, 88,	"Number of cycles client 24 sent a request to this TCC.")
ENUM_VALUE_TccPerfCounter(Client25Req						, 89,	"Number of cycles client 25 sent a request to this TCC.")
ENUM_VALUE_TccPerfCounter(Client26Req						, 90,	"Number of cycles client 26 sent a request to this TCC.")
ENUM_VALUE_TccPerfCounter(Client27Req						, 91,	"Number of cycles client 27 sent a request to this TCC.")
ENUM_VALUE_TccPerfCounter(Client28Req						, 92,	"Number of cycles client 28 sent a request to this TCC.")
ENUM_VALUE_TccPerfCounter(Client29Req						, 93,	"Number of cycles client 29 sent a request to this TCC.")
ENUM_VALUE_TccPerfCounter(Client30Req						, 94,	"Number of cycles client 30 sent a request to this TCC.")
ENUM_VALUE_TccPerfCounter(Client31Req						, 95,	"Number of cycles client 31 sent a request to this TCC.")
ENUM_VALUE_TccPerfCounter(Client32Req						, 96,	"Number of cycles client 32 sent a request to this TCC.")
ENUM_VALUE_TccPerfCounter(Client33Req						, 97,	"Number of cycles client 33 sent a request to this TCC.")
ENUM_VALUE_TccPerfCounter(Client34Req						, 98,	"Number of cycles client 34 sent a request to this TCC.")
ENUM_VALUE_TccPerfCounter(Client35Req						, 99,	"Number of cycles client 35 sent a request to this TCC.")
ENUM_VALUE_TccPerfCounter(Client36Req						,100,	"Number of cycles client 36 sent a request to this TCC.")
ENUM_VALUE_TccPerfCounter(Client37Req						,101,	"Number of cycles client 37 sent a request to this TCC.")
ENUM_VALUE_TccPerfCounter(Client38Req						,102,	"Number of cycles client 38 sent a request to this TCC.")
ENUM_VALUE_TccPerfCounter(Client39Req						,103,	"Number of cycles client 39 sent a request to this TCC.")
ENUM_VALUE_TccPerfCounter(Client40Req						,104,	"Number of cycles client 40 sent a request to this TCC.")
ENUM_VALUE_TccPerfCounter(Client41Req						,105,	"Number of cycles client 41 sent a request to this TCC.")
ENUM_VALUE_TccPerfCounter(Client42Req						,106,	"Number of cycles client 42 sent a request to this TCC.")
ENUM_VALUE_TccPerfCounter(Client43Req						,107,	"Number of cycles client 43 sent a request to this TCC.")
ENUM_VALUE_TccPerfCounter(Client44Req						,108,	"Number of cycles client 44 sent a request to this TCC.")
ENUM_VALUE_TccPerfCounter(Client45Req						,109,	"Number of cycles client 45 sent a request to this TCC.")
ENUM_VALUE_TccPerfCounter(Client46Req						,110,	"Number of cycles client 46 sent a request to this TCC.")
ENUM_VALUE_TccPerfCounter(Client47Req						,111,	"Number of cycles client 47 sent a request to this TCC.")
ENUM_VALUE_TccPerfCounter(Client48Req						,112,	"Number of cycles client 48 sent a request to this TCC.")
ENUM_VALUE_TccPerfCounter(Client49Req						,113,	"Number of cycles client 49 sent a request to this TCC.")
ENUM_VALUE_TccPerfCounter(Client50Req						,114,	"Number of cycles client 50 sent a request to this TCC.")
ENUM_VALUE_TccPerfCounter(Client51Req						,115,	"Number of cycles client 51 sent a request to this TCC.")
ENUM_VALUE_TccPerfCounter(Client52Req						,116,	"Number of cycles client 52 sent a request to this TCC.")
ENUM_VALUE_TccPerfCounter(Client53Req						,117,	"Number of cycles client 53 sent a request to this TCC.")
ENUM_VALUE_TccPerfCounter(Client54Req						,118,	"Number of cycles client 54 sent a request to this TCC.")
ENUM_VALUE_TccPerfCounter(Client55Req						,119,	"Number of cycles client 55 sent a request to this TCC.")
ENUM_VALUE_TccPerfCounter(Client56Req						,120,	"Number of cycles client 56 sent a request to this TCC.")
ENUM_VALUE_TccPerfCounter(Client57Req						,121,	"Number of cycles client 57 sent a request to this TCC.")
ENUM_VALUE_TccPerfCounter(Client58Req						,122,	"Number of cycles client 58 sent a request to this TCC.")
ENUM_VALUE_TccPerfCounter(Client59Req						,123,	"Number of cycles client 59 sent a request to this TCC.")
ENUM_VALUE_TccPerfCounter(Client60Req						,124,	"Number of cycles client 60 sent a request to this TCC.")
ENUM_VALUE_TccPerfCounter(Client61Req						,125,	"Number of cycles client 61 sent a request to this TCC.")
ENUM_VALUE_TccPerfCounter(Client62Req						,126,	"Number of cycles client 62 sent a request to this TCC.")
ENUM_VALUE_TccPerfCounter(Client63Req						,127,	"Number of cycles client 63 sent a request to this TCC.")
ENUM_VALUE_TccPerfCounter(NormalWriteback					,128,	"Number of writebacks due to requests that are not writeback requests.")
ENUM_VALUE_TccPerfCounter(TcOpWbl2VolWriteback				,129,	"Number of writebacks due to TC_OP_WBL2_VOL requests.")
ENUM_VALUE_TccPerfCounter(TcOpWbinvl2Writeback				,130,	"Number of writebacks due to TC_OP_WBINVL2 requests.")
ENUM_VALUE_TccPerfCounter(AllTcOpWbWriteback				,131,	"Number of writebacks due to all TC_OP writeback requests.")
ENUM_VALUE_TccPerfCounter(NormalEvict						,132,	"Number of evicts due to requests that are not invalidate requests.")
ENUM_VALUE_TccPerfCounter(TcOpInvl2VolEvict					,133,	"Number of evicts due to TC_OP_INVL2_VOL requests.")
ENUM_VALUE_TccPerfCounter(TcOpInvl1L2VolEvict				,134,	"Number of evicts due to TC_OP_INVL1L2_VOL requests.")
ENUM_VALUE_TccPerfCounter(TcOpWbl2VolEvict					,135,	"Number of evicts due to TC_OP_WBL2_VOL requests.")
ENUM_VALUE_TccPerfCounter(TcOpWbinvl2Evict					,136,	"Number of evicts due to TC_OP_WBINVL2 requests.")
ENUM_VALUE_TccPerfCounter(AllTcOpInvEvict					,137,	"Number of evicts due to all TC_OP invalidate requests.")
ENUM_VALUE_TccPerfCounter(AllTcOpInvVolEvict				,138,	"Number of evicts due to all TC_OP volatile invalidate requests.")
ENUM_VALUE_TccPerfCounter(TcOpWbl2VolCycle					,139,	"Number of cycles spent performing TC_OP_WBL2_VOL requests.")
ENUM_VALUE_TccPerfCounter(TcOpInvl2VolCycle					,140,	"Number of cycles spent performing TC_OP_INVL2_VOL requests.")
ENUM_VALUE_TccPerfCounter(TcOpInvl1L2VolCycle				,141,	"Number of cycles spent performing TC_OP_INVL1L2_VOL requests.")
ENUM_VALUE_TccPerfCounter(TcOpWbinvl2Cycle					,142,	"Number of cycles spent performing TC_OP_WBINVL2 requests.")
ENUM_VALUE_TccPerfCounter(AllTcOpWbOrInvCycle				,143,	"Number of cycles spent performing all TC_OP writeback or invalidate requests.")
ENUM_VALUE_TccPerfCounter(AllTcOpWbOrInvVolCycle			,144,	"Number of cycles spent performing all TC_OP writeback or invalidate volatile requests.")
ENUM_VALUE_TccPerfCounter(TcOpWbl2VolStart					,145,	"Number of TC_OP_WBL2_VOL requests started.")
ENUM_VALUE_TccPerfCounter(TcOpInvl2VolStart					,146,	"Number of TC_OP_INVL2_VOL requests started.")
ENUM_VALUE_TccPerfCounter(TcOpInvl1L2VolStart				,147,	"Number of TC_OP_INVL1L2_VOL requests started.")
ENUM_VALUE_TccPerfCounter(TcOpWbinvl2Start					,148,	"Number of TC_OP_WBINVL2 requests started.")
ENUM_VALUE_TccPerfCounter(AllTcOpWbOrInvStart				,149,	"Number of TC_OP writeback or invalidate requests started.")
ENUM_VALUE_TccPerfCounter(AllTcOpWbOrInvVolStart			,150,	"Number of TC_OP writeback or invalidate volatile requests started.")
ENUM_VALUE_TccPerfCounter(TcOpWbl2VolFinish					,151,	"Number of TC_OP_WBL2_VOL requests finished.")
ENUM_VALUE_TccPerfCounter(TcOpInvl2VolFinish				,152,	"Number of TC_OP_INVL2_VOL requests finished.")
ENUM_VALUE_TccPerfCounter(TcOpInvl1L2VolFinish				,153,	"Number of TC_OP_INVL1L2_VOL requests finished.")
ENUM_VALUE_TccPerfCounter(TcOpWbinvl2Finish					,154,	"Number of TC_OP_WBINVL2 requests finished.")
ENUM_VALUE_TccPerfCounter(AllTcOpWbOrInvFinish				,155,	"Number of TC_OP writeback or invalidate requests finished.")
ENUM_VALUE_TccPerfCounter(AllTcOpWbOrInvVolFinish			,156,	"Number of TC_OP writeback or invalidate volatile requests finished.")
ENUM_VALUE_TccPerfCounter(VolMcWrreq						,157,	"Number of 32-byte writes due to volatile requests.")
ENUM_VALUE_TccPerfCounter(VolMcRdreq						,158,	"Number of 32-byte reads due to volatile requests.")
ENUM_VALUE_TccPerfCounter(VolReq							,159,	"Number of volatile requests.  WB or INV related requests are not included.")
ENUM_VALUE_TccPerfCounter(CompressedReq						,160,	"NEO ONLY; Number of compressed requests.  This includes requests that read 0 bytes of compressed data.  Metadata requests are not included.  This is measured at the tag block.")
ENUM_VALUE_TccPerfCounter(Compressed0Req					,161,	"NEO ONLY; Number of compressed requests that read 0 bytes of compressed data.  Metadata requests are not included.  This is measured at the tag block.")
ENUM_VALUE_TccPerfCounter(MetadataReq						,162,	"NEO ONLY; Number of metadata requests.  This is measured at the tag block.")
ENUM_VALUE_TccPerfCounter(McRdreqMdc						,163,	"NEO ONLY; Number of 32-byte reads due to MDC traffic.")
ENUM_VALUE_TccPerfCounter(McRdreqCompressed					,164,	"NEO ONLY; Number of 32-byte reads due to compressed data reads.  This does not include MDC traffic.")
ENUM_VALUE_TccPerfCounter(IbTagStall						,165,	"NEO ONLY; Number of cycles the IB output was stalled on the tag.")
ENUM_VALUE_TccPerfCounter(IbMdcStall						,166,	"NEO ONLY; Number of cycles the IB output was stalled on the mdc.")
ENUM_VALUE_TccPerfCounter(MdcReq							,167,	"NEO ONLY; Number of requests passed through the metadata cache.")
ENUM_VALUE_TccPerfCounter(MdcLevel							,168,	"NEO ONLY; The sum of the number of mdc requests in flight.  Average MDC latency=TCC_PERF_SEL_MDC_LEVEL/TCC_PERF_SEL_MDC_REQ.")
ENUM_VALUE_TccPerfCounter(MdcTagHit							,169,	"NEO ONLY; Number of MDC tag hits.  A tag contains multiple sectors, so many tag hits will be sector misses.")
ENUM_VALUE_TccPerfCounter(MdcSectorHit						,170,	"NEO ONLY; Number of MDC sector hits.  A sector hit means that there actually is data in the cache for this request.")
ENUM_VALUE_TccPerfCounter(MdcSectorMiss						,171,	"NEO ONLY; Number of MDC sector misses.")
ENUM_VALUE_TccPerfCounter(MdcTagStall						,172,	"NEO ONLY; Number of cycles that the mdc tag is stalled.")
ENUM_VALUE_TccPerfCounter(MdcTagReplacementLineInUseStall	,173,	"NEO ONLY; Number of cycles that the mdc tag is stalled because the line to be replaced is stalled.")
ENUM_VALUE_TccPerfCounter(MdcTagDesectorizationFifoFullStall,174,	"NEO ONLY; Number of cycles that the mdc tag is stalled because the desctorization fifo is full.")
ENUM_VALUE_TccPerfCounter(MdcTagWaitingForInvalidateCompletionStall,175,	"NEO ONLY; Number of cycles that the mdc tag is stalled because it is waiting for the previous invalidate to complete.")
ENUM_VALUE_TccPerfCounterVirtualized(Se0Cu0Req				,512,	"Number of cycles CU0 in SE0 sent a request to this TCC.")
ENUM_VALUE_TccPerfCounterVirtualized(Se0Cu1Req				,513,	"Number of cycles CU1 in SE0 sent a request to this TCC.")
ENUM_VALUE_TccPerfCounterVirtualized(Se0Cu2Req				,514,	"Number of cycles CU2 in SE0 sent a request to this TCC.")
ENUM_VALUE_TccPerfCounterVirtualized(Se0Cu3Req				,515,	"Number of cycles CU3 in SE0 sent a request to this TCC.")
ENUM_VALUE_TccPerfCounterVirtualized(Se0Cu4Req				,516,	"Number of cycles CU4 in SE0 sent a request to this TCC.")
ENUM_VALUE_TccPerfCounterVirtualized(Se0Cu5Req				,517,	"Number of cycles CU5 in SE0 sent a request to this TCC.")
ENUM_VALUE_TccPerfCounterVirtualized(Se0Cu6Req				,518,	"Number of cycles CU6 in SE0 sent a request to this TCC.")
ENUM_VALUE_TccPerfCounterVirtualized(Se0Cu7Req				,519,	"Number of cycles CU7 in SE0 sent a request to this TCC.")
ENUM_VALUE_TccPerfCounterVirtualized(Se0Cu8Req				,520,	"Number of cycles CU8 in SE0 sent a request to this TCC.")
ENUM_VALUE_TccPerfCounterVirtualized(Se1Cu0Req				,521,	"Number of cycles CU0 in SE1 sent a request to this TCC.")
ENUM_VALUE_TccPerfCounterVirtualized(Se1Cu1Req				,522,	"Number of cycles CU1 in SE1 sent a request to this TCC.")
ENUM_VALUE_TccPerfCounterVirtualized(Se1Cu2Req				,523,	"Number of cycles CU2 in SE1 sent a request to this TCC.")
ENUM_VALUE_TccPerfCounterVirtualized(Se1Cu3Req				,524,	"Number of cycles CU3 in SE1 sent a request to this TCC.")
ENUM_VALUE_TccPerfCounterVirtualized(Se1Cu4Req				,525,	"Number of cycles CU4 in SE1 sent a request to this TCC.")
ENUM_VALUE_TccPerfCounterVirtualized(Se1Cu5Req				,526,	"Number of cycles CU5 in SE1 sent a request to this TCC.")
ENUM_VALUE_TccPerfCounterVirtualized(Se1Cu6Req				,527,	"Number of cycles CU6 in SE1 sent a request to this TCC.")
ENUM_VALUE_TccPerfCounterVirtualized(Se1Cu7Req				,528,	"Number of cycles CU7 in SE1 sent a request to this TCC.")
ENUM_VALUE_TccPerfCounterVirtualized(Se1Cu8Req				,529,	"Number of cycles CU8 in SE1 sent a request to this TCC.")
ENUM_VALUE_TccPerfCounterVirtualized(Se2Cu0Req				,530,	"NEO ONLY; Number of cycles CU0 in SE2 sent a request to this TCC.")
ENUM_VALUE_TccPerfCounterVirtualized(Se2Cu1Req				,531,	"NEO ONLY; Number of cycles CU1 in SE2 sent a request to this TCC.")
ENUM_VALUE_TccPerfCounterVirtualized(Se2Cu2Req				,532,	"NEO ONLY; Number of cycles CU2 in SE2 sent a request to this TCC.")
ENUM_VALUE_TccPerfCounterVirtualized(Se2Cu3Req				,533,	"NEO ONLY; Number of cycles CU3 in SE2 sent a request to this TCC.")
ENUM_VALUE_TccPerfCounterVirtualized(Se2Cu4Req				,534,	"NEO ONLY; Number of cycles CU4 in SE2 sent a request to this TCC.")
ENUM_VALUE_TccPerfCounterVirtualized(Se2Cu5Req				,535,	"NEO ONLY; Number of cycles CU5 in SE2 sent a request to this TCC.")
ENUM_VALUE_TccPerfCounterVirtualized(Se2Cu6Req				,536,	"NEO ONLY; Number of cycles CU6 in SE2 sent a request to this TCC.")
ENUM_VALUE_TccPerfCounterVirtualized(Se2Cu7Req				,537,	"NEO ONLY; Number of cycles CU7 in SE2 sent a request to this TCC.")
ENUM_VALUE_TccPerfCounterVirtualized(Se2Cu8Req				,538,	"NEO ONLY; Number of cycles CU8 in SE2 sent a request to this TCC.")
ENUM_VALUE_TccPerfCounterVirtualized(Se3Cu0Req				,539,	"NEO ONLY; Number of cycles CU0 in SE3 sent a request to this TCC.")
ENUM_VALUE_TccPerfCounterVirtualized(Se3Cu1Req				,540,	"NEO ONLY; Number of cycles CU1 in SE3 sent a request to this TCC.")
ENUM_VALUE_TccPerfCounterVirtualized(Se3Cu2Req				,541,	"NEO ONLY; Number of cycles CU2 in SE3 sent a request to this TCC.")
ENUM_VALUE_TccPerfCounterVirtualized(Se3Cu3Req				,542,	"NEO ONLY; Number of cycles CU3 in SE3 sent a request to this TCC.")
ENUM_VALUE_TccPerfCounterVirtualized(Se3Cu4Req				,543,	"NEO ONLY; Number of cycles CU4 in SE3 sent a request to this TCC.")
ENUM_VALUE_TccPerfCounterVirtualized(Se3Cu5Req				,544,	"NEO ONLY; Number of cycles CU5 in SE3 sent a request to this TCC.")
ENUM_VALUE_TccPerfCounterVirtualized(Se3Cu6Req				,545,	"NEO ONLY; Number of cycles CU6 in SE3 sent a request to this TCC.")
ENUM_VALUE_TccPerfCounterVirtualized(Se3Cu7Req				,546,	"NEO ONLY; Number of cycles CU7 in SE3 sent a request to this TCC.")
ENUM_VALUE_TccPerfCounterVirtualized(Se3Cu8Req				,547,	"NEO ONLY; Number of cycles CU8 in SE3 sent a request to this TCC.")
ENUM_VALUE_TccPerfCounterVirtualized(Se0Sqc0Req				,548,	"Number of cycles SQC0 in SE0 sent a request to this TCC.")
ENUM_VALUE_TccPerfCounterVirtualized(Se0Sqc1Req				,549,	"Number of cycles SQC1 in SE0 sent a request to this TCC.")
ENUM_VALUE_TccPerfCounterVirtualized(Se0Sqc2Req				,550,	"Number of cycles SQC2 in SE0 sent a request to this TCC.")
ENUM_VALUE_TccPerfCounterVirtualized(Se1Sqc0Req				,551,	"Number of cycles SQC0 in SE1 sent a request to this TCC.")
ENUM_VALUE_TccPerfCounterVirtualized(Se1Sqc1Req				,552,	"Number of cycles SQC1 in SE1 sent a request to this TCC.")
ENUM_VALUE_TccPerfCounterVirtualized(Se1Sqc2Req				,553,	"Number of cycles SQC2 in SE1 sent a request to this TCC.")
ENUM_VALUE_TccPerfCounterVirtualized(Se2Sqc0Req				,554,	"NEO ONLY; Number of cycles SQC0 in SE2 sent a request to this TCC.")
ENUM_VALUE_TccPerfCounterVirtualized(Se2Sqc1Req				,555,	"NEO ONLY; Number of cycles SQC1 in SE2 sent a request to this TCC.")
ENUM_VALUE_TccPerfCounterVirtualized(Se2Sqc2Req				,556,	"NEO ONLY; Number of cycles SQC2 in SE2 sent a request to this TCC.")
ENUM_VALUE_TccPerfCounterVirtualized(Se3Sqc0Req				,557,	"NEO ONLY; Number of cycles SQC0 in SE3 sent a request to this TCC.")
ENUM_VALUE_TccPerfCounterVirtualized(Se3Sqc1Req				,558,	"NEO ONLY; Number of cycles SQC1 in SE3 sent a request to this TCC.")
ENUM_VALUE_TccPerfCounterVirtualized(Se3Sqc2Req				,559,	"NEO ONLY; Number of cycles SQC2 in SE3 sent a request to this TCC.")
ENUM_VALUE_TccPerfCounterVirtualized(CpgReq					,560,	"Number of cycles CPG sent a request to this TCC.")
ENUM_VALUE_TccPerfCounterVirtualized(CpfReq					,561,	"Number of cycles CPF sent a request to this TCC.")
ENUM_VALUE_TccPerfCounterVirtualized(WdReq					,562,	"Number of cycles WD sent a request to this TCC.")
ENUM_VALUE_TccPerfCounterVirtualized(Ia0Req					,563,	"Number of cycles IA0 sent a request to this TCC.")
ENUM_VALUE_TccPerfCounterVirtualized(Ia1Req					,564,	"NEO ONLY; Number of cycles IA1 sent a request to this TCC.")
ENUM_VALUE_TccPerfCounterVirtualized(Se0VgtReq				,565,	"Number of cycles VGT of SE0 sent a request to this TCC.")
ENUM_VALUE_TccPerfCounterVirtualized(Se1VgtReq				,566,	"Number of cycles VGT of SE1 sent a request to this TCC.")

#ifndef ENUM_VALUE_VgtPerfCounter
#define ENUM_VALUE_VgtPerfCounter(sym, val, desc_string)
#endif
ENUM_VALUE_VgtPerfCounter(VgtSpiEsthreadEventWindowActive	,  0,	"ES thread event window is active")
ENUM_VALUE_VgtPerfCounter(VgtSpiEsvertValid					,  1,	"ES Vert is valid")
ENUM_VALUE_VgtPerfCounter(VgtSpiEsvertEov					,  2,	"ES vert end of vector is active")
ENUM_VALUE_VgtPerfCounter(VgtSpiEsvertStalled				,  3,	"ES vert pipe is stalled")
ENUM_VALUE_VgtPerfCounter(VgtSpiEsvertStarvedBusy			,  4,	"ES vert pipe is starved busy")
ENUM_VALUE_VgtPerfCounter(VgtSpiEsvertStarvedIdle			,  5,	"ES vert pipe is starved idle")
ENUM_VALUE_VgtPerfCounter(VgtSpiEsvertStatic				,  6,	"ES vert pipe is static")
ENUM_VALUE_VgtPerfCounter(VgtSpiEsthreadIsEvent				,  7,	"ES Thread Event Indicator")
ENUM_VALUE_VgtPerfCounter(VgtSpiEsthreadSend				,  8,	"ES Thread Send is active")
ENUM_VALUE_VgtPerfCounter(VgtSpiGsprimValid					,  9,	"ES GS Primitive send is active")
ENUM_VALUE_VgtPerfCounter(VgtSpiGsprimEov					, 10,	"ES GS Primitive end of vector is active")
ENUM_VALUE_VgtPerfCounter(VgtSpiGsprimCont					, 11,	"ES GS Primitive Continued Event")
ENUM_VALUE_VgtPerfCounter(VgtSpiGsprimStalled				, 12,	"ES GS Primitive is stalled")
ENUM_VALUE_VgtPerfCounter(VgtSpiGsprimStarvedBusy			, 13,	"ES GS Primitive is starved busy")
ENUM_VALUE_VgtPerfCounter(VgtSpiGsprimStarvedIdle			, 14,	"ES GS Primitive is starved idle")
ENUM_VALUE_VgtPerfCounter(VgtSpiGsprimStatic				, 15,	"ES GS Primitive is static")
ENUM_VALUE_VgtPerfCounter(VgtSpiGsthreadEventWindowActive	, 16,	"GS Thread event window is active")
ENUM_VALUE_VgtPerfCounter(VgtSpiGsthreadIsEvent				, 17,	"GS Thread event is being processed")
ENUM_VALUE_VgtPerfCounter(VgtSpiGsthreadSend				, 18,	"GS Thread is being sent")
ENUM_VALUE_VgtPerfCounter(VgtSpiVsthreadEventWindowActive	, 19,	"VS Thread event window is active")
ENUM_VALUE_VgtPerfCounter(VgtSpiVsvertSend					, 20,	"Counts the vertices packed into wavefronts for VS stage shaders.")
ENUM_VALUE_VgtPerfCounter(VgtSpiVsvertEov					, 21,	"VS vert end of vector")
ENUM_VALUE_VgtPerfCounter(VgtSpiVsvertStalled				, 22,	"VS vert pipe is stalled")
ENUM_VALUE_VgtPerfCounter(VgtSpiVsvertStarvedBusy			, 23,	"VS vert pipe is starved busy")
ENUM_VALUE_VgtPerfCounter(VgtSpiVsvertStarvedIdle			, 24,	"VS vert pipe is starved idle")
ENUM_VALUE_VgtPerfCounter(VgtSpiVsvertStatic				, 25,	"VS vert pipe is static")
ENUM_VALUE_VgtPerfCounter(VgtSpiVsthreadIsEvent				, 26,	"VS Thread Event Indicator")
ENUM_VALUE_VgtPerfCounter(VgtSpiVsthreadSend				, 27,	"VS Thread is being sent")
ENUM_VALUE_VgtPerfCounter(VgtPaEventWindowActive			, 28,	"VGT to Primitive Assembler Event Window is active")
ENUM_VALUE_VgtPerfCounter(VgtPaClipvSend					, 29,	"VGT to Primitive Assembler clipv is being sent")
ENUM_VALUE_VgtPerfCounter(VgtPaClipvFirstvert				, 30,	"VGT to Primitive Assembler clipv is the first vert")
ENUM_VALUE_VgtPerfCounter(VgtPaClipvStalled					, 31,	"VGT to Primitive Assembler pipe is stalled")
ENUM_VALUE_VgtPerfCounter(VgtPaClipvStarvedBusy				, 32,	"VGT to Primitive Assembler pipe is starved_busy")
ENUM_VALUE_VgtPerfCounter(VgtPaClipvStarvedIdle				, 33,	"VGT to Primitive Assembler pipe is starved_idle")
ENUM_VALUE_VgtPerfCounter(VgtPaClipvStatic					, 34,	"VGT to Primitive Assembler pipe is static")
ENUM_VALUE_VgtPerfCounter(VgtPaClippSend					, 35,	"VGT to Primitive Assembler is being sent")
ENUM_VALUE_VgtPerfCounter(VgtPaClippEop						, 36,	"VGT to Primitive Assembler end of packet")
ENUM_VALUE_VgtPerfCounter(VgtPaClippIsEvent					, 37,	"VGT to Primitive Assembler event transition")
ENUM_VALUE_VgtPerfCounter(VgtPaClippNullPrim				, 38,	"VGT to Primitive Assembler null primitive is present")
ENUM_VALUE_VgtPerfCounter(VgtPaClippNewVtxVect				, 39,	"VGT to Primitive Assembler new vertex vector is present")
ENUM_VALUE_VgtPerfCounter(VgtPaClippStalled					, 40,	"VGT to Primitive Assembler pipe is stalled")
ENUM_VALUE_VgtPerfCounter(VgtPaClippStarvedBusy				, 41,	"VGT to Primitive Assembler pipe is starved_busy")
ENUM_VALUE_VgtPerfCounter(VgtPaClippStarvedIdle				, 42,	"VGT to Primitive Assembler pipe is starved_idle")
ENUM_VALUE_VgtPerfCounter(VgtPaClippStatic					, 43,	"VGT to Primitive Assembler pipe is static")
ENUM_VALUE_VgtPerfCounter(VgtPaClipsSend					, 44,	"VGT to Primitive Assembler is being sent")
ENUM_VALUE_VgtPerfCounter(VgtPaClipsStalled					, 45,	"VGT to Primitive Assembler pipe is stalled")
ENUM_VALUE_VgtPerfCounter(VgtPaClipsStarvedBusy				, 46,	"VGT to Primitive Assembler pipe is starved_busy")
ENUM_VALUE_VgtPerfCounter(VgtPaClipsStarvedIdle				, 47,	"VGT to Primitive Assembler pipe is starved_idle")
ENUM_VALUE_VgtPerfCounter(VgtPaClipsStatic					, 48,	"VGT to Primitive Assembler pipe is static")
ENUM_VALUE_VgtPerfCounter(VsvertDsSend						, 49,	"DS vert send across vsvert interface")
ENUM_VALUE_VgtPerfCounter(VsvertApiSend						, 50,	"API VS vert send across vsvert interface")
ENUM_VALUE_VgtPerfCounter(HsTifStall						, 51,	"TE11 Input FIFO stall")
ENUM_VALUE_VgtPerfCounter(HsInputStall						, 52,	"HS Input FIFO stall")
ENUM_VALUE_VgtPerfCounter(HsInterfaceStall					, 53,	"HS Interface (hsvert and hswave) stall")
ENUM_VALUE_VgtPerfCounter(HsTfmStall						, 54,	"HS TF Memory stall")
ENUM_VALUE_VgtPerfCounter(Te11Starved						, 55,	"TE11 starved (waiting for tess factors)")
ENUM_VALUE_VgtPerfCounter(GsEventStall						, 56,	"GS event stalled due to full GS Event FIFO")
ENUM_VALUE_VgtPerfCounter(VgtBusy							, 64,	"Number of cycles when the VGT is busy.")
ENUM_VALUE_VgtPerfCounter(VgtGsBusy							, 65,	"Number of cycles when the VGT GS block is busy.")
ENUM_VALUE_VgtPerfCounter(EsvertStalledEsTbl				, 66,	"esvert transfers are stalled because of ES table being full")
ENUM_VALUE_VgtPerfCounter(EsvertStalledGsTbl				, 67,	"esvert transfers are stalled because of GS table being full")
ENUM_VALUE_VgtPerfCounter(EsvertStalledGsEvent				, 68,	"esvert transfers are stalled because of events")
ENUM_VALUE_VgtPerfCounter(EsvertStalledGsprim				, 69,	"esvert transfers are stalled because of GS prim interface is full")
ENUM_VALUE_VgtPerfCounter(GsprimStalledEsTbl				, 70,	"gsprim transfers are stalled because of ES table being full")
ENUM_VALUE_VgtPerfCounter(GsprimStalledGsTbl				, 71,	"gsprim transfers are stalled because of GS table being full")
ENUM_VALUE_VgtPerfCounter(GsprimStalledGsEvent				, 72,	"gsprim transfers are stalled because of events")
ENUM_VALUE_VgtPerfCounter(GsprimStalledEsvert				, 73,	"gsprim transfers are stalled because of ES vert interface is full")
ENUM_VALUE_VgtPerfCounter(EsthreadStalledEsRbFull			, 74,	"ES thread sends are stalled because the ES ring buffer is full")
ENUM_VALUE_VgtPerfCounter(EsthreadStalledSpiBp				, 75,	"ES thread is stalled due to back pressure from the SPI")
ENUM_VALUE_VgtPerfCounter(CountersAvailStalled				, 76,	"GS thread send is stalled because no counters are available")
ENUM_VALUE_VgtPerfCounter(GsRbSpaceAvailStalled				, 77,	"GS thread send is stalled because the GS/VS ring buffer is full")
ENUM_VALUE_VgtPerfCounter(GsIssueRtrStalled					, 78,	"GS thread send is stalled due to something other than the counters or ring buffer being full")
ENUM_VALUE_VgtPerfCounter(GsthreadStalled					, 79,	"GS thread send is stalled.  Inclusive of the 3 counters above.")
ENUM_VALUE_VgtPerfCounter(StrmoutStalled					, 80,	"Number of cycles vs waves are stalled by a streamout sync.")
ENUM_VALUE_VgtPerfCounter(WaitForEsDoneStalled				, 81,	"GS thread SM is ready to move to the next stage as soon as the ES thread finishes")
ENUM_VALUE_VgtPerfCounter(CmStalledByGog					, 82,	"the output fifo to the GOG is full and the CM wants to send data")
ENUM_VALUE_VgtPerfCounter(CmReadingStalled					, 83,	"the GOG can accept data and the CM should be sending data, but isn't")
ENUM_VALUE_VgtPerfCounter(CmStalledByGsfetchDone			, 84,	"all CM state machines are waiting for gsfetch_done")
ENUM_VALUE_VgtPerfCounter(GogVsTblStalled					, 85,	"GOG is stalled because the VS table is full")
ENUM_VALUE_VgtPerfCounter(GogOutIndxStalled					, 86,	"GOG is stalled by back pressure from the output block")
ENUM_VALUE_VgtPerfCounter(GogOutPrimStalled					, 87,	"GOG is stalled by back pressure from the output block")
ENUM_VALUE_VgtPerfCounter(WaveidStalled						, 88,	"Number of cycles vs waves are stalled waiting for a eop/eopg sync during the draw part of DispatchDraw.")
ENUM_VALUE_VgtPerfCounter(GogBusy							, 89,	"Counts number of cycles that the GOG block is busy")
ENUM_VALUE_VgtPerfCounter(ReusedVsIndices					, 90,	"Counts the number of reused indices in pipelines without geometry or tessellation.")
ENUM_VALUE_VgtPerfCounter(SclkRegVldEvent					, 91,	"Counts number of cycles sclk_reg is valid")
ENUM_VALUE_VgtPerfCounter(SclkCoreVldEvent					, 93,	"Counts number of cycles sclk_core is valid")
ENUM_VALUE_VgtPerfCounter(SclkGsVldEvent					, 95,	"Counts number of cycles sclk_gs is valid")
ENUM_VALUE_VgtPerfCounter(VgtSpiLsvertValid					, 96,	"LS Vert is valid.  Sensitive to PERF_SEID_IGNORE_MASK")
ENUM_VALUE_VgtPerfCounter(VgtSpiLsvertEov					, 97,	"LS vert end of vector is active.  Sensitive to PERF_SEID_IGNORE_MASK")
ENUM_VALUE_VgtPerfCounter(VgtSpiLsvertStalled				, 98,	"LS vert pipe is stalled.  Sensitive to PERF_SEID_IGNORE_MASK")
ENUM_VALUE_VgtPerfCounter(VgtSpiLsvertStarvedBusy			, 99,	"LS vert pipe is starved busy.  Sensitive to PERF_SEID_IGNORE_MASK")
ENUM_VALUE_VgtPerfCounter(VgtSpiLsvertStarvedIdle			,100,	"LS vert pipe is starved idle.  Sensitive to PERF_SEID_IGNORE_MASK")
ENUM_VALUE_VgtPerfCounter(VgtSpiLsvertStatic				,101,	"LS vert pipe is static.  Sensitive to PERF_SEID_IGNORE_MASK")
ENUM_VALUE_VgtPerfCounter(VgtSpiLswaveEventWindowActive		,102,	"LS WAVE Event window is active.  Sensitive to PERF_SEID_IGNORE_MASK")
ENUM_VALUE_VgtPerfCounter(VgtSpiLswaveIsEvent				,103,	"LS Wave Event Indicator.  Sensitive to PERF_SEID_IGNORE_MASK")
ENUM_VALUE_VgtPerfCounter(VgtSpiLswaveSend					,104,	"LS Wave Send is active.  Sensitive to PERF_SEID_IGNORE_MASK")
ENUM_VALUE_VgtPerfCounter(VgtSpiHsvertValid					,105,	"HS Vert is valid.  Sensitive to PERF_SEID_IGNORE_MASK")
ENUM_VALUE_VgtPerfCounter(VgtSpiHsvertEov					,106,	"HS vert end of vector is active.  Sensitive to PERF_SEID_IGNORE_MASK")
ENUM_VALUE_VgtPerfCounter(VgtSpiHsvertStalled				,107,	"HS vert pipe is stalled.  Sensitive to PERF_SEID_IGNORE_MASK")
ENUM_VALUE_VgtPerfCounter(VgtSpiHsvertStarvedBusy			,108,	"HS vert pipe is starved busy.  Sensitive to PERF_SEID_IGNORE_MASK")
ENUM_VALUE_VgtPerfCounter(VgtSpiHsvertStarvedIdle			,109,	"HS vert pipe is starved idle.  Sensitive to PERF_SEID_IGNORE_MASK")
ENUM_VALUE_VgtPerfCounter(VgtSpiHsvertStatic				,110,	"HS vert pipe is static.  Sensitive to PERF_SEID_IGNORE_MASK")
ENUM_VALUE_VgtPerfCounter(VgtSpiHswaveEventWindowActive		,111,	"HS WAVE Event window is active.  Sensitive to PERF_SEID_IGNORE_MASK")
ENUM_VALUE_VgtPerfCounter(VgtSpiHswaveIsEvent				,112,	"HS Wave Event Indicator.  Sensitive to PERF_SEID_IGNORE_MASK")
ENUM_VALUE_VgtPerfCounter(VgtSpiHswaveSend					,113,	"HS Wave Send is active.  Sensitive to PERF_SEID_IGNORE_MASK")
ENUM_VALUE_VgtPerfCounter(NullTessPatches					,115,	"Count of patches determined to be null due to tessellation factors of negative, 0 or NAN")
ENUM_VALUE_VgtPerfCounter(LsThreadGroups					,116,	"Count of thread groups issued to the LS.  Sensitive to PERF_SEID_IGNORE_MASK")
ENUM_VALUE_VgtPerfCounter(HsThreadGroups					,117,	"Count of thread groups issued to the HS.  Sensitive to PERF_SEID_IGNORE_MASK")
ENUM_VALUE_VgtPerfCounter(EsThreadGroups					,118,	"Count of thread groups issued to the ES (these are Domain Shader Threadgroups).  Sensitive to PERF_SEID_IGNORE_MASK")
ENUM_VALUE_VgtPerfCounter(VsThreadGroups					,119,	"Count of thread groups issued to the VS (these are Domain Shader Threadgroups).  Sensitive to PERF_SEID_IGNORE_MASK")
ENUM_VALUE_VgtPerfCounter(LsDoneLatency						,120,	"Total latency LS FLUSHES issued to the SX DONES received.  Divide by LS FLUSHES issued for average latency.  Sensitive to PERF_SEID_IGNORE_MASK")
ENUM_VALUE_VgtPerfCounter(HsDoneLatency						,121,	"Total latency HS FLUSHES issued to the SX DONES received.  Divide by HS FLUSHES issued for average latency.  Sensitive to PERF_SEID_IGNORE_MASK")
ENUM_VALUE_VgtPerfCounter(EsDoneLatency						,122,	"Total latency ES FLUSHES issued to the SX DONES received.  Divide by ES FLUSHES issued for average latency.  Sensitive to PERF_SEID_IGNORE_MASK")
ENUM_VALUE_VgtPerfCounter(GsDoneLatency						,123,	"Total latency GS FLUSHES issued to the SX DONES received.  Divide by GS FLUSHES issued for average latency.  Sensitive to PERF_SEID_IGNORE_MASK")
ENUM_VALUE_VgtPerfCounter(VgtHsBusy							,124,	"Counts number of cycles the HS block is busy (creates CS/LS and HS work)")
ENUM_VALUE_VgtPerfCounter(VgtTe11Busy						,125,	"Counts number of cycles the TE11 block is busy. (DX11 Tessellation Fixed Function Logic)")
ENUM_VALUE_VgtPerfCounter(LsFlush							,126,	"Counts number of LS FLUSH events issues by the VGT.  Sensitive to PERF_SEID_IGNORE_MASK")
ENUM_VALUE_VgtPerfCounter(HsFlush							,127,	"Counts number of HS FLUSH events issues by the VGT.  Sensitive to PERF_SEID_IGNORE_MASK")
ENUM_VALUE_VgtPerfCounter(EsFlush							,128,	"Counts number of ES FLUSH events issues by the VGT.  Sensitive to PERF_SEID_IGNORE_MASK")
ENUM_VALUE_VgtPerfCounter(GsFlush							,129,	"Counts number of GS FLUSH events issues by the VGT.  Sensitive to PERF_SEID_IGNORE_MASK")
ENUM_VALUE_VgtPerfCounter(LsDone							,130,	"Counts number of SX LS DONES received by the VGT.  Sensitive to PERF_SEID_IGNORE_MASK")
ENUM_VALUE_VgtPerfCounter(HsDone							,131,	"Counts number of SX HS DONES received by the VGT.  Sensitive to PERF_SEID_IGNORE_MASK")
ENUM_VALUE_VgtPerfCounter(EsDone							,132,	"Counts number of SX ES DONES received by the VGT.  Sensitive to PERF_SEID_IGNORE_MASK")
ENUM_VALUE_VgtPerfCounter(GsDone							,133,	"Counts number of SX GS DONES received by the VGT.  Sensitive to PERF_SEID_IGNORE_MASK")
ENUM_VALUE_VgtPerfCounter(VsfetchDone						,134,	"Counts number of SH VSFETCH DONES received by the VGT.  Sensitive to PERF_SEID_IGNORE_MASK")
ENUM_VALUE_VgtPerfCounter(EsRingHighWaterMark				,136,	"Records the maximum number of ES waves outstanding in the ES ring. Counter select must be set to kPerfmonCounterModeMax.")
ENUM_VALUE_VgtPerfCounter(GsRingHighWaterMark				,137,	"Records the maximum number of GS waves outstanding in the GS ring. Counter select must be set to kPerfmonCounterModeMax.")
ENUM_VALUE_VgtPerfCounter(VsTableHighWaterMark				,138,	"Records the maximum number of VS waves outstanding in the VS table. Counter select must be set to kPerfmonCounterModeMax.")
ENUM_VALUE_VgtPerfCounter(HsTgsActiveHighWaterMark			,139,	"Records the maximum number of active HS thread groups. Counter select must be set to kPerfmonCounterModeMax.")

#ifndef ENUM_VALUE_PaSuPerfCounter
#define ENUM_VALUE_PaSuPerfCounter(sym, val, desc_string)
#endif
ENUM_VALUE_PaSuPerfCounter(PasxReq						,  0,	"Number of PA->SX requests; increment rate-one per clock (each req leads to 4 cycles of data from SX); range-1/clk, it does not indicate bad performance; it cannot be used to locate bottlenecks; all instances report the same result; can be combined with PasxFirstVector, PasxSecondVector, PasxVtxKillDiscard, PasxVtxNanDiscard, PasxFirstDead, PasxSecondDead")
ENUM_VALUE_PaSuPerfCounter(PasxDisablePipe				,  1,	"Number of transfers lost due to disabled pipe; increment rate-one per clock; range-1/clk; does not indicate bad performance; cannot be used for bottleneck location; all instances report the same result; no combinations")
ENUM_VALUE_PaSuPerfCounter(PasxFirstVector				,  2,	"Number of First Vectors from SX to PA; increment rate-one per clock; range-1/clk; it does not indicate bad performance; no bottleneck detection; all instances report the same result; no combinations")
ENUM_VALUE_PaSuPerfCounter(PasxSecondVector				,  3,	"Number of Second Vectors from SX to PA; increment rate-one per clock; range-1/clk; it does not indicate bad performance; no bottleneck detection; all instances report the same result; no combinations")
ENUM_VALUE_PaSuPerfCounter(PasxFirstDead				,  4,	"Number of Unused First Vectors (due to granularity of 4); increment rate-one per clock; range-1/clk; it does not indicate bad performance; no bottleneck detection; all instances report the same result; no combinations")
ENUM_VALUE_PaSuPerfCounter(PasxSecondDead				,  5,	"Number of Unused Second Vectors (due to granularity of 4); increment rate-one per clock; range-1/clk; it does not indicate bad performance; no bottleneck detection; all instances report the same result; no combinations")
ENUM_VALUE_PaSuPerfCounter(PasxVtxKillDiscard			,  6,	"Number of vertices which have vertex kill enabled and set. The increment rate is one per clock; the range is one per clock. This value does not indicate bad performance; no bottleneck detection, all instances report the same result, no combinations.")
ENUM_VALUE_PaSuPerfCounter(PasxVtxNanDiscard			,  7,	"Number of vertices which have NaN positions and corresponding NaN discard. The increment rate is one per clock; the range is one per clock. It does not indicate bad performance; no bottleneck detection, all instances report the same result, no combinations.")
ENUM_VALUE_PaSuPerfCounter(PaInputPrim					,  8,	"Number of primitives input to PA. The increment rate is one per clock; the range is one per clock. It does not indicate bad performance; no bottleneck detection, all instances report the same result, no combinations.")
ENUM_VALUE_PaSuPerfCounter(PaInputNullPrim				,  9,	"Number of Null primitives input to PA. The increment rate is one per clock; the range is one per clock. It does not indicate bad performance; no bottleneck detection, all instances report the same result. This value can be combined with kPaSuPerfCounterPaInputPrim.")
ENUM_VALUE_PaSuPerfCounter(PaInputEventFlag				, 10,	"Number of Events input to PA; increment rate-one per clock; range-1/clk; it does not indicate bad performance; no bottleneck detection; all instances report the same result; no combinations")
ENUM_VALUE_PaSuPerfCounter(PaInputFirstPrimSlot			, 11,	"Number of First-Prim-Of-Slots input to PA; increment rate-one per clock; range-1/clk; it does not indicate bad performance; no bottleneck detection; all instances report the same result; no combinations")
ENUM_VALUE_PaSuPerfCounter(PaInputEndOfPacket			, 12,	"Number of End-Of-Packets input to PA; increment rate-one per clock; range-1/clk; it does not indicate bad performance; no bottleneck detection; all instances report the same result; no combinations")
ENUM_VALUE_PaSuPerfCounter(PaInputExtendedEvent			, 13,	"Number of Extended Events input to PA; increment rate-one per clock; range-1/clk; it does not indicate bad performance; no bottleneck detection; all instances report the same result; combined with PaInputEventFlag")
ENUM_VALUE_PaSuPerfCounter(ClprCullPrim					, 14,	"Number of primitives culled by the clipper based on view frustum plane tests, user clip plane tests, vertex kill flags, or vertex NaN discard. The increment rate is one per clock; the range is one per clock. It does not indicate bad performance; no bottleneck detection, all instances report the same result.")
ENUM_VALUE_PaSuPerfCounter(ClprVvucpCullPrim			, 15,	"Number of primitives culled by the clipper based on view frustum plane tests or user clip plane tests. The increment rate is one per clock; the range is one per clock. It does not indicate bad performance; no bottleneck detection, all instances report the same result, no combinations.")
ENUM_VALUE_PaSuPerfCounter(ClprVvCullPrim				, 16,	"Number of primitives culled by the clipper based on view frustum plane tests. The increment rate is one per clock; the range is one per clock. It does not indicate bad performance; no bottleneck detection, all instances report the same result, no combinations.")
ENUM_VALUE_PaSuPerfCounter(ClprUcpCullPrim				, 17,	"Number of primitives culled by the clipper based on user clip plane tests. The increment rate is one per clock; the range is one per clock. It does not indicate bad performance; no bottleneck detection, all instances report the same result, no combinations.")
ENUM_VALUE_PaSuPerfCounter(ClprVtxKillCullPrim			, 18,	"Number of primitives culled by the clipper based on vertex kill flags. The increment rate is one per clock; the range is one per clock. It does not indicate bad performance; no bottleneck detection, all instances report the same result, no combinations.")
ENUM_VALUE_PaSuPerfCounter(ClprVtxNanCullPrim			, 19,	"Number of primitives culled by the clipper based on vertex NaN discard. The increment rate is one per clock; the range is one per clock. It does not indicate bad performance; no bottleneck detection, all instances report the same result, no combinations.")
ENUM_VALUE_PaSuPerfCounter(ClprCullToNullPrim			, 20,	"Number of clipper culled primitives retained to carry pipe info such as events. The increment rate is one per clock; the range is one per clock. It does not indicate bad performance; no bottleneck detection, all instances report the same result, no combinations.")
ENUM_VALUE_PaSuPerfCounter(ClprVvucpClipPrim			, 21,	"Number of primitives clipped by the clipper against view frustum planes and/or user clip planes. The increment rate is one per clock; the range is one per clock. It does not indicate bad performance; no bottleneck detection, all instances report the same result, no combinations.")
ENUM_VALUE_PaSuPerfCounter(ClprVvClipPrim				, 22,	"Number of primitives clipped by the clipper against view frustum planes. The increment rate is one per clock; the range is one per clock. It does not indicate bad performance; no bottleneck detection, all instances report the same result, no combinations.")
ENUM_VALUE_PaSuPerfCounter(ClprUcpClipPrim				, 23,	"Number of primitives clipped by the clipper against user clip planes. The increment rate is one per clock; the range is one per clock. It does not indicate bad performance; no bottleneck detection, all instances report the same result, no combinations.")
ENUM_VALUE_PaSuPerfCounter(ClprPointClipCandidate		, 24,	"Number of point primitives that required detailed clip checking. The increment rate is one per clock; the range is one per clock. It does not indicate bad performance; no bottleneck detection, all instances report the same result, no combinations.")
ENUM_VALUE_PaSuPerfCounter(ClprClipPlaneCnt1			, 25,	"Number of primitives with 1 clip plane intersection (view frustum or user clip planes). The increment rate is one per clock; the range is one per clock. It does not indicate bad performance; no bottleneck detection, all instances report the same result. This value can be combined with kPaSuPerfCounterClprPointClipCandidate.")
ENUM_VALUE_PaSuPerfCounter(ClprClipPlaneCnt2			, 26,	"Number of primitives with 2 clip plane intersections (view frustum or user clip planes). The increment rate is one per clock; the range is one per clock. It does not indicate bad performance; no bottleneck detection, all instances report the same result. This value can be combined with kPaSuPerfCounterClprPointClipCandidate.")
ENUM_VALUE_PaSuPerfCounter(ClprClipPlaneCnt3			, 27,	"Number of primitives with 3 clip plane intersections (view frustum or user clip planes). The increment rate is one per clock; the range is one per clock. It does not indicate bad performance; no bottleneck detection, all instances report the same result. This value can be combined with kPaSuPerfCounterClprPointClipCandidate.")
ENUM_VALUE_PaSuPerfCounter(ClprClipPlaneCnt4			, 28,	"Number of primitives with 4 clip plane intersections (view frustum or user clip planes). The increment rate is one per clock; the range is one per clock. It does not indicate bad performance; no bottleneck detection, all instances report the same result. This value can be combined with kPaSuPerfCounterClprPointClipCandidate.")
ENUM_VALUE_PaSuPerfCounter(ClprClipPlaneCnt5_8			, 29,	"Number of primitives with 5 to 8 clip plane intersections (view frustum or user clip planes). The increment rate is one per clock; the range is one per clock. It does not indicate bad performance; no bottleneck detection, all instances report the same result. This value can be combined with kPaSuPerfCounterClprPointClipCandidate.")
ENUM_VALUE_PaSuPerfCounter(ClprClipPlaneCnt9_12			, 30,	"Number of primitives with 9 to 12 clip plane intersections (view frustum or user clip planes). The increment rate is one per clock; the range is one per clock. It does not indicate bad performance; no bottleneck detection, all instances report the same result. This value can be combined with kPaSuPerfCounterClprPointClipCandidate.")
ENUM_VALUE_PaSuPerfCounter(ClprClipPlaneNear			, 31,	"Number of primitives which intersected the NEAR   view frustum plane. The increment rate is one per clock; the range is one per clock. It does not indicate bad performance; no bottleneck detection, all instances report the same result. This value can be combined with kPaSuPerfCounterClprPointClipCandidate.")
ENUM_VALUE_PaSuPerfCounter(ClprClipPlaneFar				, 32,	"Number of primitives which intersected the FAR    view frustum plane. The increment rate is one per clock; the range is one per clock. It does not indicate bad performance; no bottleneck detection, all instances report the same result. This value can be combined with kPaSuPerfCounterClprPointClipCandidate.")
ENUM_VALUE_PaSuPerfCounter(ClprClipPlaneLeft			, 33,	"Number of primitives which intersected the LEFT   view frustum plane. The increment rate is one per clock; the range is one per clock. It does not indicate bad performance; no bottleneck detection, all instances report the same result. This value can be combined with kPaSuPerfCounterClprPointClipCandidate.")
ENUM_VALUE_PaSuPerfCounter(ClprClipPlaneRight			, 34,	"Number of primitives which intersected the RIGHT  view frustum plane. The increment rate is one per clock; the range is one per clock. It does not indicate bad performance; no bottleneck detection, all instances report the same result. This value can be combined with kPaSuPerfCounterClprPointClipCandidate.")
ENUM_VALUE_PaSuPerfCounter(ClprClipPlaneTop				, 35,	"Number of primitives which intersected the TOP    view frustum plane. The increment rate is one per clock; the range is one per clock. It does not indicate bad performance; no bottleneck detection, all instances report the same result. This value can be combined with kPaSuPerfCounterClprPointClipCandidate.")
ENUM_VALUE_PaSuPerfCounter(ClprClipPlaneBottom			, 36,	"Number of primitives which intersected the BOTTOM view frustum plane. The increment rate is one per clock; the range is one per clock. It does not indicate bad performance; no bottleneck detection, all instances report the same result. This value can be combined with kPaSuPerfCounterClprPointClipCandidate.")
ENUM_VALUE_PaSuPerfCounter(ClprGscKillCullPrim			, 37,	"Number of Prims Culled by Clipper for Geometry Shader Scenario C Cuts; increment rate-one per clock; range-1/clk; it does not indicate bad performance; no bottleneck detection; all instances report the same result; no combinations")
ENUM_VALUE_PaSuPerfCounter(ClprRasterKillCullPrim		, 38,	"Number of Prims Culled by Clipper for DX10 Rasterization Kill (null PS); increment rate-one per clock; range-1/clk; it does not indicate bad performance; no bottleneck detection; all instances report the same result; no combinations")
ENUM_VALUE_PaSuPerfCounter(ClsmNullPrim					, 39,	"Number of null primitives at Clip State Machine pipe stage. The increment rate is one per clock; the range is one per clock. It does not indicate bad performance; no bottleneck detection, all instances report the same result, no combinations.")
ENUM_VALUE_PaSuPerfCounter(ClsmTotallyVisiblePrim		, 40,	"Number of totally visible (unculled and unclipped) primitives. The increment rate is one per clock; the range is one per clock. It does not indicate bad performance; no bottleneck detection, all instances report the same result.")
ENUM_VALUE_PaSuPerfCounter(ClsmCullToNullPrim			, 41,	"Number of primitives that were culled during the clip process. The increment rate is one per clock; the range is one per clock. It does not indicate bad performance; no bottleneck detection, all instances report the same result, no combinations.")
ENUM_VALUE_PaSuPerfCounter(ClsmOutPrimCnt1				, 42,	"Number of primitives that were clipped and resulted in 1 output primitive. The increment rate is one per clock; the range is one per clock. It does not indicate bad performance; no bottleneck detection, all instances report the same result, no combinations.")
ENUM_VALUE_PaSuPerfCounter(ClsmOutPrimCnt2				, 43,	"Number of primitives that were clipped and resulted in 2 output primitives. The increment rate is one per clock; the range is one per clock. It does not indicate bad performance; no bottleneck detection, all instances report the same result, no combinations.")
ENUM_VALUE_PaSuPerfCounter(ClsmOutPrimCnt3				, 44,	"Number of primitives that were clipped and resulted in 3 output primitives. The increment rate is one per clock; the range is one per clock. It does not indicate bad performance; no bottleneck detection, all instances report the same result, no combinations.")
ENUM_VALUE_PaSuPerfCounter(ClsmOutPrimCnt4				, 45,	"Number of primitives that were clipped and resulted in 4 output primitives. The increment rate is one per clock; the range is one per clock. It does not indicate bad performance; no bottleneck detection, all instances report the same result, no combinations.")
ENUM_VALUE_PaSuPerfCounter(ClsmOutPrimCnt5_8			, 46,	"Number of primitives that were clipped and resulted in 5 to 8 output primitives. The increment rate is one per clock; the range is one per clock. It does not indicate bad performance; no bottleneck detection, all instances report the same result, no combinations.")
ENUM_VALUE_PaSuPerfCounter(ClsmOutPrimCnt9_13			, 47,	"Number of primitives that were clipped and resulted in 9 to 13 output primitives. The increment rate is one per clock; the range is one per clock. It does not indicate bad performance; no bottleneck detection, all instances report the same result, no combinations.")
ENUM_VALUE_PaSuPerfCounter(ClipgaVteKillPrim			, 48,	"Number of primitives which are culled by VTE nan/inf logic; increment rate-one per clock; range-1/clk; it does not indicate bad performance; no bottleneck detection; all instances report the same result; no combinations")
ENUM_VALUE_PaSuPerfCounter(SuInputPrim					, 49,	"Number of primitives input to the setup block. The increment rate is one per clock; the range is one per clock. It does not indicate bad performance; no bottleneck detection, all instances report the same result, no combinations.")
ENUM_VALUE_PaSuPerfCounter(SuInputClipPrim				, 50,	"Number of clipped primitives input to the setup block. The increment rate is one per clock; the range is one per clock. It does not indicate bad performance; no bottleneck detection, all instances report the same result, no combinations.")
ENUM_VALUE_PaSuPerfCounter(SuInputNullPrim				, 51,	"Number of null primitives input to the setup block. The increment rate is one per clock; the range is one per clock. It does not indicate bad performance; no bottleneck detection, all instances report the same result, no combinations.")
ENUM_VALUE_PaSuPerfCounter(SuInputPrimDual				, 52,	"Number of dual gradient primitives input to the Setup block; increment rate-one per clock; range-1/clk; it does not indicate bad performance; no bottleneck detection; all instances report the same result; no combinations")
ENUM_VALUE_PaSuPerfCounter(SuInputClipPrimDual			, 53,	"Number of dual gradient clipped primitives input to the Setup block; increment rate-one per clock; range-1/clk; it does not indicate bad performance; no bottleneck detection; all instances report the same result; no combinations")
ENUM_VALUE_PaSuPerfCounter(SuZeroAreaCullPrim			, 54,	"Number of primitives culled due to zero area. The increment rate is one per clock; the range is one per clock. It does not indicate bad performance; no bottleneck detection, all instances report the same result, no combinations.")
ENUM_VALUE_PaSuPerfCounter(SuBackFaceCullPrim			, 55,	"Number of back-face primitives culled due to facedness. The increment rate is one per clock; the range is one per clock. It does not indicate bad performance; no bottleneck detection, all instances report the same result, no combinations.")
ENUM_VALUE_PaSuPerfCounter(SuFrontFaceCullPrim			, 56,	"Number of front-face primitives culled due to facedness. The increment rate is one per clock; the range is one per clock. It does not indicate bad performance; no bottleneck detection, all instances report the same result, no combinations.")
ENUM_VALUE_PaSuPerfCounter(SuPolymodeFaceCull			, 57,	"Number of polymode cull-determination primitives culled; increment rate-one per clock; range-1/clk; it does not indicate bad performance; no bottleneck detection; all instances report the same result; no combinations")
ENUM_VALUE_PaSuPerfCounter(SuPolymodeBackCull			, 58,	"Number of polymode primitives discarded due to Back-Face Cull; increment rate-one per clock; range-1/clk; it does not indicate bad performance; no bottleneck detection; all instances report the same result; no combinations")
ENUM_VALUE_PaSuPerfCounter(SuPolymodeFrontCull			, 59,	"Number of polymode primitives discarded due to Front-Face Cull; increment rate-one per clock; range-1/clk; it does not indicate bad performance; no bottleneck detection; all instances report the same result; no combinations")
ENUM_VALUE_PaSuPerfCounter(SuPolymodeInvalidFill		, 60,	"Number of polymode lines and/or points which are culled because they are an internal edge or point; increment rate-one per clock; range-1/clk; it does not indicate bad performance; no bottleneck detection; all instances report the same result; no combinations")
ENUM_VALUE_PaSuPerfCounter(SuOutputPrim					, 61,	"Number of primitives output from the setup block. The increment rate is one per clock; the range is one per clock. It does not indicate bad performance; no bottleneck detection, all instances report the same result, no combinations.")
ENUM_VALUE_PaSuPerfCounter(SuOutputClipPrim				, 62,	"Number of clipped primitives output from the setup block. The increment rate is one per clock; the range is one per clock. It does not indicate bad performance; no bottleneck detection, all instances report the same result, no combinations.")
ENUM_VALUE_PaSuPerfCounter(SuOutputNullPrim				, 63,	"Number of null primitives output from the setup block. The increment rate is one per clock; the range is one per clock. It does not indicate bad performance; no bottleneck detection, all instances report the same result, no combinations.")
ENUM_VALUE_PaSuPerfCounter(SuOutputEventFlag			, 64,	"Number of events output from the Setup block; increment rate-one per clock; range-1/clk; it does not indicate bad performance; no bottleneck detection; all instances report the same result; no combinations")
ENUM_VALUE_PaSuPerfCounter(SuOutputFirstPrimSlot		, 65,	"Number of First-Prim-Of-Slots output from the Setup block; increment rate-one per clock; range-1/clk; it does not indicate bad performance; no bottleneck detection; all instances report the same result; no combinations")
ENUM_VALUE_PaSuPerfCounter(SuOutputEndOfPacket			, 66,	"Number of End-Of-Packets output from the Setup block; increment rate-one per clock; range-1/clk; it does not indicate bad performance; no bottleneck detection; all instances report the same result; no combinations")
ENUM_VALUE_PaSuPerfCounter(SuOutputPolymodeFace			, 67,	"Number of polymode facing primitives output from the Setup block; increment rate-one per clock; range-1/clk; it does not indicate bad performance; no bottleneck detection; all instances report the same result; no combinations")
ENUM_VALUE_PaSuPerfCounter(SuOutputPolymodeBack			, 68,	"Number of polymode back-face primitives output from the Setup block; increment rate-one per clock; range-1/clk; it does not indicate bad performance; no bottleneck detection; all instances report the same result; no combinations")
ENUM_VALUE_PaSuPerfCounter(SuOutputPolymodeFront		, 69,	"Number of polymode front-face primitives output from the Setup block; increment rate-one per clock; range-1/clk; it does not indicate bad performance; no bottleneck detection; all instances report the same result; no combinations")
ENUM_VALUE_PaSuPerfCounter(SuOutClipPolymodeFace		, 70,	"Number of clipped polymode facing primitives output from the Setup block; increment rate-one per clock; range-1/clk; it does not indicate bad performance; no bottleneck detection; all instances report the same result; no combinations")
ENUM_VALUE_PaSuPerfCounter(SuOutClipPolymodeBack		, 71,	"Number of clipped polymode back-face primitives output from the Setup block; increment rate-one per clock; range-1/clk; it does not indicate bad performance; no bottleneck detection; all instances report the same result; no combinations")
ENUM_VALUE_PaSuPerfCounter(SuOutClipPolymodeFront		, 72,	"Number of clipped polymode front-face primitives output from the Setup block; increment rate-one per clock; range-1/clk; it does not indicate bad performance; no bottleneck detection; all instances report the same result; no combinations")
ENUM_VALUE_PaSuPerfCounter(SuOutputPrimDual				, 73,	"Number of dual gradient primitives output from the Setup block; increment rate-one per clock; range-1/clk; it does not indicate bad performance; no bottleneck detection; all instances report the same result; no combinations")
ENUM_VALUE_PaSuPerfCounter(SuOutputClipPrimDual			, 74,	"Number of dual gradient clipped primitives output from the Setup block; increment rate-one per clock; range-1/clk; it does not indicate bad performance; no bottleneck detection; all instances report the same result; no combinations")
ENUM_VALUE_PaSuPerfCounter(SuOutputPolymodeDual			, 75,	"Number of dual gradient polymode primitives output from the Setup block; increment rate-one per clock; range-1/clk; it does not indicate bad performance; no bottleneck detection; all instances report the same result; no combinations")
ENUM_VALUE_PaSuPerfCounter(SuOutputClipPolymodeDual		, 76,	"Number of dual gradient clip polymode primitives output from the Setup block; increment rate-one per clock; range-1/clk; it does not indicate bad performance; no bottleneck detection; all instances report the same result; no combinations")
ENUM_VALUE_PaSuPerfCounter(PasxReqIdle					, 77,	"Number of clocks PASX Requestor is Idle; increment rate-one per clock; range-1/clk; it can indicate bad performance (depending on the test); can be used for bottleneck detection; all instances report the same result; can be combined with a perf counter which indicates the number of clocks required to complete the test")
ENUM_VALUE_PaSuPerfCounter(PasxReqBusy					, 78,	"Number of clocks PASX Requestor is Busy; increment rate-one per clock; range-1/clk; it does not indicate bad performance; no bottleneck detection; all instances report the same result; no combinations")
ENUM_VALUE_PaSuPerfCounter(PasxReqStalled				, 79,	"Number of clocks PASX Requestor is Stalled; increment rate-one per clock; range-1/clk; it can indicate bad performance (depending on the test); can be used for bottleneck detection; all instances report the same result; can be combined with a perf counter which indicates the number of clocks required to complete the test")
ENUM_VALUE_PaSuPerfCounter(PasxRecIdle					, 80,	"Number of clocks PASX Receiver is Idle; increment rate-one per clock; range-1/clk; it can indicate bad performance (depending on the test); can be used for bottleneck detection; all instances report the same result; can be combined with a perf counter which indicates the number of clocks required to complete the test")
ENUM_VALUE_PaSuPerfCounter(PasxRecBusy					, 81,	"Number of clocks PASX Receiver is Busy; increment rate-one per clock; range-1/clk; it does not indicate bad performance; no bottleneck detection; all instances report the same result; no combinations")
ENUM_VALUE_PaSuPerfCounter(PasxRecStarvedSx				, 82,	"Number of clocks PASX Receiver is Stalled by SX; increment rate-one per clock; range-1/clk; it can indicate bad performance (depending on the test); can be used for bottleneck detection; all instances report the same result; can be combined with a perf counter which indicates the number of clocks required to complete the test")
ENUM_VALUE_PaSuPerfCounter(PasxRecStalled				, 83,	"Number of clocks PASX Reciever is Stalled by Position Memory or Clip Code Generator; increment rate-one per clock; range-1/clk; it can indicate bad performance (depending on the test); can be used for bottleneck detection; all instances report the same result; can be combined with-")
ENUM_VALUE_PaSuPerfCounter(PasxRecStalledPosMem			, 84,	"Number of clocks PASX Reciever is Stalled by Position Memory; increment rate-one per clock; range-1/clk; it can indicate bad performance (depending on the test); can be used for bottleneck detection; all instances report the same result; can be combined with-")
ENUM_VALUE_PaSuPerfCounter(PasxRecStalledCcgsmIn		, 85,	"Number of clocks PASX Reciever is Stalled by Clip Code Generator; increment rate-one per clock; range-1/clk; it can indicate bad performance (depending on the test); can be used for bottleneck detection; all instances report the same result; can be combined with- the other CLIP counters")
ENUM_VALUE_PaSuPerfCounter(CcgsmIdle					, 86,	"Number of clocks Clip Code Gen is Idle; increment rate-one per clock; range-1/clk; it can indicate bad performance (depending on the test); can be used for bottleneck detection; all instances report the same result; can be combined with-")
ENUM_VALUE_PaSuPerfCounter(CcgsmBusy					, 87,	"Number of clocks Clip Code Gen is Busy; increment rate-one per clock; range-1/clk; it does not indicate bad performance; no bottleneck detection; all instances report the same result; no combinations")
ENUM_VALUE_PaSuPerfCounter(CcgsmStalled					, 88,	"Number of clocks Clip Code Gen is Stalled; increment rate-one per clock; range-1/clk; it can indicate bad performance (depending on the test); can be used for bottleneck detection; all instances report the same result; can be combined with-")
ENUM_VALUE_PaSuPerfCounter(ClprimIdle					, 89,	"Number of clocks Clip Primitive Machine is Idle; increment rate-one per clock; range-1/clk; it can indicate bad performance (depending on the test); can be used for bottleneck detection; all instances report the same result; can be combined with-")
ENUM_VALUE_PaSuPerfCounter(ClprimBusy					, 90,	"Number of clocks Clip Primitive Machine is Busy; increment rate-one per clock; range-1/clk; it does not indicate bad performance; no bottleneck detection; all instances report the same result; no combinations")
ENUM_VALUE_PaSuPerfCounter(ClprimStalled				, 91,	"Number of clocks Clip Primitive Machine is stalled by Clip State Machines; range-1/clk; it can indicate bad performance (depending on the test); can be used for bottleneck detection; all instances report the same result; can be combined with-")
ENUM_VALUE_PaSuPerfCounter(ClprimStarvedCcgsm			, 92,	"Number of clocks Clip Primitive Machine is starved by Clip Code Generator; range-1/clk; it can indicate bad performance (depending on the test); can be used for bottleneck detection; all instances report the same result; can be combined with-")
ENUM_VALUE_PaSuPerfCounter(ClipsmIdle					, 93,	"Number of clocks Clip State Machines are Idle; range-1/clk; it can indicate bad performance (depending on the test); can be used for bottleneck detection; all instances report the same result; can be combined with-")
ENUM_VALUE_PaSuPerfCounter(ClipsmBusy					, 94,	"Number of clocks Clip State Machines are Busy; range-1/clk; it does not indicate bad performance; no bottleneck detection; all instances report the same result; no combinations")
ENUM_VALUE_PaSuPerfCounter(ClipsmWaitClipVertEngh		, 95,	"Number of clocks Clip State Mahcines are waiting for Clip Vert storage resources; range-1/clk; it does not indicate bad performance; no bottleneck detection; all instances report the same result; no combinations")
ENUM_VALUE_PaSuPerfCounter(ClipsmWaitHighPriSeq			, 96,	"Number of clocks Clip State Machines are waiting for High Priority Sequencer; range-1/clk; it does not indicate bad performance; no bottleneck detection; all instances report the same result; no combinations")
ENUM_VALUE_PaSuPerfCounter(ClipsmWaitClipga				, 97,	"Number of clocks Clip State Machines are waiting for ClipGA; range-1/clk; it does not indicate bad performance; no bottleneck detection; all instances report the same result; no combinations")
ENUM_VALUE_PaSuPerfCounter(ClipsmWaitAvailVteClip		, 98,	"Number of clocks Clip State Machines are waiting for VTE cycles; range-1/clk; it does not indicate bad performance; no bottleneck detection; all instances report the same result; no combinations")
ENUM_VALUE_PaSuPerfCounter(ClipsmWaitClipOutsm			, 99,	"Number of clocks Clip State Machines are waiting for Clip Output State Machine; range-1/clk; it does not indicate bad performance; no bottleneck detection; all instances report the same result; no combinations")
ENUM_VALUE_PaSuPerfCounter(ClipgaIdle					,100,	"Number of clocks Clip Ga is Idle; range-1/clk; it does not indicate bad performance; no bottleneck detection; all instances report the same result; no combinations")
ENUM_VALUE_PaSuPerfCounter(ClipgaBusy					,101,	"Number of clocks Clip Ga is Busy; range-1/clk; it does not indicate bad performance; no bottleneck detection; all instances report the same result; no combinations")
ENUM_VALUE_PaSuPerfCounter(ClipgaStarvedVteClip			,102,	"Number of clocks Clip Ga is Starved by VTE or Clipper; range-1/clk; it can potentially be used to detect bad performance; all instances report the same result")
ENUM_VALUE_PaSuPerfCounter(ClipgaStalled				,103,	"Number of clocks Clip Ga is stalled; range-1/clk; it can potentially be used to detect bad performance; all instances report the same result")
ENUM_VALUE_PaSuPerfCounter(ClipIdle						,104,	"Number of clocks Clip is Idle; range-1/clk; it can potentially be used to detect bad performance; all instances report the same result; can be used to detect bottlenecks in combination with other signals")
ENUM_VALUE_PaSuPerfCounter(ClipBusy						,105,	"Number of clocks Clip is Busy; range-1/clk; it can potentially be used to detect bad performance; all instances report the same result; can be used to detect bottlenecks in combination with other signals")
ENUM_VALUE_PaSuPerfCounter(SuIdle						,106,	"Number of clocks Setup is Idle; range-1/clk; it can potentially be used to detect bad performance; all instances report the same result; can be used to detect bottlenecks in combination with other signals")
ENUM_VALUE_PaSuPerfCounter(SuBusy						,107,	"Number of clocks Setup is Busy; range-1/clk; it can potentially be used to detect bad performance; all instances report the same result; can be used to detect bottlenecks in combination with other signals")
ENUM_VALUE_PaSuPerfCounter(SuStarvedClip				,108,	"Number of clocks Setup is starved by Clipper; range-1/clk; it can potentially be used to detect bad performance; all instances report the same result")
ENUM_VALUE_PaSuPerfCounter(SuStalledSc					,109,	"Number of clocks Setup is stalled by SC; range-1/clk; it can potentially be used to detect bad performance; all instances report the same result")
ENUM_VALUE_PaSuPerfCounter(ClDynSclkVld					,110,	"Number of clocks the CL dynamic clock is active; range-1/clk; it does not indicate bad performance; no bottleneck detection; all instances report the same result; no combinations")
ENUM_VALUE_PaSuPerfCounter(SuDynSclkVld					,111,	"Number of clocks the SU dynamic clock is active; range-1/clk; it does not indicate bad performance; no bottleneck detection; all instances report the same result; no combinations")
ENUM_VALUE_PaSuPerfCounter(PaRegSclkVld					,112,	"Number of clocks the PA register clock is active; range-1/clk; it does not indicate bad performance; no bottleneck detection; all instances report the same result; no combinations")
ENUM_VALUE_PaSuPerfCounter(SuMultiGpuPrimFilterCull		,113,	"Number of primitives culled by multi-gpu filter; range-1/clk; it does not indicate bad performance; no bottleneck detection; all instances report the same result; no combinations")
ENUM_VALUE_PaSuPerfCounter(PasxSe0Req					,114,	"Number of PA to SX requests to shader engine 0; range-1/clk; it does not indicate bad performance; no bottleneck detection; all instances report the same result; no combinations")
ENUM_VALUE_PaSuPerfCounter(PasxSe1Req					,115,	"Number of PA to SX requests to shader engine 1; range-1/clk; it does not indicate bad performance; no bottleneck detection; all instances report the same result; no combinations")
ENUM_VALUE_PaSuPerfCounter(PasxSe0FirstVector			,116,	"Number of Shader engine 0 first vectors (position); range-1/clk; it does not indicate bad performance; no bottleneck detection; all instances report the same result; no combinations")
ENUM_VALUE_PaSuPerfCounter(PasxSe0SecondVector			,117,	"Number of Shader engine 0 second vectors (position); range-1/clk; it does not indicate bad performance; no bottleneck detection; all instances report the same result; no combinations")
ENUM_VALUE_PaSuPerfCounter(PasxSe1FirstVector			,118,	"Number of Shader engine 1 first vectors (position); range-1/clk; it does not indicate bad performance; no bottleneck detection; all instances report the same result; no combinations")
ENUM_VALUE_PaSuPerfCounter(PasxSe1SecondVector			,119,	"Number of Shader engine 1 second vectors (position); range-1/clk; it does not indicate bad performance; no bottleneck detection; all instances report the same result; no combinations")
ENUM_VALUE_PaSuPerfCounter(SuSe0PrimFilterCull			,120,	"Number of primitives culled by shader engine 0 filter; range-1/clk; it does not indicate bad performance; no bottleneck detection; all instances report the same result; no combinations")
ENUM_VALUE_PaSuPerfCounter(SuSe1PrimFilterCull			,121,	"Number of primitives culled by shader engine 1 filter; range-1/clk; it does not indicate bad performance; no bottleneck detection; all instances report the same result; no combinations")
ENUM_VALUE_PaSuPerfCounter(SuSe01PrimFilterCull			,122,	"Number of primitives culled by SE0 and SE1 filter; range-1/clk; it does not indicate bad performance; no bottleneck detection; all instances report the same result; no combinations")
ENUM_VALUE_PaSuPerfCounter(SuSe0OutputPrim				,123,	"Number of primitives output to shader engine 0; range-1/clk; it does not indicate bad performance; no bottleneck detection; all instances report the same result; no combinations")
ENUM_VALUE_PaSuPerfCounter(SuSe1OutputPrim				,124,	"Number of primitives output to shader engine 1; range-1/clk; it does not indicate bad performance; no bottleneck detection; all instances report the same result; no combinations")
ENUM_VALUE_PaSuPerfCounter(SuSe01OutputPrim				,125,	"Number of primitives output to SE0 and SE1; range-1/clk; it does not indicate bad performance; no bottleneck detection; all instances report the same result; no combinations")
ENUM_VALUE_PaSuPerfCounter(SuSe0OutputNullPrim			,126,	"Number of null primitives output to shader engine 0; range-1/clk; it does not indicate bad performance; no bottleneck detection; all instances report the same result; no combinations")
ENUM_VALUE_PaSuPerfCounter(SuSe1OutputNullPrim			,127,	"Number of null primitives output to shader engine 1; range-1/clk; it does not indicate bad performance; no bottleneck detection; all instances report the same result; no combinations")
ENUM_VALUE_PaSuPerfCounter(SuSe01OutputNullPrim			,128,	"Number of null primitives output to SE0 and SE1; range-1/clk; it does not indicate bad performance; no bottleneck detection; all instances report the same result; no combinations")
ENUM_VALUE_PaSuPerfCounter(SuSe0OutputFirstPrimSlot		,129,	"Number of shader engine 0 first primitive of slot; range-1/clk; it does not indicate bad performance; no bottleneck detection; all instances report the same result; no combinations")
ENUM_VALUE_PaSuPerfCounter(SuSe1OutputFirstPrimSlot		,130,	"Number of shader engine 1 first primitive of slot; range-1/clk; it does not indicate bad performance; no bottleneck detection; all instances report the same result; no combinations")
ENUM_VALUE_PaSuPerfCounter(SuSe0StalledSc				,131,	"Number of clocks stalled by shader engine 0 scan converter; range-1/clk; it can potentially be used to detect bad performance; all instances report the same result")
ENUM_VALUE_PaSuPerfCounter(SuSe1StalledSc				,132,	"Number of clocks stalled by shader engine 1 scan converter; range-1/clk; it can potentially be used to detect bad performance; all instances report the same result")
ENUM_VALUE_PaSuPerfCounter(SuSe01StalledSc				,133,	"Number of clocks stalled by SE0 and SE1 scan converter; range-1/clk; it can potentially be used to detect bad performance; all instances report the same result")
ENUM_VALUE_PaSuPerfCounter(ClsmClippingPrim				,134,	"Number of clocks the PA is actively clipping primitives on any of the clipper state machines; range-1/clk; cannot be used to detect bad performance")
ENUM_VALUE_PaSuPerfCounter(SuCulledPrim					,135,	"Number of primitives culled due to zero area, front or back facing, or polymode front or back facing. Range is one per clock. It does not indicate bad performance.")
ENUM_VALUE_PaSuPerfCounter(SuOutputEopg					,136,	"Number of EOPGs output from the Setup block; increment rate-one per clock; range-1/clk; it does not indicate bad performance; no bottleneck detection; all instances report the same result; no combinations")
ENUM_VALUE_PaSuPerfCounter(SuSe2PrimFilterCull			,137,	"Number of primitives culled by shader engine 2 filter; range-1/clk; it does not indicate bad performance; no bottleneck detection; all instances report the same result; no combinations")
ENUM_VALUE_PaSuPerfCounter(SuSe3PrimFilterCull			,138,	"Number of primitives culled by shader engine 3 filter; range-1/clk; it does not indicate bad performance; no bottleneck detection; all instances report the same result; no combinations")
ENUM_VALUE_PaSuPerfCounter(SuSe2OutputPrim				,139,	"Number of primitives output to shader engine 2; range-1/clk; it does not indicate bad performance; no bottleneck detection; all instances report the same result; no combinations")
ENUM_VALUE_PaSuPerfCounter(SuSe3OutputPrim				,140,	"Number of primitives output to shader engine 3; range-1/clk; it does not indicate bad performance; no bottleneck detection; all instances report the same result; no combinations")
ENUM_VALUE_PaSuPerfCounter(SuSe2OutputNullPrim			,141,	"Number of null primitives output to shader engine 2; range-1/clk; it does not indicate bad performance; no bottleneck detection; all instances report the same result; no combinations")
ENUM_VALUE_PaSuPerfCounter(SuSe3OutputNullPrim			,142,	"Number of null primitives output to shader engine 3; range-1/clk; it does not indicate bad performance; no bottleneck detection; all instances report the same result; no combinations")
ENUM_VALUE_PaSuPerfCounter(SuSe0OutputEndOfPacket		,143,	"Number of End-Of-Packets output to shader engine 0; increment rate-one per clock; range-1/clk; it does not indicate bad performance; no bottleneck detection; all instances report the same result; no combinations")
ENUM_VALUE_PaSuPerfCounter(SuSe1OutputEndOfPacket		,144,	"Number of End-Of-Packets output to shader engine 1; increment rate-one per clock; range-1/clk; it does not indicate bad performance; no bottleneck detection; all instances report the same result; no combinations")
ENUM_VALUE_PaSuPerfCounter(SuSe2OutputEndOfPacket		,145,	"Number of End-Of-Packets output to shader engine 2; increment rate-one per clock; range-1/clk; it does not indicate bad performance; no bottleneck detection; all instances report the same result; no combinations")
ENUM_VALUE_PaSuPerfCounter(SuSe3OutputEndOfPacket		,146,	"Number of End-Of-Packets output to shader engine 3; increment rate-one per clock; range-1/clk; it does not indicate bad performance; no bottleneck detection; all instances report the same result; no combinations")
ENUM_VALUE_PaSuPerfCounter(SuSe0OutputEopg				,147,	"Number of EOPGs output to shader engine 0; increment rate-one per clock; range-1/clk; it does not indicate bad performance; no bottleneck detection; all instances report the same result; no combinations")
ENUM_VALUE_PaSuPerfCounter(SuSe1OutputEopg				,148,	"Number of EOPGs output to shader engine 1; increment rate-one per clock; range-1/clk; it does not indicate bad performance; no bottleneck detection; all instances report the same result; no combinations")
ENUM_VALUE_PaSuPerfCounter(SuSe2OutputEopg				,149,	"Number of EOPGs output to shader engine 2; increment rate-one per clock; range-1/clk; it does not indicate bad performance; no bottleneck detection; all instances report the same result; no combinations")
ENUM_VALUE_PaSuPerfCounter(SuSe3OutputEopg				,150,	"Number of EOPGs output to shader engine 3; increment rate-one per clock; range-1/clk; it does not indicate bad performance; no bottleneck detection; all instances report the same result; no combinations")
ENUM_VALUE_PaSuPerfCounter(SuSe2StalledSc				,151,	"Number of clocks stalled by shader engine 2 scan converter; range-1/clk; it can potentially be used to detect bad performance; all instances report the same result")
ENUM_VALUE_PaSuPerfCounter(SuSe3StalledSc				,152,	"Number of clocks stalled by shader engine 3 scan converter; range-1/clk; it can potentially be used to detect bad performance; all instances report the same result")

#ifndef ENUM_VALUE_PaScPerfCounter
#define ENUM_VALUE_PaScPerfCounter(sym, val, desc_string)
#endif
ENUM_VALUE_PaScPerfCounter(SrpsWindowValid							,  0,	"Number of clocks event-window is valid at stage register/primitive setup")
ENUM_VALUE_PaScPerfCounter(PsswWindowValid							,  1,	"Number of clocks event-window is valid at primitive setup/supertile walker")
ENUM_VALUE_PaScPerfCounter(TpqzWindowValid							,  2,	"Number of clocks event-window is valid at tile picker/quad-z")
ENUM_VALUE_PaScPerfCounter(QzqpWindowValid							,  3,	"Number of clocks event-window is valid at quad-z/quad processor")
ENUM_VALUE_PaScPerfCounter(TrpkWindowValid							,  4,	"Number of clocks event-window is valid at tile reorder/packer")
ENUM_VALUE_PaScPerfCounter(SrpsWindowValidBusy						,  5,	"Number of clocks event-window is valid at stage register/primitive setup with SC busy")
ENUM_VALUE_PaScPerfCounter(PsswWindowValidBusy						,  6,	"Number of clocks event-window is valid at primitive setup/supertile walker with SC busy")
ENUM_VALUE_PaScPerfCounter(TpqzWindowValidBusy						,  7,	"Number of clocks event-window is valid at tile picker/quad-z with SC busy")
ENUM_VALUE_PaScPerfCounter(QzqpWindowValidBusy						,  8,	"Number of clocks event-window is valid at quad-z/quad processor with SC busy")
ENUM_VALUE_PaScPerfCounter(TrpkWindowValidBusy						,  9,	"Number of clocks event-window is valid at tile reorder/packer with SC busy")
ENUM_VALUE_PaScPerfCounter(StarvedByPa								, 10,	"Sc starved by pa")
ENUM_VALUE_PaScPerfCounter(StalledByPrimfifo						, 11,	"Sc stalled by primitive fifo")
ENUM_VALUE_PaScPerfCounter(StalledByDbTile							, 12,	"Sc stalled by db tile")
ENUM_VALUE_PaScPerfCounter(StarvedByDbTile							, 13,	"Sc starved by db tile")
ENUM_VALUE_PaScPerfCounter(StalledByTileorderfifo					, 14,	"Sc stalled by tile order fifo")
ENUM_VALUE_PaScPerfCounter(StalledByTilefifo						, 15,	"Sc stalled by tile fifo")
ENUM_VALUE_PaScPerfCounter(StalledByDbQuad							, 16,	"Sc stalled by db quad")
ENUM_VALUE_PaScPerfCounter(StarvedByDbQuad							, 17,	"Sc starved by db quad")
ENUM_VALUE_PaScPerfCounter(StalledByQuadfifo						, 18,	"Sc stalled by quad fifo")
ENUM_VALUE_PaScPerfCounter(StalledByBci								, 19,	"Sc stalled by bci")
ENUM_VALUE_PaScPerfCounter(StalledBySpi								, 20,	"Sc stalled by spi")
ENUM_VALUE_PaScPerfCounter(ScissorDiscard							, 21,	"Primitives are completely discarded by scissor.")
ENUM_VALUE_PaScPerfCounter(BbDiscard								, 22,	"Primitives are discarded because primitive bounding-box did not hit any pixels.")
ENUM_VALUE_PaScPerfCounter(SupertileCount							, 23,	"Count of 32x32 pixel supertiles walked by all primitives.")
ENUM_VALUE_PaScPerfCounter(SupertilePerPrimH0						, 24,	"Primitives which walked < 2 supertiles.  Supertiles contain 32x32 pixels or 4x4 tiles.")
ENUM_VALUE_PaScPerfCounter(SupertilePerPrimH1						, 25,	"Primitives which walked < 4 supertiles.")
ENUM_VALUE_PaScPerfCounter(SupertilePerPrimH2						, 26,	"Primitives which walked < 8 supertiles.")
ENUM_VALUE_PaScPerfCounter(SupertilePerPrimH3						, 27,	"Primitives which walked < 16 supertiles.")
ENUM_VALUE_PaScPerfCounter(SupertilePerPrimH4						, 28,	"Primitives which walked < 32 supertiles.")
ENUM_VALUE_PaScPerfCounter(SupertilePerPrimH5						, 29,	"Primitives which walked < 64 supertiles.")
ENUM_VALUE_PaScPerfCounter(SupertilePerPrimH6						, 30,	"Primitives which walked < 128 supertiles.")
ENUM_VALUE_PaScPerfCounter(SupertilePerPrimH7						, 31,	"Primitives which walked < 256 supertiles.")
ENUM_VALUE_PaScPerfCounter(SupertilePerPrimH8						, 32,	"Primitives which walked < 512 supertiles.")
ENUM_VALUE_PaScPerfCounter(SupertilePerPrimH9						, 33,	"Primitives which walked < 1K supertiles.")
ENUM_VALUE_PaScPerfCounter(SupertilePerPrimH10						, 34,	"Primitives which walked < 2K supertiles.")
ENUM_VALUE_PaScPerfCounter(SupertilePerPrimH11						, 35,	"Primitives which walked < 4K supertiles.")
ENUM_VALUE_PaScPerfCounter(SupertilePerPrimH12						, 36,	"Primitives which walked < 8K supertiles.")
ENUM_VALUE_PaScPerfCounter(SupertilePerPrimH13						, 37,	"Primitives which walked < 16K supertiles.")
ENUM_VALUE_PaScPerfCounter(SupertilePerPrimH14						, 38,	"Primitives which walked < 32K supertiles.")
ENUM_VALUE_PaScPerfCounter(SupertilePerPrimH15						, 39,	"Primitives which walked < 64K supertiles.")
ENUM_VALUE_PaScPerfCounter(SupertilePerPrimH16						, 40,	"Primitives which walked < 1M  supertiles.")
ENUM_VALUE_PaScPerfCounter(TilePerPrimH0							, 41,	"Primitives which walked < 2 tiles. Tiles contain 8x8 pixels or 4x4 quads.")
ENUM_VALUE_PaScPerfCounter(TilePerPrimH1							, 42,	"Primitives which walked < 4 tiles.")
ENUM_VALUE_PaScPerfCounter(TilePerPrimH2							, 43,	"Primitives which walked < 8 tiles.")
ENUM_VALUE_PaScPerfCounter(TilePerPrimH3							, 44,	"Primitives which walked < 16 tiles.")
ENUM_VALUE_PaScPerfCounter(TilePerPrimH4							, 45,	"Primitives which walked < 32 tiles.")
ENUM_VALUE_PaScPerfCounter(TilePerPrimH5							, 46,	"Primitives which walked < 64 tiles.")
ENUM_VALUE_PaScPerfCounter(TilePerPrimH6							, 47,	"Primitives which walked < 128 tiles.")
ENUM_VALUE_PaScPerfCounter(TilePerPrimH7							, 48,	"Primitives which walked < 256 tiles.")
ENUM_VALUE_PaScPerfCounter(TilePerPrimH8							, 49,	"Primitives which walked < 512 tiles.")
ENUM_VALUE_PaScPerfCounter(TilePerPrimH9							, 50,	"Primitives which walked < 1K tiles.")
ENUM_VALUE_PaScPerfCounter(TilePerPrimH10							, 51,	"Primitives which walked < 2K tiles.")
ENUM_VALUE_PaScPerfCounter(TilePerPrimH11							, 52,	"Primitives which walked < 4K tiles.")
ENUM_VALUE_PaScPerfCounter(TilePerPrimH12							, 53,	"Primitives which walked < 8K tiles.")
ENUM_VALUE_PaScPerfCounter(TilePerPrimH13							, 54,	"Primitives which walked < 16K tiles.")
ENUM_VALUE_PaScPerfCounter(TilePerPrimH14							, 55,	"Primitives which walked < 32K tiles.")
ENUM_VALUE_PaScPerfCounter(TilePerPrimH15							, 56,	"Primitives which walked < 64K tiles.")
ENUM_VALUE_PaScPerfCounter(TilePerPrimH16							, 57,	"Primitives which walked < 1M  tiles.")
ENUM_VALUE_PaScPerfCounter(TilePerSupertileH0						, 58,	"Supertiles walked with 0 tiles hit.")
ENUM_VALUE_PaScPerfCounter(TilePerSupertileH1						, 59,	"Supertiles walked with 1 tiles hit.")
ENUM_VALUE_PaScPerfCounter(TilePerSupertileH2						, 60,	"Supertiles walked with 2 tiles hit.")
ENUM_VALUE_PaScPerfCounter(TilePerSupertileH3						, 61,	"Supertiles walked with 3 tiles hit.")
ENUM_VALUE_PaScPerfCounter(TilePerSupertileH4						, 62,	"Supertiles walked with 4 tiles hit.")
ENUM_VALUE_PaScPerfCounter(TilePerSupertileH5						, 63,	"Supertiles walked with 5 tiles hit.")
ENUM_VALUE_PaScPerfCounter(TilePerSupertileH6						, 64,	"Supertiles walked with 6 tiles hit.")
ENUM_VALUE_PaScPerfCounter(TilePerSupertileH7						, 65,	"Supertiles walked with 7 tiles hit.")
ENUM_VALUE_PaScPerfCounter(TilePerSupertileH8						, 66,	"Supertiles walked with 8 tiles hit.")
ENUM_VALUE_PaScPerfCounter(TilePerSupertileH9						, 67,	"Supertiles walked with 9 tiles hit.")
ENUM_VALUE_PaScPerfCounter(TilePerSupertileH10						, 68,	"Supertiles walked with 10 tiles hit.")
ENUM_VALUE_PaScPerfCounter(TilePerSupertileH11						, 69,	"Supertiles walked with 11 tiles hit.")
ENUM_VALUE_PaScPerfCounter(TilePerSupertileH12						, 70,	"Supertiles walked with 12 tiles hit.")
ENUM_VALUE_PaScPerfCounter(TilePerSupertileH13						, 71,	"Supertiles walked with 13 tiles hit.")
ENUM_VALUE_PaScPerfCounter(TilePerSupertileH14						, 72,	"Supertiles walked with 14 tiles hit.")
ENUM_VALUE_PaScPerfCounter(TilePerSupertileH15						, 73,	"Supertiles walked with 15 tiles hit.")
ENUM_VALUE_PaScPerfCounter(TilePerSupertileH16						, 74,	"Supertiles walked with 16 tiles hit.")
ENUM_VALUE_PaScPerfCounter(TilePickedH1								, 75,	"Number of times one tile was picked to only one of the two quad-z pipes.")
ENUM_VALUE_PaScPerfCounter(TilePickedH2								, 76,	"Number of times two tiles were picked, one to each of the two quad-z pipes.")
ENUM_VALUE_PaScPerfCounter(TilePickedH3								, 77,	"Number of times 3 tiles picked")
ENUM_VALUE_PaScPerfCounter(TilePickedH4								, 78,	"Number of times 4 tiles picked")
ENUM_VALUE_PaScPerfCounter(Qz0MultiGpuTileDiscard					, 79,	"Tiles discarded by optimization; quad-z pipe 0")
ENUM_VALUE_PaScPerfCounter(Qz1MultiGpuTileDiscard					, 80,	"Tiles discarded by optimization; quad-z pipe 1")
ENUM_VALUE_PaScPerfCounter(Qz2MultiGpuTileDiscard					, 81,	"Tiles discarded by optimization; quad-z pipe 2")
ENUM_VALUE_PaScPerfCounter(Qz3MultiGpuTileDiscard					, 82,	"Tiles discarded by optimization; quad-z pipe 3")
ENUM_VALUE_PaScPerfCounter(Qz0TileCount								, 83,	"Count of tiles processed in quad-z pipe 0.")
ENUM_VALUE_PaScPerfCounter(Qz1TileCount								, 84,	"Count of tiles processed in quad-z pipe 1.")
ENUM_VALUE_PaScPerfCounter(Qz2TileCount								, 85,	"Count of tiles processed in quad-z pipe 2.")
ENUM_VALUE_PaScPerfCounter(Qz3TileCount								, 86,	"Count of tiles processed in quad-z pipe 3.")
ENUM_VALUE_PaScPerfCounter(Qz0TileCoveredCount						, 87,	"Count of tiles covered by the input primitive in quad-z pipe 0.")
ENUM_VALUE_PaScPerfCounter(Qz1TileCoveredCount						, 88,	"Count of tiles covered by the input primitive in quad-z pipe 1.")
ENUM_VALUE_PaScPerfCounter(Qz2TileCoveredCount						, 89,	"Count of tiles covered by the input primitive in quad-z pipe 2.")
ENUM_VALUE_PaScPerfCounter(Qz3TileCoveredCount						, 90,	"Count of tiles covered by the input primitive in quad-z pipe 3.")
ENUM_VALUE_PaScPerfCounter(Qz0TileNotCoveredCount					, 91,	"Count of tiles not covered by the input primitive in quad-z pipe 0.")
ENUM_VALUE_PaScPerfCounter(Qz1TileNotCoveredCount					, 92,	"Count of tiles not covered by the input primitive in quad-z pipe 1.")
ENUM_VALUE_PaScPerfCounter(Qz2TileNotCoveredCount					, 93,	"Count of tiles not covered by the input primitive in quad-z pipe 2.")
ENUM_VALUE_PaScPerfCounter(Qz3TileNotCoveredCount					, 94,	"Count of tiles not covered by the input primitive in quad-z pipe 3.")
ENUM_VALUE_PaScPerfCounter(Qz0QuadPerTileH0							, 95,	"Tiles walked with 0 quads hit in quad-z pipe 0.")
ENUM_VALUE_PaScPerfCounter(Qz0QuadPerTileH1							, 96,	"Tiles walked with 1 quads hit in quad-z pipe 0.")
ENUM_VALUE_PaScPerfCounter(Qz0QuadPerTileH2							, 97,	"Tiles walked with 2 quads hit in quad-z pipe 0.")
ENUM_VALUE_PaScPerfCounter(Qz0QuadPerTileH3							, 98,	"Tiles walked with 3 quads hit in quad-z pipe 0.")
ENUM_VALUE_PaScPerfCounter(Qz0QuadPerTileH4							, 99,	"Tiles walked with 4 quads hit in quad-z pipe 0.")
ENUM_VALUE_PaScPerfCounter(Qz0QuadPerTileH5							,100,	"Tiles walked with 5 quads hit in quad-z pipe 0.")
ENUM_VALUE_PaScPerfCounter(Qz0QuadPerTileH6							,101,	"Tiles walked with 6 quads hit in quad-z pipe 0.")
ENUM_VALUE_PaScPerfCounter(Qz0QuadPerTileH7							,102,	"Tiles walked with 7 quads hit in quad-z pipe 0.")
ENUM_VALUE_PaScPerfCounter(Qz0QuadPerTileH8							,103,	"Tiles walked with 8 quads hit in quad-z pipe 0.")
ENUM_VALUE_PaScPerfCounter(Qz0QuadPerTileH9							,104,	"Tiles walked with 9 quads hit in quad-z pipe 0.")
ENUM_VALUE_PaScPerfCounter(Qz0QuadPerTileH10						,105,	"Tiles walked with 10 quads hit in quad-z pipe 0.")
ENUM_VALUE_PaScPerfCounter(Qz0QuadPerTileH11						,106,	"Tiles walked with 11 quads hit in quad-z pipe 0.")
ENUM_VALUE_PaScPerfCounter(Qz0QuadPerTileH12						,107,	"Tiles walked with 12 quads hit in quad-z pipe 0.")
ENUM_VALUE_PaScPerfCounter(Qz0QuadPerTileH13						,108,	"Tiles walked with 13 quads hit in quad-z pipe 0.")
ENUM_VALUE_PaScPerfCounter(Qz0QuadPerTileH14						,109,	"Tiles walked with 14 quads hit in quad-z pipe 0.")
ENUM_VALUE_PaScPerfCounter(Qz0QuadPerTileH15						,110,	"Tiles walked with 15 quads hit in quad-z pipe 0.")
ENUM_VALUE_PaScPerfCounter(Qz0QuadPerTileH16						,111,	"Tiles walked with 16 quads hit in quad-z pipe 0.")
ENUM_VALUE_PaScPerfCounter(Qz1QuadPerTileH0							,112,	"Tiles walked with 0 quads hit in quad-z pipe 1.")
ENUM_VALUE_PaScPerfCounter(Qz1QuadPerTileH1							,113,	"Tiles walked with 1 quads hit in quad-z pipe 1.")
ENUM_VALUE_PaScPerfCounter(Qz1QuadPerTileH2							,114,	"Tiles walked with 2 quads hit in quad-z pipe 1.")
ENUM_VALUE_PaScPerfCounter(Qz1QuadPerTileH3							,115,	"Tiles walked with 3 quads hit in quad-z pipe 1.")
ENUM_VALUE_PaScPerfCounter(Qz1QuadPerTileH4							,116,	"Tiles walked with 4 quads hit in quad-z pipe 1.")
ENUM_VALUE_PaScPerfCounter(Qz1QuadPerTileH5							,117,	"Tiles walked with 5 quads hit in quad-z pipe 1.")
ENUM_VALUE_PaScPerfCounter(Qz1QuadPerTileH6							,118,	"Tiles walked with 6 quads hit in quad-z pipe 1.")
ENUM_VALUE_PaScPerfCounter(Qz1QuadPerTileH7							,119,	"Tiles walked with 7 quads hit in quad-z pipe 1.")
ENUM_VALUE_PaScPerfCounter(Qz1QuadPerTileH8							,120,	"Tiles walked with 8 quads hit in quad-z pipe 1.")
ENUM_VALUE_PaScPerfCounter(Qz1QuadPerTileH9							,121,	"Tiles walked with 9 quads hit in quad-z pipe 1.")
ENUM_VALUE_PaScPerfCounter(Qz1QuadPerTileH10						,122,	"Tiles walked with 10 quads hit in quad-z pipe 1.")
ENUM_VALUE_PaScPerfCounter(Qz1QuadPerTileH11						,123,	"Tiles walked with 11 quads hit in quad-z pipe 1.")
ENUM_VALUE_PaScPerfCounter(Qz1QuadPerTileH12						,124,	"Tiles walked with 12 quads hit in quad-z pipe 1.")
ENUM_VALUE_PaScPerfCounter(Qz1QuadPerTileH13						,125,	"Tiles walked with 13 quads hit in quad-z pipe 1.")
ENUM_VALUE_PaScPerfCounter(Qz1QuadPerTileH14						,126,	"Tiles walked with 14 quads hit in quad-z pipe 1.")
ENUM_VALUE_PaScPerfCounter(Qz1QuadPerTileH15						,127,	"Tiles walked with 15 quads hit in quad-z pipe 1.")
ENUM_VALUE_PaScPerfCounter(Qz1QuadPerTileH16						,128,	"Tiles walked with 16 quads hit in quad-z pipe 1.")
ENUM_VALUE_PaScPerfCounter(Qz2QuadPerTileH0							,129,	"Tiles walked with 0 quads hit in quad-z pipe 2.")
ENUM_VALUE_PaScPerfCounter(Qz2QuadPerTileH1							,130,	"Tiles walked with 1 quads hit in quad-z pipe 2.")
ENUM_VALUE_PaScPerfCounter(Qz2QuadPerTileH2							,131,	"Tiles walked with 2 quads hit in quad-z pipe 2.")
ENUM_VALUE_PaScPerfCounter(Qz2QuadPerTileH3							,132,	"Tiles walked with 3 quads hit in quad-z pipe 2.")
ENUM_VALUE_PaScPerfCounter(Qz2QuadPerTileH4							,133,	"Tiles walked with 4 quads hit in quad-z pipe 2.")
ENUM_VALUE_PaScPerfCounter(Qz2QuadPerTileH5							,134,	"Tiles walked with 5 quads hit in quad-z pipe 2.")
ENUM_VALUE_PaScPerfCounter(Qz2QuadPerTileH6							,135,	"Tiles walked with 6 quads hit in quad-z pipe 2.")
ENUM_VALUE_PaScPerfCounter(Qz2QuadPerTileH7							,136,	"Tiles walked with 7 quads hit in quad-z pipe 2.")
ENUM_VALUE_PaScPerfCounter(Qz2QuadPerTileH8							,137,	"Tiles walked with 8 quads hit in quad-z pipe 2.")
ENUM_VALUE_PaScPerfCounter(Qz2QuadPerTileH9							,138,	"Tiles walked with 9 quads hit in quad-z pipe 2.")
ENUM_VALUE_PaScPerfCounter(Qz2QuadPerTileH10						,139,	"Tiles walked with 10 quads hit in quad-z pipe 2.")
ENUM_VALUE_PaScPerfCounter(Qz2QuadPerTileH11						,140,	"Tiles walked with 11 quads hit in quad-z pipe 2.")
ENUM_VALUE_PaScPerfCounter(Qz2QuadPerTileH12						,141,	"Tiles walked with 12 quads hit in quad-z pipe 2.")
ENUM_VALUE_PaScPerfCounter(Qz2QuadPerTileH13						,142,	"Tiles walked with 13 quads hit in quad-z pipe 2.")
ENUM_VALUE_PaScPerfCounter(Qz2QuadPerTileH14						,143,	"Tiles walked with 14 quads hit in quad-z pipe 2.")
ENUM_VALUE_PaScPerfCounter(Qz2QuadPerTileH15						,144,	"Tiles walked with 15 quads hit in quad-z pipe 2.")
ENUM_VALUE_PaScPerfCounter(Qz2QuadPerTileH16						,145,	"Tiles walked with 16 quads hit in quad-z pipe 2.")
ENUM_VALUE_PaScPerfCounter(Qz3QuadPerTileH0							,146,	"Tiles walked with 0 quads hit in quad-z pipe 3.")
ENUM_VALUE_PaScPerfCounter(Qz3QuadPerTileH1							,147,	"Tiles walked with 1 quads hit in quad-z pipe 3.")
ENUM_VALUE_PaScPerfCounter(Qz3QuadPerTileH2							,148,	"Tiles walked with 2 quads hit in quad-z pipe 3.")
ENUM_VALUE_PaScPerfCounter(Qz3QuadPerTileH3							,149,	"Tiles walked with 3 quads hit in quad-z pipe 3.")
ENUM_VALUE_PaScPerfCounter(Qz3QuadPerTileH4							,150,	"Tiles walked with 4 quads hit in quad-z pipe 3.")
ENUM_VALUE_PaScPerfCounter(Qz3QuadPerTileH5							,151,	"Tiles walked with 5 quads hit in quad-z pipe 3.")
ENUM_VALUE_PaScPerfCounter(Qz3QuadPerTileH6							,152,	"Tiles walked with 6 quads hit in quad-z pipe 3.")
ENUM_VALUE_PaScPerfCounter(Qz3QuadPerTileH7							,153,	"Tiles walked with 7 quads hit in quad-z pipe 3.")
ENUM_VALUE_PaScPerfCounter(Qz3QuadPerTileH8							,154,	"Tiles walked with 8 quads hit in quad-z pipe 3.")
ENUM_VALUE_PaScPerfCounter(Qz3QuadPerTileH9							,155,	"Tiles walked with 9 quads hit in quad-z pipe 3.")
ENUM_VALUE_PaScPerfCounter(Qz3QuadPerTileH10						,156,	"Tiles walked with 10 quads hit in quad-z pipe 3.")
ENUM_VALUE_PaScPerfCounter(Qz3QuadPerTileH11						,157,	"Tiles walked with 11 quads hit in quad-z pipe 3.")
ENUM_VALUE_PaScPerfCounter(Qz3QuadPerTileH12						,158,	"Tiles walked with 12 quads hit in quad-z pipe 3.")
ENUM_VALUE_PaScPerfCounter(Qz3QuadPerTileH13						,159,	"Tiles walked with 13 quads hit in quad-z pipe 3.")
ENUM_VALUE_PaScPerfCounter(Qz3QuadPerTileH14						,160,	"Tiles walked with 14 quads hit in quad-z pipe 3.")
ENUM_VALUE_PaScPerfCounter(Qz3QuadPerTileH15						,161,	"Tiles walked with 15 quads hit in quad-z pipe 3.")
ENUM_VALUE_PaScPerfCounter(Qz3QuadPerTileH16						,162,	"Tiles walked with 16 quads hit in quad-z pipe 3.")
ENUM_VALUE_PaScPerfCounter(Qz0QuadCount								,163,	"Total count of quads hit in quad-z pipe 0.")
ENUM_VALUE_PaScPerfCounter(Qz1QuadCount								,164,	"Total count of quads hit in quad-z pipe 1.")
ENUM_VALUE_PaScPerfCounter(Qz2QuadCount								,165,	"Total count of quads hit in quad-z pipe 2.")
ENUM_VALUE_PaScPerfCounter(Qz3QuadCount								,166,	"Total count of quads hit in quad-z pipe 3.")
ENUM_VALUE_PaScPerfCounter(P0HizTileCount							,167,	"Total count of tiles surviving Hi-Z (hierarchical-Z and hierarchical-stencil tests) in DB pipe 0.")
ENUM_VALUE_PaScPerfCounter(P1HizTileCount							,168,	"Total count of tiles surviving Hi-Z (hierarchical-Z and hierarchical-stencil tests) in DB pipe 1.")
ENUM_VALUE_PaScPerfCounter(P2HizTileCount							,169,	"Total count of tiles surviving Hi-Z (hierarchical-Z and hierarchical-stencil tests) in DB pipe 2.")
ENUM_VALUE_PaScPerfCounter(P3HizTileCount							,170,	"Total count of tiles surviving Hi-Z (hierarchical-Z and hierarchical-stencil tests) in DB pipe 3.")
ENUM_VALUE_PaScPerfCounter(P0HizQuadPerTileH0						,171,	"Tiles with 0 quads surviving Hi-Z in DB pipe 0.")
ENUM_VALUE_PaScPerfCounter(P0HizQuadPerTileH1						,172,	"Tiles with 1 quad  surviving Hi-Z in DB pipe 0.")
ENUM_VALUE_PaScPerfCounter(P0HizQuadPerTileH2						,173,	"Tiles with 2 quads surviving Hi-Z in DB pipe 0.")
ENUM_VALUE_PaScPerfCounter(P0HizQuadPerTileH3						,174,	"Tiles with 3 quads surviving Hi-Z in DB pipe 0.")
ENUM_VALUE_PaScPerfCounter(P0HizQuadPerTileH4						,175,	"Tiles with 4 quads surviving Hi-Z in DB pipe 0.")
ENUM_VALUE_PaScPerfCounter(P0HizQuadPerTileH5						,176,	"Tiles with 5 quads surviving Hi-Z in DB pipe 0.")
ENUM_VALUE_PaScPerfCounter(P0HizQuadPerTileH6						,177,	"Tiles with 6 quads surviving Hi-Z in DB pipe 0.")
ENUM_VALUE_PaScPerfCounter(P0HizQuadPerTileH7						,178,	"Tiles with 7 quads surviving Hi-Z in DB pipe 0.")
ENUM_VALUE_PaScPerfCounter(P0HizQuadPerTileH8						,179,	"Tiles with 8 quads surviving Hi-Z in DB pipe 0.")
ENUM_VALUE_PaScPerfCounter(P0HizQuadPerTileH9						,180,	"Tiles with 9 quads surviving Hi-Z in DB pipe 0.")
ENUM_VALUE_PaScPerfCounter(P0HizQuadPerTileH10						,181,	"Tiles with 10 quads surviving Hi-Z in DB pipe 0.")
ENUM_VALUE_PaScPerfCounter(P0HizQuadPerTileH11						,182,	"Tiles with 11 quads surviving Hi-Z in DB pipe 0.")
ENUM_VALUE_PaScPerfCounter(P0HizQuadPerTileH12						,183,	"Tiles with 12 quads surviving Hi-Z in DB pipe 0.")
ENUM_VALUE_PaScPerfCounter(P0HizQuadPerTileH13						,184,	"Tiles with 13 quads surviving Hi-Z in DB pipe 0.")
ENUM_VALUE_PaScPerfCounter(P0HizQuadPerTileH14						,185,	"Tiles with 14 quads surviving Hi-Z in DB pipe 0.")
ENUM_VALUE_PaScPerfCounter(P0HizQuadPerTileH15						,186,	"Tiles with 15 quads surviving Hi-Z in DB pipe 0.")
ENUM_VALUE_PaScPerfCounter(P0HizQuadPerTileH16						,187,	"Tiles with 16 quads surviving Hi-Z in DB pipe 0.")
ENUM_VALUE_PaScPerfCounter(P1HizQuadPerTileH0						,188,	"Tiles with 0 quads surviving Hi-Z in DB pipe 1.")
ENUM_VALUE_PaScPerfCounter(P1HizQuadPerTileH1						,189,	"Tiles with 1 quad  surviving Hi-Z in DB pipe 1.")
ENUM_VALUE_PaScPerfCounter(P1HizQuadPerTileH2						,190,	"Tiles with 2 quads surviving Hi-Z in DB pipe 1.")
ENUM_VALUE_PaScPerfCounter(P1HizQuadPerTileH3						,191,	"Tiles with 3 quads surviving Hi-Z in DB pipe 1.")
ENUM_VALUE_PaScPerfCounter(P1HizQuadPerTileH4						,192,	"Tiles with 4 quads surviving Hi-Z in DB pipe 1.")
ENUM_VALUE_PaScPerfCounter(P1HizQuadPerTileH5						,193,	"Tiles with 5 quads surviving Hi-Z in DB pipe 1.")
ENUM_VALUE_PaScPerfCounter(P1HizQuadPerTileH6						,194,	"Tiles with 6 quads surviving Hi-Z in DB pipe 1.")
ENUM_VALUE_PaScPerfCounter(P1HizQuadPerTileH7						,195,	"Tiles with 7 quads surviving Hi-Z in DB pipe 1.")
ENUM_VALUE_PaScPerfCounter(P1HizQuadPerTileH8						,196,	"Tiles with 8 quads surviving Hi-Z in DB pipe 1.")
ENUM_VALUE_PaScPerfCounter(P1HizQuadPerTileH9						,197,	"Tiles with 9 quads surviving Hi-Z in DB pipe 1.")
ENUM_VALUE_PaScPerfCounter(P1HizQuadPerTileH10						,198,	"Tiles with 10 quads surviving Hi-Z in DB pipe 1.")
ENUM_VALUE_PaScPerfCounter(P1HizQuadPerTileH11						,199,	"Tiles with 11 quads surviving Hi-Z in DB pipe 1.")
ENUM_VALUE_PaScPerfCounter(P1HizQuadPerTileH12						,200,	"Tiles with 12 quads surviving Hi-Z in DB pipe 1.")
ENUM_VALUE_PaScPerfCounter(P1HizQuadPerTileH13						,201,	"Tiles with 13 quads surviving Hi-Z in DB pipe 1.")
ENUM_VALUE_PaScPerfCounter(P1HizQuadPerTileH14						,202,	"Tiles with 14 quads surviving Hi-Z in DB pipe 1.")
ENUM_VALUE_PaScPerfCounter(P1HizQuadPerTileH15						,203,	"Tiles with 15 quads surviving Hi-Z in DB pipe 1.")
ENUM_VALUE_PaScPerfCounter(P1HizQuadPerTileH16						,204,	"Tiles with 16 quads surviving Hi-Z in DB pipe 1.")
ENUM_VALUE_PaScPerfCounter(P2HizQuadPerTileH0						,205,	"Tiles with 0 quads surviving Hi-Z in DB pipe 2.")
ENUM_VALUE_PaScPerfCounter(P2HizQuadPerTileH1						,206,	"Tiles with 1 quads surviving Hi-Z in DB pipe 2.")
ENUM_VALUE_PaScPerfCounter(P2HizQuadPerTileH2						,207,	"Tiles with 2 quads surviving Hi-Z in DB pipe 2.")
ENUM_VALUE_PaScPerfCounter(P2HizQuadPerTileH3						,208,	"Tiles with 3 quads surviving Hi-Z in DB pipe 2.")
ENUM_VALUE_PaScPerfCounter(P2HizQuadPerTileH4						,209,	"Tiles with 4 quads surviving Hi-Z in DB pipe 2.")
ENUM_VALUE_PaScPerfCounter(P2HizQuadPerTileH5						,210,	"Tiles with 5 quads surviving Hi-Z in DB pipe 2.")
ENUM_VALUE_PaScPerfCounter(P2HizQuadPerTileH6						,211,	"Tiles with 6 quads surviving Hi-Z in DB pipe 2.")
ENUM_VALUE_PaScPerfCounter(P2HizQuadPerTileH7						,212,	"Tiles with 7 quads surviving Hi-Z in DB pipe 2.")
ENUM_VALUE_PaScPerfCounter(P2HizQuadPerTileH8						,213,	"Tiles with 8 quads surviving Hi-Z in DB pipe 2.")
ENUM_VALUE_PaScPerfCounter(P2HizQuadPerTileH9						,214,	"Tiles with 9 quads surviving Hi-Z in DB pipe 2.")
ENUM_VALUE_PaScPerfCounter(P2HizQuadPerTileH10						,215,	"Tiles with 10 quads surviving Hi-Z in DB pipe 2.")
ENUM_VALUE_PaScPerfCounter(P2HizQuadPerTileH11						,216,	"Tiles with 11 quads surviving Hi-Z in DB pipe 2.")
ENUM_VALUE_PaScPerfCounter(P2HizQuadPerTileH12						,217,	"Tiles with 12 quads surviving Hi-Z in DB pipe 2.")
ENUM_VALUE_PaScPerfCounter(P2HizQuadPerTileH13						,218,	"Tiles with 13 quads surviving Hi-Z in DB pipe 2.")
ENUM_VALUE_PaScPerfCounter(P2HizQuadPerTileH14						,219,	"Tiles with 14 quads surviving Hi-Z in DB pipe 2.")
ENUM_VALUE_PaScPerfCounter(P2HizQuadPerTileH15						,220,	"Tiles with 15 quads surviving Hi-Z in DB pipe 2.")
ENUM_VALUE_PaScPerfCounter(P2HizQuadPerTileH16						,221,	"Tiles with 16 quads surviving Hi-Z in DB pipe 2.")
ENUM_VALUE_PaScPerfCounter(P3HizQuadPerTileH0						,222,	"Tiles with 0 quads surviving Hi-Z in DB pipe 3.")
ENUM_VALUE_PaScPerfCounter(P3HizQuadPerTileH1						,223,	"Tiles with 1 quads surviving Hi-Z in DB pipe 3.")
ENUM_VALUE_PaScPerfCounter(P3HizQuadPerTileH2						,224,	"Tiles with 2 quads surviving Hi-Z in DB pipe 3.")
ENUM_VALUE_PaScPerfCounter(P3HizQuadPerTileH3						,225,	"Tiles with 3 quads surviving Hi-Z in DB pipe 3.")
ENUM_VALUE_PaScPerfCounter(P3HizQuadPerTileH4						,226,	"Tiles with 4 quads surviving Hi-Z in DB pipe 3.")
ENUM_VALUE_PaScPerfCounter(P3HizQuadPerTileH5						,227,	"Tiles with 5 quads surviving Hi-Z in DB pipe 3.")
ENUM_VALUE_PaScPerfCounter(P3HizQuadPerTileH6						,228,	"Tiles with 6 quads surviving Hi-Z in DB pipe 3.")
ENUM_VALUE_PaScPerfCounter(P3HizQuadPerTileH7						,229,	"Tiles with 7 quads surviving Hi-Z in DB pipe 3.")
ENUM_VALUE_PaScPerfCounter(P3HizQuadPerTileH8						,230,	"Tiles with 8 quads surviving Hi-Z in DB pipe 3.")
ENUM_VALUE_PaScPerfCounter(P3HizQuadPerTileH9						,231,	"Tiles with 9 quads surviving Hi-Z in DB pipe 3.")
ENUM_VALUE_PaScPerfCounter(P3HizQuadPerTileH10						,232,	"Tiles with 10 quads surviving Hi-Z in DB pipe 3.")
ENUM_VALUE_PaScPerfCounter(P3HizQuadPerTileH11						,233,	"Tiles with 11 quads surviving Hi-Z in DB pipe 3.")
ENUM_VALUE_PaScPerfCounter(P3HizQuadPerTileH12						,234,	"Tiles with 12 quads surviving Hi-Z in DB pipe 3.")
ENUM_VALUE_PaScPerfCounter(P3HizQuadPerTileH13						,235,	"Tiles with 13 quads surviving Hi-Z in DB pipe 3.")
ENUM_VALUE_PaScPerfCounter(P3HizQuadPerTileH14						,236,	"Tiles with 14 quads surviving Hi-Z in DB pipe 3.")
ENUM_VALUE_PaScPerfCounter(P3HizQuadPerTileH15						,237,	"Tiles with 15 quads surviving Hi-Z in DB pipe 3.")
ENUM_VALUE_PaScPerfCounter(P3HizQuadPerTileH16						,238,	"Tiles with 16 quads surviving Hi-Z in DB pipe 3.")
ENUM_VALUE_PaScPerfCounter(P0HizQuadCount							,239,	"Total count of quads surviving Hi-Z in DB pipe 0.")
ENUM_VALUE_PaScPerfCounter(P1HizQuadCount							,240,	"Total count of quads surviving Hi-Z in DB pipe 1.")
ENUM_VALUE_PaScPerfCounter(P2HizQuadCount							,241,	"Total count of quads surviving Hi-Z in DB pipe 2.")
ENUM_VALUE_PaScPerfCounter(P3HizQuadCount							,242,	"Total count of quads surviving Hi-Z in DB pipe 3.")
ENUM_VALUE_PaScPerfCounter(P0DetailQuadCount						,243,	"Total count of quads surviving detail sampler in DB pipe 0. This does not count quads which originated from covered tiles that fully passed Hi-Z, as these bypass the detail sampler.")
ENUM_VALUE_PaScPerfCounter(P1DetailQuadCount						,244,	"Total count of quads surviving detail sampler in DB pipe 1. This does not count quads which originated from covered tiles that fully passed Hi-Z, as these bypass the detail sampler.")
ENUM_VALUE_PaScPerfCounter(P2DetailQuadCount						,245,	"Total count of quads surviving detail sampler in DB pipe 2. This does not count quads which originated from covered tiles that fully passed Hi-Z, as these bypass the detail sampler.")
ENUM_VALUE_PaScPerfCounter(P3DetailQuadCount						,246,	"Total count of quads surviving detail sampler in DB pipe 3. This does not count quads which originated from covered tiles that fully passed Hi-Z, as these bypass the detail sampler.")
ENUM_VALUE_PaScPerfCounter(P0DetailQuadWith1Pix						,247,	"Quads with 1 pixel  surviving detail sampling in DB pipe 0.")
ENUM_VALUE_PaScPerfCounter(P0DetailQuadWith2Pix						,248,	"Quads with 2 pixels surviving detail sampling in DB pipe 0.")
ENUM_VALUE_PaScPerfCounter(P0DetailQuadWith3Pix						,249,	"Quads with 3 pixels surviving detail sampling in DB pipe 0.")
ENUM_VALUE_PaScPerfCounter(P0DetailQuadWith4Pix						,250,	"Quads with 4 pixels surviving detail sampling in DB pipe 0.")
ENUM_VALUE_PaScPerfCounter(P1DetailQuadWith1Pix						,251,	"Quads with 1 pixel  surviving detail sampling in DB pipe 1.")
ENUM_VALUE_PaScPerfCounter(P1DetailQuadWith2Pix						,252,	"Quads with 2 pixels surviving detail sampling in DB pipe 1.")
ENUM_VALUE_PaScPerfCounter(P1DetailQuadWith3Pix						,253,	"Quads with 3 pixels surviving detail sampling in DB pipe 1.")
ENUM_VALUE_PaScPerfCounter(P1DetailQuadWith4Pix						,254,	"Quads with 4 pixels surviving detail sampling in DB pipe 1.")
ENUM_VALUE_PaScPerfCounter(P2DetailQuadWith1Pix						,255,	"Quads with 1 pixel  surviving detail sampling in DB pipe 2")
ENUM_VALUE_PaScPerfCounter(P2DetailQuadWith2Pix						,256,	"Quads with 2 pixels surviving detail sampling in DB pipe 2")
ENUM_VALUE_PaScPerfCounter(P2DetailQuadWith3Pix						,257,	"Quads with 3 pixels surviving detail sampling in DB pipe 2")
ENUM_VALUE_PaScPerfCounter(P2DetailQuadWith4Pix						,258,	"Quads with 4 pixels surviving detail sampling in DB pipe 2")
ENUM_VALUE_PaScPerfCounter(P3DetailQuadWith1Pix						,259,	"Quads with 1 pixel  surviving detail sampling in DB pipe 3")
ENUM_VALUE_PaScPerfCounter(P3DetailQuadWith2Pix						,260,	"Quads with 2 pixels surviving detail sampling in DB pipe 3")
ENUM_VALUE_PaScPerfCounter(P3DetailQuadWith3Pix						,261,	"Quads with 3 pixels surviving detail sampling in DB pipe 3")
ENUM_VALUE_PaScPerfCounter(P3DetailQuadWith4Pix						,262,	"Quads with 4 pixels surviving detail sampling in DB pipe 3")
ENUM_VALUE_PaScPerfCounter(EarlyzQuadCount							,263,	"Total count of quads surviving EarlyZ (pre-pixel-shader, depth-stencil test).")
ENUM_VALUE_PaScPerfCounter(EarlyzQuadWith1Pix						,264,	"Quads with 1 pixel  surviving EarlyZ.")
ENUM_VALUE_PaScPerfCounter(EarlyzQuadWith2Pix						,265,	"Quads with 2 pixels surviving EarlyZ.")
ENUM_VALUE_PaScPerfCounter(EarlyzQuadWith3Pix						,266,	"Quads with 3 pixels surviving EarlyZ.")
ENUM_VALUE_PaScPerfCounter(EarlyzQuadWith4Pix						,267,	"Quads with 4 pixels surviving EarlyZ.")
ENUM_VALUE_PaScPerfCounter(PkrQuadPerRowH1							,268,	"Quad packer row outputs with 1 valid quad.")
ENUM_VALUE_PaScPerfCounter(PkrQuadPerRowH2							,269,	"Quad packer row outputs with 2 valid quads.")
ENUM_VALUE_PaScPerfCounter(PkrQuadPerRowH3							,270,	"Quad packer row outputs with 3 valid quads.")
ENUM_VALUE_PaScPerfCounter(PkrQuadPerRowH4							,271,	"Quad packer row outputs with 4 valid quads.")
ENUM_VALUE_PaScPerfCounter(PkrEndOfVector							,272,	"Number of pixel shader wavefronts packed, each of which contains up to 16 valid quads.")
ENUM_VALUE_PaScPerfCounter(PkrControlXfer							,273,	"Number of control transfers")
ENUM_VALUE_PaScPerfCounter(PkrDbhangForceEov						,274,	"Number of times partial vector ejected b/c of DB hang condition")
ENUM_VALUE_PaScPerfCounter(RegSclkBusy								,275,	"Number of cycles register clock is busy")
ENUM_VALUE_PaScPerfCounter(Grp0DynSclkBusy							,276,	"Number of cycles group0 dynamic clock is busy")
ENUM_VALUE_PaScPerfCounter(Grp1DynSclkBusy							,277,	"Number of cycles group1 dynamic clock is busy")
ENUM_VALUE_PaScPerfCounter(Grp2DynSclkBusy							,278,	"Number of cycles group2 dynamic clock is busy")
ENUM_VALUE_PaScPerfCounter(Grp3DynSclkBusy							,279,	"Number of cycles group3 dynamic clock is busy")
ENUM_VALUE_PaScPerfCounter(Grp4DynSclkBusy							,280,	"Number of cycles group4 dynamic clock is busy")
ENUM_VALUE_PaScPerfCounter(Pa0ScDataFifoRd							,281,	"Number of cycles of read of pa0 fifo")
ENUM_VALUE_PaScPerfCounter(Pa0ScDataFifoWe							,282,	"Number of cycles of write of pa0 fifo")
ENUM_VALUE_PaScPerfCounter(Pa1ScDataFifoRd							,283,	"Number of cycles of read of pa1 fifo")
ENUM_VALUE_PaScPerfCounter(Pa1ScDataFifoWe							,284,	"Number of cycles of write of pa1 fifo")
ENUM_VALUE_PaScPerfCounter(PsArbXfcAllEventOrPrimCycles				,285,	"Number of cycles of arb xfc's for all event or prims")
ENUM_VALUE_PaScPerfCounter(PsArbXfcOnlyPrimCycles					,286,	"Number of cycles of arb xfc's for only prims")
ENUM_VALUE_PaScPerfCounter(PsArbXfcOnlyOneIncPerPrim				,287,	"Number of cycles of arb xfc's for one inc per prim only")
ENUM_VALUE_PaScPerfCounter(PsArbStalledFromBelow					,288,	"Number of cycles of stalled post arbiter for valid data")
ENUM_VALUE_PaScPerfCounter(PsArbStarvedFromAbove					,289,	"Number of cycles of PA starving SC in sop/eop range")
ENUM_VALUE_PaScPerfCounter(PsArbScBusy								,290,	"Number of cycles of SC busy")
ENUM_VALUE_PaScPerfCounter(PsArbPaScBusy							,291,	"Number of cycles in between start of packet/end of packet")
ENUM_VALUE_PaScPerfCounter(Pa2ScDataFifoRd							,292,	"Number of cycles of read of pa2 fifo")
ENUM_VALUE_PaScPerfCounter(Pa2ScDataFifoWe							,293,	"Number of cycles of write of pa2 fifo")
ENUM_VALUE_PaScPerfCounter(Pa3ScDataFifoRd							,294,	"Number of cycles of read of pa3 fifo")
ENUM_VALUE_PaScPerfCounter(Pa3ScDataFifoWe							,295,	"Number of cycles of write of pa3 fifo")
ENUM_VALUE_PaScPerfCounter(PaScDealloc00We							,296,	"Number of cycles of pa sc fifo write of pa0 dealloc binary bit 0")
ENUM_VALUE_PaScPerfCounter(PaScDealloc01We							,297,	"Number of cycles of pa sc fifo write of pa0 dealloc binary bit 1")
ENUM_VALUE_PaScPerfCounter(PaScDealloc10We							,298,	"Number of cycles of pa sc fifo write of pa1 dealloc binary bit 0")
ENUM_VALUE_PaScPerfCounter(PaScDealloc11We							,299,	"Number of cycles of pa sc fifo write of pa1 dealloc binary bit 1")
ENUM_VALUE_PaScPerfCounter(PaScDealloc20We							,300,	"Number of cycles of pa sc fifo write of pa2 dealloc binary bit 0")
ENUM_VALUE_PaScPerfCounter(PaScDealloc21We							,301,	"Number of cycles of pa sc fifo write of pa2 dealloc binary bit 1")
ENUM_VALUE_PaScPerfCounter(PaScDealloc30We							,302,	"Number of cycles of pa sc fifo write of pa3 dealloc binary bit 0")
ENUM_VALUE_PaScPerfCounter(PaScDealloc31We							,303,	"Number of cycles of pa sc fifo write of pa3 dealloc binary bit 1")
ENUM_VALUE_PaScPerfCounter(Pa0ScEopWe								,304,	"Number of cycles of pa sc fifo write of pa0 end of packet")
ENUM_VALUE_PaScPerfCounter(Pa0ScEopgWe								,305,	"Number of cycles of pa sc fifo write of pa0 end of prim group")
ENUM_VALUE_PaScPerfCounter(Pa0ScEventWe								,306,	"Number of cycles of pa sc fifo write of pa0 event")
ENUM_VALUE_PaScPerfCounter(Pa1ScEopWe								,307,	"Number of cycles of pa sc fifo write of pa1 end of packet")
ENUM_VALUE_PaScPerfCounter(Pa1ScEopgWe								,308,	"Number of cycles of pa sc fifo write of pa1 end of prim group")
ENUM_VALUE_PaScPerfCounter(Pa1ScEventWe								,309,	"Number of cycles of pa sc fifo write of pa1 event")
ENUM_VALUE_PaScPerfCounter(Pa2ScEopWe								,310,	"Number of cycles of pa sc fifo write of pa2 end of packet")
ENUM_VALUE_PaScPerfCounter(Pa2ScEopgWe								,311,	"Number of cycles of pa sc fifo write of pa2 end of prim group")
ENUM_VALUE_PaScPerfCounter(Pa2ScEventWe								,312,	"Number of cycles of pa sc fifo write of pa2 event")
ENUM_VALUE_PaScPerfCounter(Pa3ScEopWe								,313,	"Number of cycles of pa sc fifo write of pa3 end of packet")
ENUM_VALUE_PaScPerfCounter(Pa3ScEopgWe								,314,	"Number of cycles of pa sc fifo write of pa3 end of prim group")
ENUM_VALUE_PaScPerfCounter(Pa3ScEventWe								,315,	"Number of cycles of pa sc fifo write of pa3 event")
ENUM_VALUE_PaScPerfCounter(PsArbOooThresholdSwitchToDesiredFifo		,316,	"Number of cycles of pa sc arbiter front end switches based on hitting the out of order fifo skew threshold")
ENUM_VALUE_PaScPerfCounter(PsArbOooFifoEmptySwitch					,317,	"Number of cycles of cycles of pa sc arbiter front end switches based on the currently selected fifo going empty")
ENUM_VALUE_PaScPerfCounter(PsArbNullPrimBubblePop					,318,	"Number of cycles of pa sc arbiter null prims without eop read in the eop braodcast window between eop on selected fifo and eop sync achieved across all fifos")
ENUM_VALUE_PaScPerfCounter(PsArbEopPopSyncPop						,319,	"Number of cycles of of pa sc arbiter eop reads at the eop sync point with all fifos synced")
ENUM_VALUE_PaScPerfCounter(PsArbEventSyncPop						,320,	"Number of cycles of pa sc event reads")
ENUM_VALUE_PaScPerfCounter(ScPsEngMulticycleBubble					,321,	"Number of cycles of multicycles prims sent with a empty fifo slot behind the current phase, this is not expected to occur")
ENUM_VALUE_PaScPerfCounter(Pa0ScFpovWe								,322,	"Number of cycles of pa sc fifo write of pa0 first prim of vector")
ENUM_VALUE_PaScPerfCounter(Pa1ScFpovWe								,323,	"Number of cycles of pa sc fifo write of pa1 first prim of vector")
ENUM_VALUE_PaScPerfCounter(Pa2ScFpovWe								,324,	"Number of cycles of pa sc fifo write of pa2 first prim of vector")
ENUM_VALUE_PaScPerfCounter(Pa3ScFpovWe								,325,	"Number of cycles of pa sc fifo write of pa3 first prim of vector")
ENUM_VALUE_PaScPerfCounter(Pa0ScLpovWe								,326,	"Number of cycles of pa sc fifo write of pa0 last prim of vector")
ENUM_VALUE_PaScPerfCounter(Pa1ScLpovWe								,327,	"Number of cycles of pa sc fifo write of pa1 last prim of vector")
ENUM_VALUE_PaScPerfCounter(Pa2ScLpovWe								,328,	"Number of cycles of pa sc fifo write of pa2 last prim of vector")
ENUM_VALUE_PaScPerfCounter(Pa3ScLpovWe								,329,	"Number of cycles of pa sc fifo write of pa3 last prim of vector")
ENUM_VALUE_PaScPerfCounter(Pa0ScSpiDealloc0							,330,	"Number of spi cycles of pa0 originated dealloc bit 0 set")
ENUM_VALUE_PaScPerfCounter(Pa0ScSpiDealloc1							,331,	"Number of spi cycles of pa0 originated dealloc bit 1 set")
ENUM_VALUE_PaScPerfCounter(Pa0ScSpiDealloc2							,332,	"Number of spi cycles of pa0 originated dealloc bit 2 set")
ENUM_VALUE_PaScPerfCounter(Pa1ScSpiDealloc0							,333,	"Number of spi cycles of pa1 originated dealloc bit 0 set")
ENUM_VALUE_PaScPerfCounter(Pa1ScSpiDealloc1							,334,	"Number of spi cycles of pa1 originated dealloc bit 1 set")
ENUM_VALUE_PaScPerfCounter(Pa1ScSpiDealloc2							,335,	"Number of spi cycles of pa1 originated dealloc bit 2 set")
ENUM_VALUE_PaScPerfCounter(Pa2ScSpiDealloc0							,336,	"Number of spi cycles of pa2 originated dealloc bit 0 set")
ENUM_VALUE_PaScPerfCounter(Pa2ScSpiDealloc1							,337,	"Number of spi cycles of pa2 originated dealloc bit 1 set")
ENUM_VALUE_PaScPerfCounter(Pa2ScSpiDealloc2							,338,	"Number of spi cycles of pa2 originated dealloc bit 2 set")
ENUM_VALUE_PaScPerfCounter(Pa3ScSpiDealloc0							,339,	"Number of spi cycles of pa3 originated dealloc bit 0 set")
ENUM_VALUE_PaScPerfCounter(Pa3ScSpiDealloc1							,340,	"Number of spi cycles of pa3 originated dealloc bit 1 set")
ENUM_VALUE_PaScPerfCounter(Pa3ScSpiDealloc2							,341,	"Number of spi cycles of pa3 originated dealloc bit 2 set")
ENUM_VALUE_PaScPerfCounter(Pa0ScSpiFpov								,342,	"Number of spi cycles of pa0 originated first prim of vector")
ENUM_VALUE_PaScPerfCounter(Pa1ScSpiFpov								,343,	"Number of spi cycles of pa1 originated first prim of vector")
ENUM_VALUE_PaScPerfCounter(Pa2ScSpiFpov								,344,	"Number of spi cycles of pa2 originated first prim of vector")
ENUM_VALUE_PaScPerfCounter(Pa3ScSpiFpov								,345,	"Number of spi cycles of pa3 originated first prim of vector")
ENUM_VALUE_PaScPerfCounter(ScSpiEvent								,346,	"Number of spi cycles of events")
ENUM_VALUE_PaScPerfCounter(PsTsEventFifoPush						,347,	"Number of cycles of sc timestamp event fifo writes")
ENUM_VALUE_PaScPerfCounter(PsTsEventFifoPop							,348,	"Number of cycles of sc timestamp event fifo reads")
ENUM_VALUE_PaScPerfCounter(PsCtxDoneFifoPush						,349,	"Number of cycles of sc context done event fifo writes")
ENUM_VALUE_PaScPerfCounter(PsCtxDoneFifoPop							,350,	"Number of cycles of sc context done event fifo reads")
ENUM_VALUE_PaScPerfCounter(MulticycleBubbleFreeze					,351,	"Number of cycles of sc prim setup backpressure for multicycles prims sent with a empty fifo slot behind the current phase with ENABLE_MULTICYCLE_BUBBLE_FREEZE set")
ENUM_VALUE_PaScPerfCounter(EopSyncWindow							,352,	"Number of cycles of after end of packet is read from the selected pa sc fifo until end of packet broadcast synchronization is achieved across all pa sc fifos")
ENUM_VALUE_PaScPerfCounter(Pa0ScNullWe								,353,	"Number of cycles of pa sc fifo write of pa0 null primitives")
ENUM_VALUE_PaScPerfCounter(Pa0ScNullDeallocWe						,354,	"Number of cycles of pa sc fifo write of pa0 null primitives with dealloc tokens set")
ENUM_VALUE_PaScPerfCounter(Pa0ScDataFifoEopgRd						,355,	"Number of cycles of pa sc fifo read of pa0 end of prim group")
ENUM_VALUE_PaScPerfCounter(Pa0ScDataFifoEopRd						,356,	"Number of cycles of pa sc fifo read of pa0 end of packet")
ENUM_VALUE_PaScPerfCounter(Pa0ScDealloc0Rd							,357,	"Number of cycles of pa sc fifo read of pa0 dealloc bit 0 set")
ENUM_VALUE_PaScPerfCounter(Pa0ScDealloc1Rd							,358,	"Number of cycles of pa sc fifo read of pa0 dealloc bit 1 set")
ENUM_VALUE_PaScPerfCounter(Pa1ScDataFifoEopgRd						,359,	"Number of cycles of pa sc fifo read of pa1 end of prim group")
ENUM_VALUE_PaScPerfCounter(Pa1ScDataFifoEopRd						,360,	"Number of cycles of pa sc fifo read of pa1 end of packet")
ENUM_VALUE_PaScPerfCounter(Pa1ScDealloc0Rd							,361,	"Number of cycles of pa sc fifo read of pa1 dealloc bit 0 set")
ENUM_VALUE_PaScPerfCounter(Pa1ScDealloc1Rd							,362,	"Number of cycles of pa sc fifo read of pa1 dealloc bit 1 set")
ENUM_VALUE_PaScPerfCounter(Pa1ScNullWe								,363,	"Number of cycles of pa sc fifo write of pa1 null primitives")
ENUM_VALUE_PaScPerfCounter(Pa1ScNullDeallocWe						,364,	"Number of cycles of pa sc fifo write of pa1 null primitives with dealloc tokens set")
ENUM_VALUE_PaScPerfCounter(Pa2ScDataFifoEopgRd						,365,	"Number of cycles of pa sc fifo read of pa2 end of prim group")
ENUM_VALUE_PaScPerfCounter(Pa2ScDataFifoEopRd						,366,	"Number of cycles of pa sc fifo read of pa2 end of packet")
ENUM_VALUE_PaScPerfCounter(Pa2ScDealloc0Rd							,367,	"Number of cycles of pa sc fifo read of pa2 dealloc bit 0 set")
ENUM_VALUE_PaScPerfCounter(Pa2ScDealloc1Rd							,368,	"Number of cycles of pa sc fifo read of pa2 dealloc bit 1 set")
ENUM_VALUE_PaScPerfCounter(Pa2ScNullWe								,369,	"Number of cycles of pa sc fifo write of pa2 null primitives")
ENUM_VALUE_PaScPerfCounter(Pa2ScNullDeallocWe						,370,	"Number of cycles of pa sc fifo write of pa2 null primitives with dealloc tokens set")
ENUM_VALUE_PaScPerfCounter(Pa3ScDataFifoEopgRd						,371,	"Number of cycles of pa sc fifo read of pa3 end of prim group")
ENUM_VALUE_PaScPerfCounter(Pa3ScDataFifoEopRd						,372,	"Number of cycles of pa sc fifo read of pa3 end of packet")
ENUM_VALUE_PaScPerfCounter(Pa3ScDealloc0Rd							,373,	"Number of cycles of pa sc fifo read of pa3 dealloc bit 0 set")
ENUM_VALUE_PaScPerfCounter(Pa3ScDealloc1Rd							,374,	"Number of cycles of pa sc fifo read of pa3 dealloc bit 1 set")
ENUM_VALUE_PaScPerfCounter(Pa3ScNullWe								,375,	"Number of cycles of pa sc fifo write of pa3 null primitives")
ENUM_VALUE_PaScPerfCounter(Pa3ScNullDeallocWe						,376,	"Number of cycles of pa sc fifo write of pa3 null primitives with dealloc tokens set")
ENUM_VALUE_PaScPerfCounter(PsPa0ScFifoEmpty							,377,	"Number of cycles of pa0_sc_fifo_empty")
ENUM_VALUE_PaScPerfCounter(PsPa0ScFifoFull							,378,	"Number of cycles of pa0_sc_fifo_full")
ENUM_VALUE_PaScPerfCounter(Pa0PsDataSend							,379,	"Number of cycles of pa0 sc fifo write")
ENUM_VALUE_PaScPerfCounter(PsPa1ScFifoEmpty							,380,	"Number of cycles of pa1_sc_fifo_empty")
ENUM_VALUE_PaScPerfCounter(PsPa1ScFifoFull							,381,	"Number of cycles of pa1_sc_fifo_full")
ENUM_VALUE_PaScPerfCounter(Pa1PsDataSend							,382,	"Number of cycles of pa1 sc fifo write")
ENUM_VALUE_PaScPerfCounter(PsPa2ScFifoEmpty							,383,	"Number of cycles of pa2_sc_fifo_empty")
ENUM_VALUE_PaScPerfCounter(PsPa2ScFifoFull							,384,	"Number of cycles of pa2_sc_fifo_full")
ENUM_VALUE_PaScPerfCounter(Pa2PsDataSend							,385,	"Number of cycles of pa2 sc fifo write")
ENUM_VALUE_PaScPerfCounter(PsPa3ScFifoEmpty							,386,	"Number of cycles of pa3_sc_fifo_empty")
ENUM_VALUE_PaScPerfCounter(PsPa3ScFifoFull							,387,	"Number of cycles of pa3_sc_fifo_full")
ENUM_VALUE_PaScPerfCounter(Pa3PsDataSend							,388,	"Number of cycles of pa3 sc fifo write")
ENUM_VALUE_PaScPerfCounter(BusyProcessingMulticyclePrim				,389,	"Number of cycles of sc arbiter busy processing multicycle prim")
ENUM_VALUE_PaScPerfCounter(BusyCntNotZero							,390,	"Number of cycles of sc busy counter non zero")
ENUM_VALUE_PaScPerfCounter(BmBusy									,391,	"Number of cycles of sc backend mapper busy")
ENUM_VALUE_PaScPerfCounter(BackendBusy								,392,	"Number of cycles of sc backend busy")
ENUM_VALUE_PaScPerfCounter(ScfScbInterfaceBusy						,393,	"Number of cycles of scf scb interface busy")
ENUM_VALUE_PaScPerfCounter(ScbBusy									,394,	"Number of cycles of scb busy (second packer if present)")
ENUM_VALUE_PaScPerfCounter(StarvedByPaWithUnselectedPaNotEmpty		,395,	"NEO ONLY; SC_STARVED_BY_PA_WITH_UNSELECTED_PA_NOT_EMPTY  SC starved by PA with a unselected PA FIFO not empty (use if more than one PA only)")
ENUM_VALUE_PaScPerfCounter(StarvedByPaWithUnselectedPaFull			,396,	"NEO ONLY; SC_STARVED_BY_PA_WITH_UNSELECTED_PA_FULL  SC starved by PA with a unselected PA FIFO full (use if more than one pa only)")
ENUM_VALUE_PaScPerfCounter(FullFullQuad								,397,	"NEO ONLY; SC_FULL_FULL_QUAD Number of quads at log2_xscale=log2_yscale=0")
ENUM_VALUE_PaScPerfCounter(FullHalfQuad								,398,	"NEO ONLY; SC_FULL_HALF_QUAD Number of quads at log2_xscale=0, log2_yscale=1")
ENUM_VALUE_PaScPerfCounter(FullQtrQuad								,399,	"NEO ONLY; SC_FULL_QTR_QUAD  Number of quads at log2_xscale=0, log2_yscale=2")
ENUM_VALUE_PaScPerfCounter(HalfFullQuad								,400,	"NEO ONLY; SC_HALF_FULL_QUAD Number of quads at log2_xscale=1, log2_yscale=0")
ENUM_VALUE_PaScPerfCounter(HalfHalfQuad								,401,	"NEO ONLY; SC_HALF_HALF_QUAD Number of quads at log2_xscale=1, log2_yscale=1")
ENUM_VALUE_PaScPerfCounter(HalfQtrQuad								,402,	"NEO ONLY; SC_HALF_QTR_QUAD  Number of quads at log2_xscale=1, log2_yscale=2")
ENUM_VALUE_PaScPerfCounter(QtrFullQuad								,403,	"NEO ONLY; SC_QTR_FULL_QUAD  Number of quads at log2_xscale=2, log2_yscale=0")
ENUM_VALUE_PaScPerfCounter(QtrHalfQuad								,404,	"NEO ONLY; SC_QTR_HALF_QUAD  Number of quads at log2_xscale=2, log2_yscale=1")
ENUM_VALUE_PaScPerfCounter(QtrQtrQuad								,405,	"NEO ONLY; SC_QTR_QTR_QUAD   Number of quads at log2_xscale=2, log2_yscale=2")

#ifndef ENUM_VALUE_SpiPerfCounter
#define ENUM_VALUE_SpiPerfCounter(sym, val, desc_string)
#endif
ENUM_VALUE_SpiPerfCounter(VsWindowValid			,  0,	"Clock count enabled by perfcounter_start event for VS stage.")
ENUM_VALUE_SpiPerfCounter(VsBusy				,  1,	"Number of clocks with outstanding VS waves (SPI or SH).")
ENUM_VALUE_SpiPerfCounter(VsFirstWave			,  2,	"Number of VS_IS_DS first waves")
ENUM_VALUE_SpiPerfCounter(VsLastWave			,  3,	"Number of VS_IS_DS last waves")
ENUM_VALUE_SpiPerfCounter(VsLshsDealloc			,  4,	"Number of VS_IS_DS lds dealloc waves")
ENUM_VALUE_SpiPerfCounter(VsPcStall				,  5,	"Number of clocks stalled due to VS pc space.")
ENUM_VALUE_SpiPerfCounter(VsPos0Stall			,  6,	"Number of clocks stalled due to VS pos buf space in SH0.")
ENUM_VALUE_SpiPerfCounter(VsPos1Stall			,  7,	"Number of clocks stalled due to VS pos buf space in SH1.")
ENUM_VALUE_SpiPerfCounter(VsCrawlerStall		,  8,	"Number of clocks VS event/wave order fifo is full")
ENUM_VALUE_SpiPerfCounter(VsEventWave			,  9,	"Number of VS events and waves")
ENUM_VALUE_SpiPerfCounter(VsWave				, 10,	"Number of VS stage waves launched.")
ENUM_VALUE_SpiPerfCounter(VsPersUpdFull0		, 11,	"Number of clks VS persistent state update fifo0 is full.")
ENUM_VALUE_SpiPerfCounter(VsPersUpdFull1		, 12,	"Number of clks VS persistent state update fifo1 is full.")
ENUM_VALUE_SpiPerfCounter(VsLateAllocFull		, 13,	"Number of clks VS late alloc fifo is full.")
ENUM_VALUE_SpiPerfCounter(VsFirstSubgrp			, 14,	"Number of first of subgroup VS waves")
ENUM_VALUE_SpiPerfCounter(VsLastSubgrp			, 15,	"Number of last of subgroup VS waves")
ENUM_VALUE_SpiPerfCounter(GsWindowValid			, 16,	"Clock count enabled by perfcounter_start event for GS stage.")
ENUM_VALUE_SpiPerfCounter(GsBusy				, 17,	"Number of clocks with outstanding GS waves (SPI or SH).")
ENUM_VALUE_SpiPerfCounter(GsCrawlerStall		, 18,	"Number of clocks GS event/wave order fifo is full")
ENUM_VALUE_SpiPerfCounter(GsEventWave			, 19,	"Number of GS events and waves")
ENUM_VALUE_SpiPerfCounter(GsWave				, 20,	"Number of GS stage waves launched.")
ENUM_VALUE_SpiPerfCounter(GsPersUpdFull0		, 21,	"Number of clks GS persistent state update fifo0 is full.")
ENUM_VALUE_SpiPerfCounter(GsPersUpdFull1		, 22,	"Number of clks GS persistent state update fifo1 is full.")
ENUM_VALUE_SpiPerfCounter(GsFirstSubgrp			, 23,	"Number of first of subgroup GS waves")
ENUM_VALUE_SpiPerfCounter(GsLastSubgrp			, 24,	"Number of last of subgroup GS waves")
ENUM_VALUE_SpiPerfCounter(EsWindowValid			, 25,	"Clock count enabled by perfcounter_start event for ES stage.")
ENUM_VALUE_SpiPerfCounter(EsBusy				, 26,	"Number of clocks with outstanding ES waves (SPI or SH).")
ENUM_VALUE_SpiPerfCounter(EsCrawlerStall		, 27,	"Number of clocks ES event/wave order fifo is full")
ENUM_VALUE_SpiPerfCounter(EsFirstWave			, 28,	"Number of ES_IS_DS first waves")
ENUM_VALUE_SpiPerfCounter(EsLastWave			, 29,	"Number of ES_IS_DS last waves")
ENUM_VALUE_SpiPerfCounter(EsLshsDealloc			, 30,	"Number of ES_IS_DS lds dealloc waves")
ENUM_VALUE_SpiPerfCounter(EsEventWave			, 31,	"Number of ES events and waves")
ENUM_VALUE_SpiPerfCounter(EsWave				, 32,	"Number of ES stage waves launched.")
ENUM_VALUE_SpiPerfCounter(EsPersUpdFull0		, 33,	"Number of clks ES persistent state update fifo0 is full.")
ENUM_VALUE_SpiPerfCounter(EsPersUpdFull1		, 34,	"Number of clks ES persistent state update fifo1 is full.")
ENUM_VALUE_SpiPerfCounter(EsFirstSubgrp			, 35,	"Number of first of subgroup ES waves")
ENUM_VALUE_SpiPerfCounter(EsLastSubgrp			, 36,	"Number of last of subgroup ES waves")
ENUM_VALUE_SpiPerfCounter(HsWindowValid			, 37,	"Clock count enabled by perfcounter_start event for HS stage.")
ENUM_VALUE_SpiPerfCounter(HsBusy				, 38,	"Number of clocks with outstanding HS waves (SPI or SH).")
ENUM_VALUE_SpiPerfCounter(HsCrawlerStall		, 39,	"Number of clocks HS event/wave order fifo is full")
ENUM_VALUE_SpiPerfCounter(HsFirstWave			, 40,	"Number of first HS waves")
ENUM_VALUE_SpiPerfCounter(HsLastWave			, 41,	"Number of last HS waves")
ENUM_VALUE_SpiPerfCounter(HsLshsDealloc			, 42,	"Number of offchip LDS dealloc HS waves")
ENUM_VALUE_SpiPerfCounter(HsEventWave			, 43,	"Number of HS events and waves")
ENUM_VALUE_SpiPerfCounter(HsWave				, 44,	"Number of HS stage waves launched.")
ENUM_VALUE_SpiPerfCounter(HsPersUpdFull0		, 45,	"Number of clks HS persistent state update fifo0 is full.")
ENUM_VALUE_SpiPerfCounter(HsPersUpdFull1		, 46,	"Number of clks HS persistent state update fifo1 is full.")
ENUM_VALUE_SpiPerfCounter(LsWindowValid			, 47,	"Clock count enabled by perfcounter_start event for LS stage.")
ENUM_VALUE_SpiPerfCounter(LsBusy				, 48,	"Number of clocks with outstanding LS waves (SPI or SH).")
ENUM_VALUE_SpiPerfCounter(LsCrawlerStall		, 49,	"Number of clocks LS event/wave order fifo is full")
ENUM_VALUE_SpiPerfCounter(LsFirstWave			, 50,	"Number of first LS waves")
ENUM_VALUE_SpiPerfCounter(LsLastWave			, 51,	"Number of last LS waves")
ENUM_VALUE_SpiPerfCounter(OffchipLdsStallLs		, 52,	"Number of clocks LS is stalled due to offchip LDS")
ENUM_VALUE_SpiPerfCounter(LsEventWave			, 53,	"Number of LS events and waves")
ENUM_VALUE_SpiPerfCounter(LsWave				, 54,	"Number of LS stage waves launched.")
ENUM_VALUE_SpiPerfCounter(LsPersUpdFull0		, 55,	"Number of clks LS persistent state update fifo0 is full.")
ENUM_VALUE_SpiPerfCounter(LsPersUpdFull1		, 56,	"Number of clks LS persistent state update fifo1 is full.")
ENUM_VALUE_SpiPerfCounter(CsgWindowValid		, 57,	"Clock count enabled by perfcounter_start event for graphics pipe CS stage.")
ENUM_VALUE_SpiPerfCounter(CsgBusy				, 58,	"Number of clocks with outstanding graphics pipe CS waves (SPI or SH).")
ENUM_VALUE_SpiPerfCounter(CsgNumThreadgroups	, 59,	"Number of graphics pipe CS threadgroups launched")
ENUM_VALUE_SpiPerfCounter(CsgCrawlerStall		, 60,	"Number of clocks graphics pipe CS event/wave order fifo is full")
ENUM_VALUE_SpiPerfCounter(CsgEventWave			, 61,	"Number of graphics pipe CS events and waves")
ENUM_VALUE_SpiPerfCounter(CsgWave				, 62,	"Number of graphics pipe CS waves launched.")
ENUM_VALUE_SpiPerfCounter(CsnWindowValid		, 63,	"Clock count enabled by perfcounter_start event for compute pipe CS stage.")
ENUM_VALUE_SpiPerfCounter(CsnBusy				, 64,	"Number of clocks with outstanding compute pipe CS waves (SPI or SH).")
ENUM_VALUE_SpiPerfCounter(CsnNumThreadgroups	, 65,	"Number of compute pipe CS threadgroups launched")
ENUM_VALUE_SpiPerfCounter(CsnCrawlerStall		, 66,	"Number of clocks compute pipe CS event/wave order fifo is full")
ENUM_VALUE_SpiPerfCounter(CsnEventWave			, 67,	"Number of compute pipe CS events and waves")
ENUM_VALUE_SpiPerfCounter(CsnWave				, 68,	"Number of compute pipe CS waves launched.")
ENUM_VALUE_SpiPerfCounter(PsCtlWindowValid		, 69,	"Clock count enabled by perfcounter_start event for PS stage.")
ENUM_VALUE_SpiPerfCounter(PsCtlBusy				, 70,	"Number of clocks with outstanding PS waves (SPI or SH).")
ENUM_VALUE_SpiPerfCounter(PsCtlActive			, 71,	"Number of clks ptr_buff is processing PS waves.")
ENUM_VALUE_SpiPerfCounter(PsCtlDeallocBin0		, 72,	"Count parameter cache deallocs for SE matching bin0 range")
ENUM_VALUE_SpiPerfCounter(PsCtlFposBin1Stall	, 73,	"Number of clks stalled waiting for a VS done from SE matching bin1")
ENUM_VALUE_SpiPerfCounter(PsCtlEventWave		, 74,	"Number of PS events and waves")
ENUM_VALUE_SpiPerfCounter(PsCtlWave				, 75,	"Number of PS waves launched. Note that this counter appears to incorrectly only count half of all PS waves which are launched, approximately.")
ENUM_VALUE_SpiPerfCounter(PsCtlOptWave			, 76,	"Number of PS waves with center+centroid+bc_optimize")
ENUM_VALUE_SpiPerfCounter(PsCtlPassBin0			, 77,	"Count PS waves with bin0 pc reads / attr, range is 1-16.")
ENUM_VALUE_SpiPerfCounter(PsCtlPassBin1			, 78,	"Count PS waves with bin1 pc reads / attr, range is 1-16.")
ENUM_VALUE_SpiPerfCounter(PsCtlFposBin2			, 79,	"Count fpos for SE matching bin2 range")
ENUM_VALUE_SpiPerfCounter(PsCtlPrimBin0			, 80,	"Count PS waves with bin0 prims, range is 1-16.")
ENUM_VALUE_SpiPerfCounter(PsCtlPrimBin1			, 81,	"Count PS waves with bin1 prims, range is 1-16.")
ENUM_VALUE_SpiPerfCounter(PsCtlCnfBin2			, 82,	"Count PS waves with bin2 conflicts, range is 0-15 but max is 8.")
ENUM_VALUE_SpiPerfCounter(PsCtlCnfBin3			, 83,	"Count PS waves with bin3 conflicts, range is 0-15 but max is 8.")
ENUM_VALUE_SpiPerfCounter(PsCtlCrawlerStall		, 84,	"Number of clocks PS event/wave order fifo is full")
ENUM_VALUE_SpiPerfCounter(PsCtlLdsResFull		, 85,	"Number of clks PS per-wavefront storage is full")
ENUM_VALUE_SpiPerfCounter(PsPersUpdFull0		, 86,	"Number of clks PS persistent state update fifo0 is full")
ENUM_VALUE_SpiPerfCounter(PsPersUpdFull1		, 87,	"Number of clks PS persistent state update fifo1 is full")
ENUM_VALUE_SpiPerfCounter(PixAllocPendCnt		, 88,	"Sum of number of pixel alloc requests pending per clk")
ENUM_VALUE_SpiPerfCounter(PixAllocScbStall		, 89,	"Number of clks pix alloc stalled due to color scoreboard.")
ENUM_VALUE_SpiPerfCounter(PixAllocDb0Stall		, 90,	"Number of clks pix alloc stalled due to DB0 color buffer.")
ENUM_VALUE_SpiPerfCounter(PixAllocDb1Stall		, 91,	"Number of clks pix alloc stalled due to DB1 color buffer.")
ENUM_VALUE_SpiPerfCounter(PixAllocDb2Stall		, 92,	"Number of clks pix alloc stalled due to DB2 color buffer.")
ENUM_VALUE_SpiPerfCounter(PixAllocDb3Stall		, 93,	"Number of clks pix alloc stalled due to DB3 color buffer.")
ENUM_VALUE_SpiPerfCounter(Lds0PcValid			, 94,	"Number of parameter cache reads sent to PC from SH0. Each read may return one or two parameter values, depending on available data and parameter cache bank conflicts. The maximum rate is one read per cycle from each SPI unit. PlayStation(R)4 hardware has only one SH unit containing one SPI unit in each of the two SE units.")
ENUM_VALUE_SpiPerfCounter(Lds1PcValid			, 95,	"Number of param cache reads sent to PC from SH1.")
ENUM_VALUE_SpiPerfCounter(RaPipeReqBin2			, 96,	"Arb cycles with bin2 mqcs pipe_arb req =sum(csprobe0, csproben)")
ENUM_VALUE_SpiPerfCounter(RaTaskReqBin3			, 97,	"Arb cycles with bin3 requests =sum(mqcs0, mqcsn) + dxcs +sum(gfx)")
ENUM_VALUE_SpiPerfCounter(RaWrCtlFull			, 98,	"Arb cycles where RA is stalled due to wave launch fifo_full.")
ENUM_VALUE_SpiPerfCounter(RaReqNoAlloc			, 99,	"Arb cycles with requests but no allocation.")
ENUM_VALUE_SpiPerfCounter(RaReqNoAllocPs		,100,	"Arb cycles with PS req and no PS alloc.")
ENUM_VALUE_SpiPerfCounter(RaReqNoAllocVs		,101,	"Arb cycles with VS req and no VS alloc.")
ENUM_VALUE_SpiPerfCounter(RaReqNoAllocGs		,102,	"Arb cycles with GS req and no GS alloc.")
ENUM_VALUE_SpiPerfCounter(RaReqNoAllocEs		,103,	"Arb cycles with ES req and no ES alloc.")
ENUM_VALUE_SpiPerfCounter(RaReqNoAllocHs		,104,	"Arb cycles with HS req and no HS alloc.")
ENUM_VALUE_SpiPerfCounter(RaReqNoAllocLs		,105,	"Arb cycles with LS req and no LS alloc.")
ENUM_VALUE_SpiPerfCounter(RaReqNoAllocCsg		,106,	"Arb cycles with graphics pipe CS req and no graphics pipe CS alloc.")
ENUM_VALUE_SpiPerfCounter(RaReqNoAllocCsn		,107,	"Arb cycles with compute pipe CS req and no compute pipe CS alloc.")
ENUM_VALUE_SpiPerfCounter(RaResStallPs			,108,	"Arb cycles with PS req and no PS fits.")
ENUM_VALUE_SpiPerfCounter(RaResStallVs			,109,	"Arb cycles with VS req and no VS fits.")
ENUM_VALUE_SpiPerfCounter(RaResStallGs			,110,	"Arb cycles with GS req and no GS fits.")
ENUM_VALUE_SpiPerfCounter(RaResStallEs			,111,	"Arb cycles with ES req and no ES fits.")
ENUM_VALUE_SpiPerfCounter(RaResStallHs			,112,	"Arb cycles with HS req and no HS fits.")
ENUM_VALUE_SpiPerfCounter(RaResStallLs			,113,	"Arb cycles with LS req and no LS fits.")
ENUM_VALUE_SpiPerfCounter(RaResStallCsg			,114,	"Arb cycles with graphics pipe CS req and no graphics pipe CS fits.")
ENUM_VALUE_SpiPerfCounter(RaResStallCsn			,115,	"Arb cycles with compute pipe CS req and no compute pipe CS fits.")
ENUM_VALUE_SpiPerfCounter(RaTmpStallPs			,116,	"Cycles where PS wants to req but does not fit in temp space.")
ENUM_VALUE_SpiPerfCounter(RaTmpStallVs			,117,	"Cycles where VS wants to req but does not fit in temp space.")
ENUM_VALUE_SpiPerfCounter(RaTmpStallGs			,118,	"Cycles where GS wants to req but does not fit in temp space.")
ENUM_VALUE_SpiPerfCounter(RaTmpStallEs			,119,	"Cycles where ES wants to req but does not fit in temp space.")
ENUM_VALUE_SpiPerfCounter(RaTmpStallHs			,120,	"Cycles where HS wants to req but does not fit in temp space.")
ENUM_VALUE_SpiPerfCounter(RaTmpStallLs			,121,	"Cycles where LS wants to req but does not fit in temp space.")
ENUM_VALUE_SpiPerfCounter(RaTmpStallCsg			,122,	"Cycles where graphics pipe CS wants to req but does not fit in temp space.")
ENUM_VALUE_SpiPerfCounter(RaTmpStallCsn			,123,	"Cycles where compute pipe CS wants to req but does not fit in temp space.")
ENUM_VALUE_SpiPerfCounter(RaWaveSimdFullPs		,124,	"Sum of SIMD where WAVE resource full when !ps_fits.")
ENUM_VALUE_SpiPerfCounter(RaWaveSimdFullVs		,125,	"Sum of SIMD where WAVE resource full when !vs_fits.")
ENUM_VALUE_SpiPerfCounter(RaWaveSimdFullGs		,126,	"Sum of SIMD where WAVE resource full when !gs_fits.")
ENUM_VALUE_SpiPerfCounter(RaWaveSimdFullEs		,127,	"Sum of SIMD where WAVE resource full when !es_fits.")
ENUM_VALUE_SpiPerfCounter(RaWaveSimdFullHs		,128,	"Sum of SIMD where WAVE can't take HS wave when !fits.")
ENUM_VALUE_SpiPerfCounter(RaWaveSimdFullLs		,129,	"Sum of SIMD where WAVE resource full when !ls_fits.")
ENUM_VALUE_SpiPerfCounter(RaWaveSimdFullCsg		,130,	"Sum of SIMD where WAVE can't take graphics pipe CS wave when !fits.")
ENUM_VALUE_SpiPerfCounter(RaWaveSimdFullCsn		,131,	"Sum of SIMD where WAVE can't take compute pipe CS wave when !fits.")
ENUM_VALUE_SpiPerfCounter(RaVgprSimdFullPs		,132,	"Sum of SIMD where VGPR can't take PS wave when !fits.")
ENUM_VALUE_SpiPerfCounter(RaVgprSimdFullVs		,133,	"Sum of SIMD where VGPR can't take VS wave when !fits.")
ENUM_VALUE_SpiPerfCounter(RaVgprSimdFullGs		,134,	"Sum of SIMD where VGPR can't take GS wave when !fits.")
ENUM_VALUE_SpiPerfCounter(RaVgprSimdFullEs		,135,	"Sum of SIMD where VGPR can't take ES wave when !fits.")
ENUM_VALUE_SpiPerfCounter(RaVgprSimdFullHs		,136,	"Sum of SIMD where VGPR can't take HS wave when !fits.")
ENUM_VALUE_SpiPerfCounter(RaVgprSimdFullLs		,137,	"Sum of SIMD where VGPR can't take LS wave when !fits.")
ENUM_VALUE_SpiPerfCounter(RaVgprSimdFullCsg		,138,	"Sum of SIMD where VGPR can't take graphics pipe CS wave when !fits.")
ENUM_VALUE_SpiPerfCounter(RaVgprSimdFullCsn		,139,	"Sum of SIMD where VGPR can't take compute pipe CS wave when !fits.")
ENUM_VALUE_SpiPerfCounter(RaSgprSimdFullPs		,140,	"Sum of SIMD where SGPR can't take PS wave when !fits.")
ENUM_VALUE_SpiPerfCounter(RaSgprSimdFullVs		,141,	"Sum of SIMD where SGPR can't take VS wave when !fits.")
ENUM_VALUE_SpiPerfCounter(RaSgprSimdFullGs		,142,	"Sum of SIMD where SGPR can't take GS wave when !fits.")
ENUM_VALUE_SpiPerfCounter(RaSgprSimdFullEs		,143,	"Sum of SIMD where SGPR can't take ES wave when !fits.")
ENUM_VALUE_SpiPerfCounter(RaSgprSimdFullHs		,144,	"Sum of SIMD where SGPR can't take HS wave when !fits.")
ENUM_VALUE_SpiPerfCounter(RaSgprSimdFullLs		,145,	"Sum of SIMD where SGPR can't take LS wave when !fits.")
ENUM_VALUE_SpiPerfCounter(RaSgprSimdFullCsg		,146,	"Sum of SIMD where SGPR can't take graphics pipe CS wave when !fits.")
ENUM_VALUE_SpiPerfCounter(RaSgprSimdFullCsn		,147,	"Sum of SIMD where SGPR can't take compute pipe CS wave when !fits.")
ENUM_VALUE_SpiPerfCounter(RaLdsCuFullPs			,148,	"Sum of CU where LDS can't take PS wave when !fits.")
ENUM_VALUE_SpiPerfCounter(RaLdsCuFullLs			,149,	"Sum of CU where LDS can't take LS wave when !fits.")
ENUM_VALUE_SpiPerfCounter(RaLdsCuFullEs			,150,	"Sum of CU where LDS can't take ES wave when !fits.")
ENUM_VALUE_SpiPerfCounter(RaLdsCuFullCsg		,151,	"Sum of CU where LDS can't take graphics pipe CS wave when !fits.")
ENUM_VALUE_SpiPerfCounter(RaLdsCuFullCsn		,152,	"Sum of CU where LDS can't take compute pipe CS wave when !fits.")
ENUM_VALUE_SpiPerfCounter(RaBarCuFullHs			,153,	"Sum of CU where BARRIER can't take HS wave when !fits.")
ENUM_VALUE_SpiPerfCounter(RaBarCuFullCsg		,154,	"Sum of CU where BARRIER can't take graphics pipe CS wave when !fits.")
ENUM_VALUE_SpiPerfCounter(RaBarCuFullCsn		,155,	"Sum of CU where BARRIER can't take compute pipe CS wave when !fits.")
ENUM_VALUE_SpiPerfCounter(RaBulkyCuFullCsg		,156,	"Sum of CU where BULKY can't take graphics pipe CS wave when !fits.")
ENUM_VALUE_SpiPerfCounter(RaBulkyCuFullCsn		,157,	"Sum of CU where BULKY can't take compute pipe CS wave when !fits.")
ENUM_VALUE_SpiPerfCounter(RaTglimCuFullCsg		,158,	"Cycles where graphics pipe CS wants to req but all CU are at tg_limit")
ENUM_VALUE_SpiPerfCounter(RaTglimCuFullCsn		,159,	"Cycles where compute pipe CS wants to req but all CU are at tg_limit")
ENUM_VALUE_SpiPerfCounter(RaWvlimStallPs		,160,	"Number of clocks PS is stalled due to WAVE LIMIT.")
ENUM_VALUE_SpiPerfCounter(RaWvlimStallVs		,161,	"Number of clocks VS is stalled due to WAVE LIMIT.")
ENUM_VALUE_SpiPerfCounter(RaWvlimStallGs		,162,	"Number of clocks GS is stalled due to WAVE LIMIT.")
ENUM_VALUE_SpiPerfCounter(RaWvlimStallEs		,163,	"Number of clocks ES is stalled due to WAVE LIMIT.")
ENUM_VALUE_SpiPerfCounter(RaWvlimStallHs		,164,	"Number of clocks HS is stalled due to WAVE LIMIT.")
ENUM_VALUE_SpiPerfCounter(RaWvlimStallLs		,165,	"Number of clocks LS is stalled due to WAVE LIMIT.")
ENUM_VALUE_SpiPerfCounter(RaWvlimStallCsg		,166,	"Number of clocks graphics pipe CS is stalled due to WAVE LIMIT.")
ENUM_VALUE_SpiPerfCounter(RaWvlimStallCsn		,167,	"Number of clocks compute pipe CS is stalled due to WAVE LIMIT.")
ENUM_VALUE_SpiPerfCounter(RaPsLock				,168,	"Arb cycles PS has a CU locked when !fits and active_cnt < threshold.")
ENUM_VALUE_SpiPerfCounter(RaVsLock				,169,	"Arb cycles VS has a CU locked when !fits and active_cnt < threshold.")
ENUM_VALUE_SpiPerfCounter(RaGsLock				,170,	"Arb cycles GS has a CU locked when !fits and active_cnt < threshold.")
ENUM_VALUE_SpiPerfCounter(RaEsLock				,171,	"Arb cycles ES has a CU locked when !fits and active_cnt < threshold.")
ENUM_VALUE_SpiPerfCounter(RaHsLock				,172,	"Arb cycles HS has a CU locked when !fits and active_cnt < threshold.")
ENUM_VALUE_SpiPerfCounter(RaLsLock				,173,	"Arb cycles LS has a CU locked when !fits and active_cnt < threshold.")
ENUM_VALUE_SpiPerfCounter(RaCsgLock				,174,	"Arb cycles graphics pipe CS has a CU locked when !fits and active_cnt < threshold.")
ENUM_VALUE_SpiPerfCounter(RaCsnLock				,175,	"Arb cycles compute pipe CS has a CU locked when !fits and active_cnt < threshold.")
ENUM_VALUE_SpiPerfCounter(RaRsvUpd				,176,	"Cycles spent doing updates for reservation changes")
ENUM_VALUE_SpiPerfCounter(ExpArbColCnt			,177,	"Sum of number of color exp requests pending each clk")
ENUM_VALUE_SpiPerfCounter(ExpArbParCnt			,178,	"Sum of number of parameter exp requests pending each clk")
ENUM_VALUE_SpiPerfCounter(ExpArbPosCnt			,179,	"Sum of number of position exp requests pending each clk")
ENUM_VALUE_SpiPerfCounter(ExpArbGdsCnt			,180,	"Sum of number of gds exp requests pending each clk")
ENUM_VALUE_SpiPerfCounter(ClkgateBusyStall		,181,	"Number of clocks with SPI busy and not all_clocks_on")
ENUM_VALUE_SpiPerfCounter(ClkgateActiveStall	,182,	"Number of clocks with spim_active and not all_clocks_on.")
ENUM_VALUE_SpiPerfCounter(ClkgateAllClocksOn	,183,	"Number of clocks with all_clocks_on.")
ENUM_VALUE_SpiPerfCounter(ClkgateCgttDynOn		,184,	"Number of clocks with SPI cgtt dyn clk on.")
ENUM_VALUE_SpiPerfCounter(ClkgateCgttRegOn		,185,	"Number of clocks with SPI cgtt reg clk on.")

#ifndef ENUM_VALUE_SxPerfCounter
#define ENUM_VALUE_SxPerfCounter(sym, val, desc_string)
#endif
ENUM_VALUE_SxPerfCounter(PaIdleCycles	,  0,	"Number of cycles where PA was idle waiting to accept vectors from SX")
ENUM_VALUE_SxPerfCounter(PaReq			,  1,	"Number of PA requests received")
ENUM_VALUE_SxPerfCounter(PaPos			,  2,	"Number of positions sent to the PA")
ENUM_VALUE_SxPerfCounter(Clock			,  3,	"Number of clocks where SX was busy in any way shape or form")
ENUM_VALUE_SxPerfCounter(GateEn1		,  4,	"Number of clocks for register accesses")
ENUM_VALUE_SxPerfCounter(GateEn2		,  5,	"Number of clocks for bus destination sort module")
ENUM_VALUE_SxPerfCounter(GateEn3		,  6,	"Number of clocks for color exports")
ENUM_VALUE_SxPerfCounter(GateEn4		,  7,	"Number of clocks for position exports")
ENUM_VALUE_SxPerfCounter(ShPosStarve	,  8,	"Number of clocks SX is starved for Position data")
ENUM_VALUE_SxPerfCounter(ShColorStarve	,  9,	"Number of clocks SX is starved for Color data")
ENUM_VALUE_SxPerfCounter(ShPosStall		, 10,	"Number of clocks SX is being stalled by PA")
ENUM_VALUE_SxPerfCounter(ShColorStall	, 11,	"Number of clocks SX is being stalled by at least one DB")
ENUM_VALUE_SxPerfCounter(Db0Pixels		, 12,	"Number of pixels sent to the DB0")
ENUM_VALUE_SxPerfCounter(Db0HalfQuads	, 13,	"Number of half quads sent to the DB0")
ENUM_VALUE_SxPerfCounter(Db0PixelStall	, 14,	"Number of cycles where pixel traffic is stalled due to the DB0")
ENUM_VALUE_SxPerfCounter(Db0PixelIdle	, 15,	"Number of cycles where the pixel traffic was idle to DB0")
ENUM_VALUE_SxPerfCounter(Db0PredPixels	, 16,	"Number of non predicated pixels sent to the DB0")
ENUM_VALUE_SxPerfCounter(Db1Pixels		, 17,	"Number of pixels sent to the DB1")
ENUM_VALUE_SxPerfCounter(Db1HalfQuads	, 18,	"Number of half quads sent to the DB1")
ENUM_VALUE_SxPerfCounter(Db1PixelStall	, 19,	"Number of cycles where pixel traffic is stalled due to the DB1")
ENUM_VALUE_SxPerfCounter(Db1PixelIdle	, 20,	"Number of cycles where the pixel traffic was idle to DB1")
ENUM_VALUE_SxPerfCounter(Db1PredPixels	, 21,	"Number of non predicated pixels sent to the DB1")
ENUM_VALUE_SxPerfCounter(Db2Pixels		, 22,	"Number of pixels sent to the DB2")
ENUM_VALUE_SxPerfCounter(Db2HalfQuads	, 23,	"Number of half quads sent to the DB2")
ENUM_VALUE_SxPerfCounter(Db2PixelStall	, 24,	"Number of cycles where pixel traffic is stalled due to the DB2")
ENUM_VALUE_SxPerfCounter(Db2PixelIdle	, 25,	"Number of cycles where the pixel traffic was idle to DB2")
ENUM_VALUE_SxPerfCounter(Db2PredPixels	, 26,	"Number of non predicated pixels sent to the DB2")
ENUM_VALUE_SxPerfCounter(Db3Pixels		, 27,	"Number of pixels sent to the DB3")
ENUM_VALUE_SxPerfCounter(Db3HalfQuads	, 28,	"Number of half quads sent to the DB3")
ENUM_VALUE_SxPerfCounter(Db3PixelStall	, 29,	"Number of cycles where pixel traffic is stalled due to the DB3")
ENUM_VALUE_SxPerfCounter(Db3PixelIdle	, 30,	"Number of cycles where the pixel traffic was idle to DB3")
ENUM_VALUE_SxPerfCounter(Db3PredPixels	, 31,	"Number of non predicated pixels sent to the DB3")

#ifndef ENUM_VALUE_CbPerfCounter
#define ENUM_VALUE_CbPerfCounter(sym, val, desc_string)
#endif
ENUM_VALUE_CbPerfCounter(None									,  0,	"Count nothing")
ENUM_VALUE_CbPerfCounter(Busy									,  1,	"Number of busy cycles")
ENUM_VALUE_CbPerfCounter(CoreSclkVld							,  2,	"Number of cycles that the core clock is enabled.")
ENUM_VALUE_CbPerfCounter(RegSclk0Vld							,  3,	"Number of cycles that the register clock is enabled. (Non-harvestable)")
ENUM_VALUE_CbPerfCounter(RegSclk1Vld							,  4,	"Number of cycles that the register clock is enabled. (harvestable)")
ENUM_VALUE_CbPerfCounter(DrawnQuad								,  5,	"This is the number of drawn quads. Use kCbPerfCounterDrawnBusy as denominator to get per clock rates. Filtering using CB_PERFCOUNTER_FILTER fields has an effect in this mode.")
ENUM_VALUE_CbPerfCounter(DrawnPixel								,  6,	"This is the number of drawn pixels. Use kCbPerfCounterDrawnBusy as denominator to get per clock rates. Filtering using CB_PERFCOUNTER_FILTER fields has an effect in this mode.")
ENUM_VALUE_CbPerfCounter(DrawnQuadFragment						,  7,	"This is the number of drawn quad fragments. Use kCbPerfCounterDrawnBusy as denominator to get per clock rates. Filtering using CB_PERFCOUNTER_FILTER fields has an effect in this mode.")
ENUM_VALUE_CbPerfCounter(DrawnTile								,  8,	"This is the number of drawn tiles. Use kCbPerfCounterDrawnBusy as denominator to get per clock rates. Filtering using CB_PERFCOUNTER_FILTER fields has an effect in this mode. This counter is slightly broken in that it actually counts the number of tiles reaching fragop.  Some of these tiles may be empty when there is fast clear or compression.")
ENUM_VALUE_CbPerfCounter(DbCbTileValidReady						,  9,	"Number of cycles the DB to CB tile interface is valid and ready.  This is measured after the input fifo. It counts tiles + events. Subtract kCbPerfCounterEvent to get the count of tiles")
ENUM_VALUE_CbPerfCounter(DbCbTileValidReadyb					, 10,	"Number of cycles the DB to CB tile interface is valid and not ready.  This is measured after the input fifo.")
ENUM_VALUE_CbPerfCounter(DbCbTileValidbReady					, 11,	"Number of cycles the DB to CB tile interface is not valid and ready.  This is measured after the input fifo.")
ENUM_VALUE_CbPerfCounter(DbCbTileValidbReadyb					, 12,	"Number of cycles the DB to CB tile interface is not valid and not ready.  This is measured after the input fifo.")
ENUM_VALUE_CbPerfCounter(CmFcTileValidReady						, 13,	"Number of cycles the cmask to fmask tile interface is valid and ready. This interface counts tile times enabled render targets plus events. This will be different from kCbPerfCounterDbCbTileValidReady because each tile is replicated by the number of enabled render targets (events are not)")
ENUM_VALUE_CbPerfCounter(CmFcTileValidReadyb					, 14,	"Number of cycles the cmask to fmask tile interface is valid and not ready")
ENUM_VALUE_CbPerfCounter(CmFcTileValidbReady					, 15,	"Number of cycles the cmask to fmask tile interface is not valid and ready")
ENUM_VALUE_CbPerfCounter(CmFcTileValidbReadyb					, 16,	"Number of cycles the cmask to fmask tile interface is not valid and not ready")
ENUM_VALUE_CbPerfCounter(MergeTileOnlyValidReady				, 17,	"Number of cycles the Merge tile interface has a valid tile-only tile and is ready.  Measured at tile input to merge.")
ENUM_VALUE_CbPerfCounter(MergeTileOnlyValidReadyb				, 18,	"Number of cycles the Merge tile interface has a valid tile-only tile and is not ready.  Measured at tile input to merge.")
ENUM_VALUE_CbPerfCounter(DbCbLquadValidReady					, 19,	"Number of cycles the DB to CB lquad interface is valid and ready.  This is measured after the input fifo. This is counting lquad which for fast modes are the same as quads but for slow mode are twice the number of quads. To get the number of quads on this interface use: kCbPerfCounterDbCbLquadValidReady - kCbPerfCounterLquadFormatIsExport32Abgr/2")
ENUM_VALUE_CbPerfCounter(DbCbLquadValidReadyb					, 20,	"Number of cycles the DB to CB lquad interface is valid and not ready.  This is measured after the input fifo")
ENUM_VALUE_CbPerfCounter(DbCbLquadValidbReady					, 21,	"Number of cycles the DB to CB lquad interface is not valid and ready.  This is measured after the input fifo")
ENUM_VALUE_CbPerfCounter(DbCbLquadValidbReadyb					, 22,	"Number of cycles the DB to CB lquad interface is not valid and not ready.  This is measured after the input fifo")
ENUM_VALUE_CbPerfCounter(LquadNoTile							, 23,	"Number of cycles that a quad has arrived over the lquad interface but the corresponding tile has not arrived yet.")
ENUM_VALUE_CbPerfCounter(LquadFormatIsExport32R					, 24,	"Number of transactions/quads on the DB_CB_lquad interface that use the EXPORT_32_R (FAST MODE) format. Sum of all kCbPerfCounterLquadFormatIsExport* should match kCbPerfCounterDbCbLquadValidReady")
ENUM_VALUE_CbPerfCounter(LquadFormatIsExport32Ar				, 25,	"Number of transactions/quads on the DB_CB_lquad interface that use the EXPORT_32_AR (FAST MODE) format. Sum of all kCbPerfCounterLquadFormatIsExport* should match kCbPerfCounterDbCbLquadValidReady")
ENUM_VALUE_CbPerfCounter(LquadFormatIsExport32Gr				, 26,	"Number of transactions/quads on the DB_CB_lquad interface that use the EXPORT_32_GR (FAST MODE) format. Sum of all kCbPerfCounterLquadFormatIsExport* should match kCbPerfCounterDbCbLquadValidReady")
ENUM_VALUE_CbPerfCounter(LquadFormatIsExport32Abgr				, 27,	"Number of transactions on the DB_CB_lquad interface that use the EXPORT_32_ABGR (SLOW MODE) format. To get the number of quads divide this number by 2. Sum of all kCbPerfCounterLquadFormatIsExport* should match kCbPerfCounterDbCbLquadValidReady")
ENUM_VALUE_CbPerfCounter(LquadFormatIsExportFp16Abgr			, 28,	"Number of transactions/quads on the DB_CB_lquad interface that use the EXPORT_FP16_ABGR (FAST MODE) format. Sum of all kCbPerfCounterLquadFormatIsExport* should match kCbPerfCounterDbCbLquadValidReady")
ENUM_VALUE_CbPerfCounter(LquadFormatIsExportSigned16Abgr		, 29,	"Number of transactions/quads on the DB_CB_lquad interface that use the EXPORT_SIGNED16_ABGR (FAST MODE) format. Sum of all kCbPerfCounterLquadFormatIsExport* should match kCbPerfCounterDbCbLquadValidReady")
ENUM_VALUE_CbPerfCounter(LquadFormatIsExportUnsigned16Abgr		, 30,	"Number of transactions/quads on the DB_CB_lquad interface that use the EXPORT_UNSIGNED16_ABGR (FAST MODE) format. Sum of all kCbPerfCounterLquadFormatIsExport* should match kCbPerfCounterDbCbLquadValidReady")
ENUM_VALUE_CbPerfCounter(QuadKilledByExtraPixelExport			, 31,	"Number of quads that were killed because they were an extra pixel export from the shader based on CB_TARGET_MASK, CB_SHADER_MASK settings.")
ENUM_VALUE_CbPerfCounter(QuadKilledByColorInvalid				, 32,	"Number of quads that was killed because their render target had CB_COLOR_INFO.FORMAT set to invalid.")
ENUM_VALUE_CbPerfCounter(QuadKilledByNullTargetShaderMask		, 33,	"Number of quads that were killed because of null (target&shader) mask.")
ENUM_VALUE_CbPerfCounter(QuadKilledByNullSampleMask				, 34,	"Number of quads that were killed because of a null sample mask.")
ENUM_VALUE_CbPerfCounter(QuadKilledByDiscardPixel				, 35,	"Number of quads that were killed because they were blending but enabled optimization to discard all the pixels of the quad. This optimization can be disabled by setting DISABLE_BLEND_OPT_DISCARD_PIXEL.")
ENUM_VALUE_CbPerfCounter(FcClearQuadValidReady					, 36,	"Number of cycles in the fmask logic that the read_latency fifo to the clear interface is valid and ready. This is counting quads + events. The number of quads should match the number of quads on the lquad interface (i.e. kCbPerfCounterDbCbLquadValidReady - kCbPerfCounterLquadFormatIsExport32Abgr/2) minus any quads that are dropped and show up in the perf counters kCbPerfCounterQuadKilledBy*")
ENUM_VALUE_CbPerfCounter(FcClearQuadValidReadyb					, 37,	"Number of cycles in the fmask logic that the read_latency fifo to the clear interface is valid and not ready.")
ENUM_VALUE_CbPerfCounter(FcClearQuadValidbReady					, 38,	"Number of cycles in the fmask logic that the read_latency fifo to the clear interface is not valid and ready.")
ENUM_VALUE_CbPerfCounter(FcClearQuadValidbReadyb				, 39,	"Number of cycles in the fmask logic that the read_latency fifo to the clear interface is not valid and not ready.")
ENUM_VALUE_CbPerfCounter(FopInValidReady						, 40,	"Number of cycles the fragop unit input interface is valid and ready. This is counting quads + events. The number of quads here should match kCbPerfCounterFcClearQuadValidReady plus any quads inserted by the fast_clear_eliminate (fc_clear) block")
ENUM_VALUE_CbPerfCounter(FopInValidReadyb						, 41,	"Number of cycles the fragop unit input interface is valid and not ready")
ENUM_VALUE_CbPerfCounter(FopInValidbReady						, 42,	"Number of cycles the fragop unit input interface is not valid and ready")
ENUM_VALUE_CbPerfCounter(FopInValidbReadyb						, 43,	"Number of cycles the fragop unit input interface is not valid and not ready")
ENUM_VALUE_CbPerfCounter(FcCcQuadfragValidReady					, 44,	"Number of cycles the fmask to color cache interface is valid and ready. This is counting quad fragments + events. The number of quads here should match kCbPerfCounterFopInValidReady times the number of fragments created for each of these quads by the fragop block")
ENUM_VALUE_CbPerfCounter(FcCcQuadfragValidReadyb				, 45,	"Number of cycles the fmask to color cache interface is valid and not ready")
ENUM_VALUE_CbPerfCounter(FcCcQuadfragValidbReady				, 46,	"Number of cycles the fmask to color cache interface is not valid and ready")
ENUM_VALUE_CbPerfCounter(FcCcQuadfragValidbReadyb				, 47,	"Number of cycles the fmask to color cache interface is not valid and not ready")
ENUM_VALUE_CbPerfCounter(CcIbSrFragValidReady					, 48,	"Number of cycles the color cache input block's serializer interface is valid and ready. This is counting quad fragments + events. The number of quads here should match kCbPerfCounterFcCcQuadfragValidReady times the number of cycles needed to handle these quads due to any HW limitations like 32bit floating point blending, linear or linear_aligned array mode etc")
ENUM_VALUE_CbPerfCounter(CcIbSrFragValidReadyb					, 49,	"Number of cycles the color cache input block's serializer two-lookup interface is valid and not ready")
ENUM_VALUE_CbPerfCounter(CcIbSrFragValidbReady					, 50,	"Number of cycles the color cache input block's serializer two-lookup interface is not valid and ready")
ENUM_VALUE_CbPerfCounter(CcIbSrFragValidbReadyb					, 51,	"Number of cycles the color cache input block's serializer to two-lookup interface is not valid and not ready")
ENUM_VALUE_CbPerfCounter(CcIbTbFragValidReady					, 52,	"Number of cycles the color cache input block to tag block interface is valid and ready. This is counting quad fragments + events. The number of quads here should match kCbPerfCounterCcIbSrFragValidReady + kCbPerfCounterTwoProbeQuadFragment.")
ENUM_VALUE_CbPerfCounter(CcIbTbFragValidReadyb					, 53,	"Number of cycles the color cache input block to tag block interface is valid and not ready")
ENUM_VALUE_CbPerfCounter(CcIbTbFragValidbReady					, 54,	"Number of cycles the color cache input block to tag block interface is not valid and ready")
ENUM_VALUE_CbPerfCounter(CcIbTbFragValidbReadyb					, 55,	"Number of cycles the color cache input block to tag block interface is not valid and not ready")
ENUM_VALUE_CbPerfCounter(CcRbBcEvenfragValidReady				, 56,	"Number of cycles the reorder_buffer to blend_control interface (evenfrag) is valid and ready. This is counting quad fragments + events. The number of quads in (kCbPerfCounterCcRbBcEvenfragValidReady + kCbPerfCounterCcRbBcOddfragValidReady) equals quads in kCbPerfCounterCcIbSrFragValidReady as the de-serializer collapses the two cache probe quads back into one. The quads are split into two fifos, evenfifo stores the quads with even 32B address. Events go down both paths")
ENUM_VALUE_CbPerfCounter(CcRbBcEvenfragValidReadyb				, 57,	"Number of cycles the reorder_buffer to blend_control interface (evenfrag) is valid and not ready")
ENUM_VALUE_CbPerfCounter(CcRbBcEvenfragValidbReady				, 58,	"Number of cycles the reorder_buffer to blend_control interface (evenfrag) is not valid and ready")
ENUM_VALUE_CbPerfCounter(CcRbBcEvenfragValidbReadyb				, 59,	"Number of cycles the reorder_buffer to blend_control interface (evenfrag) is not valid and not ready")
ENUM_VALUE_CbPerfCounter(CcRbBcOddfragValidReady				, 60,	"Number of cycles the reorder_buffer to blend_control interface (oddfrag) is valid and ready. This is counting quad fragments + events. The number of quads in (kCbPerfCounterCcRbBcEvenfragValidReady + kCbPerfCounterCcRbBcOddfragValidReady) equals quads in kCbPerfCounterCcIbSrFragValidReady as the de-serializer collapses the two cache probe quads back into one. The quads are split into two fifos, oddfifo stores the quads with odd 32B address. Events go down both paths")
ENUM_VALUE_CbPerfCounter(CcRbBcOddfragValidReadyb				, 61,	"Number of cycles the reorder_buffer to blend_control interface (oddfrag) is valid and not ready")
ENUM_VALUE_CbPerfCounter(CcRbBcOddfragValidbReady				, 62,	"Number of cycles the reorder_buffer to blend_control interface (oddfrag) is not valid and ready")
ENUM_VALUE_CbPerfCounter(CcRbBcOddfragValidbReadyb				, 63,	"Number of cycles the reorder_buffer to blend_control interface (oddfrag) is not valid and not ready")
ENUM_VALUE_CbPerfCounter(CcBcCsFragValid						, 64,	"Number of cycles the blend_control to cache_storage interface is valid. This is counting quad fragments + events. The number of quads here should match kCbPerfCounterCcIbSrFragValidReady")
ENUM_VALUE_CbPerfCounter(CmCacheHit								, 65,	"Number of tile transactions that hit cmask cache (TAG HIT && SECTOR HIT). It is a hit if you hit the tag and a sector in that tag meaning that sector's data is valid. Total probe transactions = incoming tile transactions (in compressed AA mode or single sample with fast clear mode) times render targets = kCbPerfCounterCmCacheHit+kCbPerfCounterCmCacheSectorMiss.")
ENUM_VALUE_CbPerfCounter(CmCacheTagMiss							, 66,	"Number of tile transactions that have cmask cache tag misses (TAG MISS).  A tag miss is when there isn't a tag that matches the input.  Because of sectoring, a tag hit does not imply that the required data is in the cache (i.e TAG HIT && SECTOR MISS).")
ENUM_VALUE_CbPerfCounter(CmCacheSectorMiss						, 67,	"Number of tile transactions that have cmask cache sector miss (TAG MISS || SECTOR MISS).  A sector miss is when the required sector is not in the cache.  Tag misses are included in this count because a sector cannot be in the cache if there is no tag for it. Total transactions that have TAG HIT && SECTOR MISS = kCbPerfCounterCmCacheSectorMiss - kCbPerfCounterCmCacheTagMiss")
ENUM_VALUE_CbPerfCounter(CmCacheReevictionStall					, 68,	"Number of cycles the cmask cache is stalled because it is trying to evict a line that already has a pending evict. This can happen when a cacheline has been written out to memory and waiting for the write ack gets a hit again, eventually becoming dirty and needing to be re-evicted. Since only one eviction per cacheline can be outstanding, the cache is stalled")
ENUM_VALUE_CbPerfCounter(CmCacheEvictNonzeroInflightStall		, 69,	"Number of cycles the cmask cache is stalled because it is trying to evict a line that has a nonzero inflight count. When a cachelines LRU count reaches the scaled eviction point set by CM_CACHE_EVICT_POINT and it is still inflight then this counter get incremented This is usually a sign that the cache is unable to withstand the memory read latency. CM_CACHE_EVICT_POINT can be set to a LOWER val to handle the increased read latency")
ENUM_VALUE_CbPerfCounter(CmCacheReplacePendingEvictStall		, 70,	"Number of cycles the cmask cache is stalled because the line being replaced has a pending evict. This happens when the cacheline chosen for allocation on a miss is still waiting for its write-ack to return from a previous eviction. This is usually a sign that the cache is unable to withstand the memory write latency. CM_CACHE_EVICT_POINT can be set to a HIGHER val to handle the increased write latency")
ENUM_VALUE_CbPerfCounter(CmCacheInflightCounterMaximumStall		, 71,	"Number of cycles the cmask cache is stalled because one of the inflight counters has reached the maximum val.")
ENUM_VALUE_CbPerfCounter(CmCacheReadOutputStall					, 72,	"Number of cycles the cmask cache is stalled because the read request output path is stalled. This can happen due to increased memory read request ask-go latency")
ENUM_VALUE_CbPerfCounter(CmCacheWriteOutputStall				, 73,	"Number of cycles the cmask cache is stalled because the write request output path is stalled. This can happen due to increased memory write request ask-go latency")
ENUM_VALUE_CbPerfCounter(CmCacheAckOutputStall					, 74,	"Number of cycles the cmask cache is stalled because the acknowledge output path is stalled. This can happen if the next stage in the pipeline (cmask cache read latency hiding fifo) is full and stalling the cmask cache so the cache cannot output any transactions.")
ENUM_VALUE_CbPerfCounter(CmCacheStall							, 75,	"Number of cycles the cmask cache is stalled. This is the combined cache stall signal.")
ENUM_VALUE_CbPerfCounter(CmCacheFlush							, 76,	"This is the number of cmask cache flushes.")
ENUM_VALUE_CbPerfCounter(CmCacheTagsFlushed						, 77,	"Number of dirty tags that are flushed (the cmask cache has 32 tags).")
ENUM_VALUE_CbPerfCounter(CmCacheSectorsFlushed					, 78,	"Number of valid sectors (i.e they have valid data) per dirty tags that are flushed (the cmask cache has 1 sector per tag). The valid sectors may be dirty. The total valid non-dirty sectors in flushed out tags = kCbPerfCounterCmCacheSectorsFlushed - kCbPerfCounterCmCacheDirtySectorsFlushed")
ENUM_VALUE_CbPerfCounter(CmCacheDirtySectorsFlushed				, 79,	"Number of dirty sectors per dirty tags that are flushed (the cmask cache has 1 sector per tag).")
ENUM_VALUE_CbPerfCounter(FcCacheHit								, 80,	"Number of tile transactions that hit the fmask cache  (TAG HIT && SECTOR HIT). It is a hit if you hit the tag and a sector in that tag meaning that sector's data is valid. Total probe transactions = incoming tile transactions times render targets = kCbPerfCounterFcCacheHit+kCbPerfCounterFcCacheSectorMiss.")
ENUM_VALUE_CbPerfCounter(FcCacheTagMiss							, 81,	"Number of tile transactions that have fmask cache tag misses (TAG MISS).  A tag miss is when there isn't a tag that matches the input.  Because of sectoring, a tag hit does not imply that the required data is in the cache (i.e TAG HIT && SECTOR MISS).")
ENUM_VALUE_CbPerfCounter(FcCacheSectorMiss						, 82,	"Number of tile transactions that have fmask cache sector miss (TAG MISS || SECTOR MISS).  A sector miss is when the required sector is not in the cache.  Tag misses are included in this count because a sector cannot be in the cache if there is no tag for it. Total transactions that have TAG HIT && SECTOR MISS = kCbPerfCounterFcCacheSectorMiss - kCbPerfCounterFcCacheTagMiss.")
ENUM_VALUE_CbPerfCounter(FcCacheReevictionStall					, 83,	"Number of cycles the fmask cache is stalled because it is trying to evict a line that already has a pending evict. This can happen when a cacheline has been written out to memory and waiting for the write ack gets a hit again, eventually becoming dirty and needing to be re-evicted. Since only one eviction per cacheline can be outstanding, the cache is stalled.")
ENUM_VALUE_CbPerfCounter(FcCacheEvictNonzeroInflightStall		, 84,	"Number of cycles the fmask cache is stalled because it is trying to evict a line that has a nonzero inflight count. When a cachelines LRU count reaches the scaled eviction point set by FC_CACHE_EVICT_POINT and it is still inflight then this counter get incremented This is usually a sign that the cache is unable to withstand the memory read latency. FC_CACHE_EVICT_POINT can be set to a LOWER val to handle the increased read latency.")
ENUM_VALUE_CbPerfCounter(FcCacheReplacePendingEvictStall		, 85,	"Number of cycles the fmask cache is stalled because the line being replaced has a pending evict. This happens when the cacheline chosen for allocation on a miss is still waiting for its write-ack to return from a previous eviction. This is usually a sign that the cache is unable to withstand the memory write latency. FC_CACHE_EVICT_POINT can be set to a HIGHER val to handle the increased write latency.")
ENUM_VALUE_CbPerfCounter(FcCacheInflightCounterMaximumStall		, 86,	"Number of cycles the fmask cache is stalled because one of the inflight counters has reached the maximum val.")
ENUM_VALUE_CbPerfCounter(FcCacheReadOutputStall					, 87,	"Number of cycles the fmask cache is stalled because the read request output path is stalled. This can happen due to increased memory read request ask-go latency")
ENUM_VALUE_CbPerfCounter(FcCacheWriteOutputStall				, 88,	"Number of cycles the fmask cache is stalled because the write request output path is stalled.  This can happen due to increased memory write request ask-go latency")
ENUM_VALUE_CbPerfCounter(FcCacheAckOutputStall					, 89,	"Number of cycles the fmask cache is stalled because the acknowledge output path is stalled. This can happen if the next stage in the pipeline (fmask cache read latency hiding fifo) is full and stalling the fmask cache so the cache cannot output any transactions.")
ENUM_VALUE_CbPerfCounter(FcCacheStall							, 90,	"Number of cycles the fmask cache is stalled. This is the combined cache stall signal.")
ENUM_VALUE_CbPerfCounter(FcCacheFlush							, 91,	"This is the number of fmask cache flushes.")
ENUM_VALUE_CbPerfCounter(FcCacheTagsFlushed						, 92,	"Number of dirty tags that are flushed (the fmask cache has 64 tags).")
ENUM_VALUE_CbPerfCounter(FcCacheSectorsFlushed					, 93,	"Number of valid sectors (i.e they have valid data) per dirty tags that are flushed (the fmask cache has 4 sectors per tag). The valid sectors may be dirty. The total valid non-dirty sectors in flushed out tags = kCbPerfCounterFcCacheSectorsFlushed - kCbPerfCounterFcCacheDirtySectorsFlushed.")
ENUM_VALUE_CbPerfCounter(FcCacheDirtySectorsFlushed				, 94,	"Number of dirty sectors per dirty tags that are flushed (the fmask cache has 4 sectors per tag).")
ENUM_VALUE_CbPerfCounter(CcCacheHit								, 95,	"Number of quad fragment transactions that hit the color cache (TAG HIT && SECTOR HIT). It is a hit if you hit the tag and a sector in that tag meaning that sector's data is valid. Total probe transactions = quads in kCbPerfCounterCcIbTbFragValidReady = kCbPerfCounterCcCacheHit+kCbPerfCounterCcCacheSectorMiss")
ENUM_VALUE_CbPerfCounter(CcCacheTagMiss							, 96,	"Number of quad fragment transactions that have color cache tag misses  (TAG MISS).  A tag miss is when there isn't a tag that matches the input.  Because of sectoring, a tag hit does not imply that the required data is in the cache (i.e TAG HIT && SECTOR MISS).")
ENUM_VALUE_CbPerfCounter(CcCacheSectorMiss						, 97,	"Number of quad fragment transactions that have color cache sector miss (TAG MISS || SECTOR MISS).  A sector miss is when the required sector is not in the cache.  Tag misses are included in this count because a sector cannot be in the cache if there is no tag for it. Total transactions that have TAG HIT && SECTOR MISS = kCbPerfCounterCcCacheSectorMiss - kCbPerfCounterCcCacheTagMiss.")
ENUM_VALUE_CbPerfCounter(CcCacheReevictionStall					, 98,	"Number of cycles the color cache is stalled because it is trying to evict a line that already has a pending evict. This can happen when a cacheline has been written out to memory and waiting for the write ack gets a hit again, eventually becoming dirty and needing to be re-evicted. Since only one eviction per cacheline can be outstanding, the cache is stalled.")
ENUM_VALUE_CbPerfCounter(CcCacheEvictNonzeroInflightStall		, 99,	"Number of cycles the color cache is stalled because it is trying to evict a line that has a nonzero inflight count. When a cachelines LRU count reaches the scaled eviction point set by CC_CACHE_EVICT_POINT and it is still inflight then this counter get incremented. This is usually a sign that the cache is unable to withstand the memory read latency. CC_CACHE_EVICT_POINT can be set to a LOWER val to handle the increased read latency.")
ENUM_VALUE_CbPerfCounter(CcCacheReplacePendingEvictStall		,100,	"Number of cycles the color cache is stalled because the line being replaced has a pending evict. This happens when the cacheline chosen for allocation on a miss is still waiting for its write-ack to return from a previous eviction. This is usually a sign that the cache is unable to withstand the memory write latency. CC_CACHE_EVICT_POINT can be set to a HIGHER val to handle the increased write latency.")
ENUM_VALUE_CbPerfCounter(CcCacheInflightCounterMaximumStall		,101,	"Number of cycles the color cache is stalled because one of the inflight counters has reached the maximum val.")
ENUM_VALUE_CbPerfCounter(CcCacheReadOutputStall					,102,	"Number of cycles the color cache is stalled because the read request output path is stalled. This can happen due to increased memory read request ask-go latency")
ENUM_VALUE_CbPerfCounter(CcCacheWriteOutputStall				,103,	"Number of cycles the color cache is stalled because the write request output path is stalled. This can happen due to increased memory write request ask-go latency")
ENUM_VALUE_CbPerfCounter(CcCacheAckOutputStall					,104,	"Number of cycles the color cache is stalled because the acknowledge output path is stalled. This can happen if the next stage in the pipeline (color cache read latency hiding fifo) is full and stalling the color cache so the cache cannot output any transactions.")
ENUM_VALUE_CbPerfCounter(CcCacheStall							,105,	"Number of cycles the color cache is stalled. This is the combined cache stall signal.")
ENUM_VALUE_CbPerfCounter(CcCacheFlush							,106,	"This is the number of color cache flushes.  This is includes surface sync flushes.")
ENUM_VALUE_CbPerfCounter(CcCacheTagsFlushed						,107,	"Number of dirty tags that are flushed (the color cache has 64 tags).")
ENUM_VALUE_CbPerfCounter(CcCacheSectorsFlushed					,108,	"Number of valid sectors (i.e they have valid data) per dirty tags that are flushed (the color cache has 4 sectors per tag). The valid sectors may be dirty. The total valid non-dirty sectors in flushed out tags = kCbPerfCounterCcCacheSectorsFlushed - kCbPerfCounterCcCacheDirtySectorsFlushed.")
ENUM_VALUE_CbPerfCounter(CcCacheDirtySectorsFlushed				,109,	"Number of dirty sectors per dirty tags that are flushed (the color cache has 4 sectors per tag).")
ENUM_VALUE_CbPerfCounter(CcCacheWaToRmwConversion				,110,	"The number of color cache probe transactions that hit a write allocate cache line that convert it into a read-modify-write cache line because they need destination buffer data.")
ENUM_VALUE_CbPerfCounter(CbTapWrreqValidReady					,111,	"Number of cycles the CB to TAP write request interface is valid and ready.  This is measured at the interface converter rather than directly on the interface. The should be equal to the sum of CB_PERF_SEL_*_MC_WRITE_REQUEST")
ENUM_VALUE_CbPerfCounter(CbTapWrreqValidReadyb					,112,	"Number of cycles the CB to TAP write request interface is valid and not ready.  This is measured at the interface converter rather than directly on the interface.")
ENUM_VALUE_CbPerfCounter(CbTapWrreqValidbReady					,113,	"Number of cycles the CB to TAP write request interface is valid and ready.  This is measured at the interface converter rather than directly on the interface.")
ENUM_VALUE_CbPerfCounter(CbTapWrreqValidbReadyb					,114,	"Number of cycles the CB to TAP write request interface is not valid and not ready.  This is measured at the interface converter rather than directly on the interface.")
ENUM_VALUE_CbPerfCounter(CmMcWriteRequest						,115,	"Number of 32-byte CMASK MC write requests. This directly measures the CB to memory write bandwidth originating from CMASK updates.")
ENUM_VALUE_CbPerfCounter(FcMcWriteRequest						,116,	"Number of 32-byte FMASK MC write requests. This directly measures the CB to memory write bandwidth originating from FMASK updates.")
ENUM_VALUE_CbPerfCounter(CcMcWriteRequest						,117,	"Number of 32-byte color MC write requests. This directly measures the CB to memory write bandwidth originating from color buffer updates.")
ENUM_VALUE_CbPerfCounter(CmMcWriteRequestsInFlight				,118,	"Number of 32-byte cmask mc write requests in flight.  kCbPerfCounterCmMcWriteRequestsInFlight/kCbPerfCounterCmMcWriteRequest = average latency.")
ENUM_VALUE_CbPerfCounter(FcMcWriteRequestsInFlight				,119,	"Number of 32-byte fmask mc write requests in flight.  kCbPerfCounterFcMcWriteRequestsInFlight/kCbPerfCounterFcMcWriteRequest = average latency.")
ENUM_VALUE_CbPerfCounter(CcMcWriteRequestsInFlight				,120,	"Number of 32-byte color mc write requests in flight.  kCbPerfCounterCcMcWriteRequestsInFlight/kCbPerfCounterCcMcWriteRequest = average latency.")
ENUM_VALUE_CbPerfCounter(CbTapRdreqValidReady					,121,	"Number of cycles the CB to TAP read request interface is valid and ready.  This is measured at the interface converter rather than directly on the interface.")
ENUM_VALUE_CbPerfCounter(CbTapRdreqValidReadyb					,122,	"Number of cycles the CB to TAP read request interface is valid and not ready.  This is measured at the interface converter rather than directly on the interface.")
ENUM_VALUE_CbPerfCounter(CbTapRdreqValidbReady					,123,	"Number of cycles the CB to TAP read request interface is not valid and ready.  This is measured at the interface converter rather than directly on the interface.")
ENUM_VALUE_CbPerfCounter(CbTapRdreqValidbReadyb					,124,	"Number of cycles the CB to TAP read request interface is not valid and not ready.  This is measured at the interface converter rather than directly on the interface.")
ENUM_VALUE_CbPerfCounter(CmMcReadRequest						,125,	"Number of 32-byte CMASK MC read requests. Cmask does not make 32-byte requests, so the counter will report the equivalent number of 32-byte requests. This directly measures the memory to CB read bandwidth originating from CMASK updates.")
ENUM_VALUE_CbPerfCounter(FcMcReadRequest						,126,	"Number of 32-byte FMASK MC read requests. This directly measures the memory to CB read bandwidth originating from FMASK updates.")
ENUM_VALUE_CbPerfCounter(CcMcReadRequest						,127,	"Number of 32-byte color MC read requests. Color does not make 32-byte requests, so the counter will report the equivalent number of 32-byte requests. This directly measures the memory to CB read bandwidth originating from color buffer updates.")
ENUM_VALUE_CbPerfCounter(CmMcReadRequestsInFlight				,128,	"Number of 32-byte cmask mc read requests in flight.  Cmask does not make 32-byte requests, so the counter will report the equivalent number of 32-byte requests.  kCbPerfCounterCmMcReadRequestsInFlight/kCbPerfCounterCmMcReadRequest = average latency.")
ENUM_VALUE_CbPerfCounter(FcMcReadRequestsInFlight				,129,	"Number of 32-byte fmask mc read requests in flight.  kCbPerfCounterFcMcReadRequestsInFlight/kCbPerfCounterFcMcReadRequest = average latency.")
ENUM_VALUE_CbPerfCounter(CcMcReadRequestsInFlight				,130,	"Number of 32-byte color mc read requests in flight.  Color does not make 32-byte requests, so the counter will report the equivalent number of 32-byte requests.  kCbPerfCounterCcMcReadRequestsInFlight/kCbPerfCounterCcMcReadRequest = average latency.")
ENUM_VALUE_CbPerfCounter(CmTqFull								,131,	"Number of cycles the cmask tile queue is full. This fifo covers the cmask memory read latency and stalling indicates that this fifo does not have enough latency hiding capacity")
ENUM_VALUE_CbPerfCounter(CmTqFifoTileResidencyStall				,132,	"Number of cycles the cmask read latency hiding fifo's head entry is waiting for cmask read data to return from memory and become resident in cache so the transaction can be popped. This does not mean that cmask logic is stalled, look at kCbPerfCounterCmTqFull for that.")
ENUM_VALUE_CbPerfCounter(FcQuadRdlatFifoFull					,133,	"Number of cycles the fmask read latency quad fifo is full. This fifo covers the fmask memory read latency and stalling indicates that this fifo does not have enough latency hiding capacity")
ENUM_VALUE_CbPerfCounter(FcTileRdlatFifoFull					,134,	"Number of cycles the fmask read latency tile fifo is full. This fifo covers the fmask memory read latency and stalling indicates that this fifo does not have enough latency hiding capacity")
ENUM_VALUE_CbPerfCounter(FcRdlatFifoQuadResidencyStall			,135,	"Number of cycles the fmask read latency hiding fifo's head entry is waiting for fmask read data to return from memory and become resident in cache so the transaction can be popped. This does not mean that fmask logic is stalled, look at kCbPerfCounterFcQuadRdlatFifoFull || kCbPerfCounterFcTileRdlatFifoFull for that.")
ENUM_VALUE_CbPerfCounter(FopFmaskRawStall						,136,	"Number of cycles a quadA-quadA sequence (back-to-back) is stalled because of a read-after-write conflict in fragop block.")
ENUM_VALUE_CbPerfCounter(FopFmaskBypassStall					,137,	"Number of cycles a quadA-quadB-quadA sequence is stalled because of a read-after-write conflict in fragop block.")
ENUM_VALUE_CbPerfCounter(CcSfFull								,138,	"Number of cycles the color cache source fifo is full. This fifo covers the fmask memory read plus color cache memory read latency and stalling indicates that this fifo does not have enough latency hiding capacity")
ENUM_VALUE_CbPerfCounter(CcRbFull								,139,	"Number of cycles the color cache reorder buffer is full. This fifo covers the color cache memory read latency and stalling indicates that this fifo does not have enough latency hiding capacity")
ENUM_VALUE_CbPerfCounter(CcEvenfifoQuadResidencyStall			,140,	"Number of cycles the color even side read latency hiding fifo's head entry is waiting for even 32B color read data to return from memory and become resident in cache so the transaction can be popped. This does not mean that color logic is stalled, look at kCbPerfCounterCcRbFull for that.")
ENUM_VALUE_CbPerfCounter(CcOddfifoQuadResidencyStall			,141,	"Number of cycles the color odd side read latency hiding fifo's head entry is waiting for odd 32B color read data to return from memory and become resident in cache so the transaction can be popped. This does not mean that color logic is stalled, look at kCbPerfCounterCcRbFull for that.")
ENUM_VALUE_CbPerfCounter(BlenderRawHazardStall					,142,	"Number of cycles the blend pipeline is stalled to handle read after write hazards.")
ENUM_VALUE_CbPerfCounter(Event									,143,	"Total number of events reaching the CB.  This includes events that the CB does not process.")
ENUM_VALUE_CbPerfCounter(EventCacheFlushTs						,144,	"Number of CACHE_FLUSH_TS events")
ENUM_VALUE_CbPerfCounter(EventContextDone						,145,	"Number of CONTEXT_DONE  events")
ENUM_VALUE_CbPerfCounter(EventCacheFlush						,146,	"Number of CACHE_FLUSH events")
ENUM_VALUE_CbPerfCounter(EventCacheFlushAndInvTsEvent			,147,	"Number of CACHE_FLUSH_AND_INV_TS_EVENT events")
ENUM_VALUE_CbPerfCounter(EventCacheFlushAndInvEvent				,148,	"Number of_CACHE_FLUSH_AND_INV_EVENTevents")
ENUM_VALUE_CbPerfCounter(EventFlushAndInvCbDataTs				,149,	"Number of FLUSH_AND_INV_CB_DATA_TS events")
ENUM_VALUE_CbPerfCounter(EventFlushAndInvCbMeta					,150,	"Number of FLUSH_AND_INV_CB_META events")
ENUM_VALUE_CbPerfCounter(CcSurfaceSync							,151,	"Number of surface syncs")
ENUM_VALUE_CbPerfCounter(CmaskReadData0Xc						,152,	"Number of fmask cache probe misses that read cmask with a val of 0xC. A val of 0xC means that a fmask tile requires 0 bit planes. Sum of kCbPerfCounterCmaskReadData* should match kCbPerfCounterFcCacheSectorMiss.")
ENUM_VALUE_CbPerfCounter(CmaskReadData0Xd						,153,	"Number of fmask cache probe misses that read cmask with a val of 0xD. A val of 0xD means that a fmask tile requires 1 bit planes. Sum of kCbPerfCounterCmaskReadData* should match kCbPerfCounterFcCacheSectorMiss.")
ENUM_VALUE_CbPerfCounter(CmaskReadData0Xe						,154,	"Number of fmask cache probe misses that read cmask with a val of 0xE. A val of 0xE means that a fmask tile requires 2 bit planes. Sum of kCbPerfCounterCmaskReadData* should match kCbPerfCounterFcCacheSectorMiss.")
ENUM_VALUE_CbPerfCounter(CmaskReadData0Xf						,155,	"Number of fmask cache probe misses that read cmask with a val of 0xF. A val of 0xF means that a fmask tile requires 3 bit planes. Sum of kCbPerfCounterCmaskReadData* should match kCbPerfCounterFcCacheSectorMiss.")
ENUM_VALUE_CbPerfCounter(CmaskWriteData0Xc						,156,	"Number of tiles that wrote a val of 0xC to cmask.  Cmask writes occur at the end of a tile.  The hardware does not perform the write if fmask has not changed, but the counter will update as if regardless of whether the hardware wrote or not. A val of 0xC means that a fmask tile requires 0 bit planes. Sum of all kCbPerfCounterCmaskWriteData* equals cmask cache probes (kCbPerfCounterCmCacheHit + kCbPerfCounterCmCacheSectorMiss).")
ENUM_VALUE_CbPerfCounter(CmaskWriteData0Xd						,157,	"Number of tile that wrote a val of 0xD was written to cmask.  Cmask writes occur at the end of a tile.  The hardware does not perform the write if fmask has not changed, but the counter will update as if regardless of whether the hardware wrote or not. A val of 0xD means that a fmask tile requires 1 bit planes. Sum of all kCbPerfCounterCmaskWriteData* equals cmask cache probes (kCbPerfCounterCmCacheHit + kCbPerfCounterCmCacheSectorMiss).")
ENUM_VALUE_CbPerfCounter(CmaskWriteData0Xe						,158,	"Number of tiles that wrote a val of 0xE was written to cmask.  Cmask writes occur at the end of a tile.  The hardware does not perform the write if fmask has not changed, but the counter will update as if regardless of whether the hardware wrote or not. A val of 0xE means that a fmask tile requires 2 bit planes. Sum of all kCbPerfCounterCmaskWriteData* equals cmask cache probes (kCbPerfCounterCmCacheHit + kCbPerfCounterCmCacheSectorMiss).")
ENUM_VALUE_CbPerfCounter(CmaskWriteData0Xf						,159,	"Number of tiles that wrote a val of 0xF was written to cmask.  Cmask writes occur at the end of a tile.  The hardware does not perform the write if fmask has not changed, but the counter will update as if regardless of whether the hardware wrote or not. A val of 0xF means that a fmask tile requires 3 bit planes. Sum of all kCbPerfCounterCmaskWriteData* equals cmask cache probes (kCbPerfCounterCmCacheHit + kCbPerfCounterCmCacheSectorMiss).")
ENUM_VALUE_CbPerfCounter(TwoProbeQuadFragment					,160,	"Number of quad fragments that require two cache probes.  AA blending can create these when the read fragment does not match the write fragment.")
ENUM_VALUE_CbPerfCounter(Export32AbgrQuadFragment				,161,	"Number of EXPORT_32_ABGR quad fragments.  It takes two clocks to send the src color data for these.")
ENUM_VALUE_CbPerfCounter(DualSourceColorQuadFragment			,162,	"Number of dual source blending color quad fragments")
ENUM_VALUE_CbPerfCounter(QuadHas1FragmentBeforeUpdate			,163,	"Number of quads that started with 1 fragment in AA mode in fragop block.")
ENUM_VALUE_CbPerfCounter(QuadHas2FragmentsBeforeUpdate			,164,	"Number of quads that started with 2 fragments in AA mode in fragop block.")
ENUM_VALUE_CbPerfCounter(QuadHas3FragmentsBeforeUpdate			,165,	"Number of quads that started with 3 fragments in AA mode in fragop block.")
ENUM_VALUE_CbPerfCounter(QuadHas4FragmentsBeforeUpdate			,166,	"Number of quads that started with 4 fragments in AA mode in fragop block.")
ENUM_VALUE_CbPerfCounter(QuadHas5FragmentsBeforeUpdate			,167,	"Number of quads that started with 5 fragments in AA mode in fragop block.")
ENUM_VALUE_CbPerfCounter(QuadHas6FragmentsBeforeUpdate			,168,	"Number of quads that started with 6 fragments in AA mode in fragop block.")
ENUM_VALUE_CbPerfCounter(QuadHas7FragmentsBeforeUpdate			,169,	"Number of quads that started with 7 fragments in AA mode in fragop block.")
ENUM_VALUE_CbPerfCounter(QuadHas8FragmentsBeforeUpdate			,170,	"Number of quads that started with 8 fragments in AA mode in fragop block.")
ENUM_VALUE_CbPerfCounter(QuadHas1FragmentAfterUpdate			,171,	"Number of quads that ended up with 1 fragment in AA mode in fragop block.")
ENUM_VALUE_CbPerfCounter(QuadHas2FragmentsAfterUpdate			,172,	"Number of quads that ended up with 2 fragments in AA mode in fragop block.")
ENUM_VALUE_CbPerfCounter(QuadHas3FragmentsAfterUpdate			,173,	"Number of quads that ended up with 3 fragments in AA mode in fragop block.")
ENUM_VALUE_CbPerfCounter(QuadHas4FragmentsAfterUpdate			,174,	"Number of quads that ended up with 4 fragments in AA mode in fragop block.")
ENUM_VALUE_CbPerfCounter(QuadHas5FragmentsAfterUpdate			,175,	"Number of quads that ended up with 5 fragments in AA mode in fragop block.")
ENUM_VALUE_CbPerfCounter(QuadHas6FragmentsAfterUpdate			,176,	"Number of quads that ended up with 6 fragments in AA mode in fragop block.")
ENUM_VALUE_CbPerfCounter(QuadHas7FragmentsAfterUpdate			,177,	"Number of quads that ended up with 7 fragments in AA mode in fragop block.")
ENUM_VALUE_CbPerfCounter(QuadHas8FragmentsAfterUpdate			,178,	"Number of quads that ended up with 8 fragments in AA mode in fragop block.")
ENUM_VALUE_CbPerfCounter(QuadAdded1Fragment						,179,	"Number of quads that added 1 fragment in AA mode in fragop block.")
ENUM_VALUE_CbPerfCounter(QuadAdded2Fragments					,180,	"Number of quads that added 2 fragments in AA mode in fragop block.")
ENUM_VALUE_CbPerfCounter(QuadAdded3Fragments					,181,	"Number of quads that added 3 fragments in AA mode in fragop block.")
ENUM_VALUE_CbPerfCounter(QuadAdded4Fragments					,182,	"Number of quads that added 4 fragments in AA mode in fragop block.")
ENUM_VALUE_CbPerfCounter(QuadAdded5Fragments					,183,	"Number of quads that added 5 fragments in AA mode in fragop block.")
ENUM_VALUE_CbPerfCounter(QuadAdded6Fragments					,184,	"Number of quads that added 6 fragments in AA mode in fragop block.")
ENUM_VALUE_CbPerfCounter(QuadAdded7Fragments					,185,	"Number of quads that added 7 fragments in AA mode in fragop block.")
ENUM_VALUE_CbPerfCounter(QuadRemoved1Fragment					,186,	"Number of quads that removed 1 fragment in AA mode in fragop block.")
ENUM_VALUE_CbPerfCounter(QuadRemoved2Fragments					,187,	"Number of quads that removed 2 fragments in AA mode in fragop block.")
ENUM_VALUE_CbPerfCounter(QuadRemoved3Fragments					,188,	"Number of quads that removed 3 fragments in AA mode in fragop block.")
ENUM_VALUE_CbPerfCounter(QuadRemoved4Fragments					,189,	"Number of quads that removed 4 fragments in AA mode in fragop block.")
ENUM_VALUE_CbPerfCounter(QuadRemoved5Fragments					,190,	"Number of quads that removed 5 fragments in AA mode in fragop block.")
ENUM_VALUE_CbPerfCounter(QuadRemoved6Fragments					,191,	"Number of quads that removed 6 fragments in AA mode in fragop block.")
ENUM_VALUE_CbPerfCounter(QuadRemoved7Fragments					,192,	"Number of quads that removed 7 fragments in AA mode in fragop block.")
ENUM_VALUE_CbPerfCounter(QuadReadsFragment0						,193,	"Number of quads that reads fragment 0 to the color cache.")
ENUM_VALUE_CbPerfCounter(QuadReadsFragment1						,194,	"Number of quads that reads fragment 1 to the color cache.")
ENUM_VALUE_CbPerfCounter(QuadReadsFragment2						,195,	"Number of quads that reads fragment 2 to the color cache.")
ENUM_VALUE_CbPerfCounter(QuadReadsFragment3						,196,	"Number of quads that reads fragment 3 to the color cache.")
ENUM_VALUE_CbPerfCounter(QuadReadsFragment4						,197,	"Number of quads that reads fragment 4 to the color cache.")
ENUM_VALUE_CbPerfCounter(QuadReadsFragment5						,198,	"Number of quads that reads fragment 5 to the color cache.")
ENUM_VALUE_CbPerfCounter(QuadReadsFragment6						,199,	"Number of quads that reads fragment 6 to the color cache.")
ENUM_VALUE_CbPerfCounter(QuadReadsFragment7						,200,	"Number of quads that reads fragment 7 to the color cache.")
ENUM_VALUE_CbPerfCounter(QuadWritesFragment0					,201,	"Number of quads that writes fragment 0 to the color cache.")
ENUM_VALUE_CbPerfCounter(QuadWritesFragment1					,202,	"Number of quads that writes fragment 1 to the color cache.")
ENUM_VALUE_CbPerfCounter(QuadWritesFragment2					,203,	"Number of quads that writes fragment 2 to the color cache.")
ENUM_VALUE_CbPerfCounter(QuadWritesFragment3					,204,	"Number of quads that writes fragment 3 to the color cache.")
ENUM_VALUE_CbPerfCounter(QuadWritesFragment4					,205,	"Number of quads that writes fragment 4 to the color cache.")
ENUM_VALUE_CbPerfCounter(QuadWritesFragment5					,206,	"Number of quads that writes fragment 5 to the color cache.")
ENUM_VALUE_CbPerfCounter(QuadWritesFragment6					,207,	"Number of quads that writes fragment 6 to the color cache.")
ENUM_VALUE_CbPerfCounter(QuadWritesFragment7					,208,	"Number of quads that writes fragment 7 to the color cache.")
ENUM_VALUE_CbPerfCounter(QuadBlendOptDontReadDst				,209,	"Number of quads that were blending but enabled optimization to not need read destination data. This optimization can be disabled by setting DISABLE_BLEND_OPT_DONT_RD_DST.")
ENUM_VALUE_CbPerfCounter(QuadBlendOptBlendBypass				,210,	"Number of quads that were blending but enabled optimization to bypassed blend operation. This optimization can be disabled by setting DISABLE_BLEND_OPT_BYPASS.")
ENUM_VALUE_CbPerfCounter(QuadBlendOptDiscardPixels				,211,	"Number of quads that were blending but enabled optimization to discard at least 1 pixel. This optimization can be disabled by setting DISABLE_BLEND_OPT_DISCARD_PIXEL.")
ENUM_VALUE_CbPerfCounter(QuadDstReadCouldHaveBeenOptimized		,212,	"Number of quads that the blender detects that could have optimized away their destination reads (i.e destblend*dst == 0.0f).  NOTE:  this counter is not completely accurate and does not work for colors that have 32-bit components.")
ENUM_VALUE_CbPerfCounter(QuadBlendingCouldHaveBeenBypassed		,213,	"Number of quads that the blender detects that could have optimized away blending (destblend*dst == 0.0f && srcblend*src == 1.0f).  NOTE:  this counter is not completely accurate and does not work for colors that have 32-bit components.")
ENUM_VALUE_CbPerfCounter(QuadCouldHaveBeenDiscarded				,214,	"Number of quads that the blender detects that could have discarded some pixels (destblend*dst == 1.0f && srcblend*src == 0.0f).  NOTE:  this counter is not completely accurate and does not work for colors that have 32-bit components.")
ENUM_VALUE_CbPerfCounter(BlendOptPixelsResultEqDest				,215,	"Number of blended pixels that the blender detects can be dropped because the blended result is the same as the original destination val.")
ENUM_VALUE_CbPerfCounter(DrawnBusy								,216,	"Number of busy cycles around the stage calculating the kCbPerfCounterDrawn* counters. Used as denominator for all the kCbPerfCounterDrawn* counters.  Filtering using CB_PERFCOUNTER_FILTER fields has an effect in this mode.")
ENUM_VALUE_CbPerfCounter(TileToCmrRegionBusy					,217,	"Number of busy cycles b/w PERFCOUNTER_START and PERFCOUNTER_STOP for the pipeline region b/w DB_CB_TILE and CMASK CACHE READ. This can be used as denominator for rate calculation for counters in this region")
ENUM_VALUE_CbPerfCounter(CmrToFcrRegionBusy						,218,	"Number of busy cycles b/w PERFCOUNTER_START and PERFCOUNTER_STOP for the pipeline region b/w CMASK CACHE READ and FMASK CACHE READ. This can be used as denominator for rate calculation for counters in this region")
ENUM_VALUE_CbPerfCounter(FcrToCcrRegionBusy						,219,	"Number of busy cycles b/w PERFCOUNTER_START and PERFCOUNTER_STOP for the pipeline region b/w FMASK CACHE READ and COLOR CACHE READ. This can be used as denominator for rate calculation for counters in this region")
ENUM_VALUE_CbPerfCounter(CcrToCcwRegionBusy						,220,	"Number of busy cycles b/w PERFCOUNTER_START and PERFCOUNTER_STOP for the pipeline region b/w COLOR CACHE READ and COLOR CACHE WRITE. This can be used as denominator for rate calculation for counters in this region")
ENUM_VALUE_CbPerfCounter(FcPfSlowModeQuadEmptyHalfDropped		,221,	"Number of lquad transactions (halves of slow mode 2-cycle quad) that were dropped in fc_merge logic due to optimization from going into the SRC fifo because the pixel pair in that half quad was unlit. This optimization can be disabled by setting: DISABLE_SLOW_MODE_EMPTY_HALF_QUAD_KILL")
ENUM_VALUE_CbPerfCounter(FcSequencerClear						,222,	"Number of quads that are generated to expand out the fast clear color as well as number of drawn quads that have partially lit pixels so that unlit samples need to expands their fast clear color. Use kCbPerfCounterDrawnBusy as denominator to get per clock rates.")
ENUM_VALUE_CbPerfCounter(FcSequencerEliminateFastClear			,223,	"Number of quads generated during ELIMINATE_FAST_CLEAR pass to expand their fast clear color. Use kCbPerfCounterDrawnBusy as denominator to get per clock rates.")
ENUM_VALUE_CbPerfCounter(FcSequencerFmaskDecompress				,224,	"Number of quads generated during FMASK_DECOMPRESS pass to expand their fast clear color. Use kCbPerfCounterDrawnBusy as denominator to get per clock rates.")
ENUM_VALUE_CbPerfCounter(FcSequencerFmaskCompressionDisable		,225,	"Number of quad fragments seen during normal rendering when the state was set to disable fmask compression. This will include drawn quads as well as generated quads to expand their fast clear. Use kCbPerfCounterDrawnBusy as denominator to get per clock rates.")
ENUM_VALUE_CbPerfCounter(CcCacheReadsSavedDueToDcc				,226,	"NEO ONLY; Number of reads prevented by DCC.")
ENUM_VALUE_CbPerfCounter(FcKeyidRdlatFifoFull					,227,	"NEO ONLY; Number of cycles the fmask read latency keyid fifo is full. This fifo covers the fmask memory read latency and stalling indicates that this fifo does not have enough latency hiding capacity")
ENUM_VALUE_CbPerfCounter(FcDocIsStalled							,228,	"NEO ONLY; Number of cycles the overwrite combiner is stalled.")
ENUM_VALUE_CbPerfCounter(FcDocMrtsNotCombined					,229,	"NEO ONLY; Number of times a quad's mrt was not able to be combined with another one (so as to share the same quarter-tile cam entry).")
ENUM_VALUE_CbPerfCounter(FcDocMrtsCombined						,230,	"NEO ONLY; Number of times a quad's mrt was combined with another one (so as to share the same quarter-tile cam entry).")
ENUM_VALUE_CbPerfCounter(FcDocQtileCamMiss						,231,	"NEO ONLY; Number of misses in the overwrite combiner's quarter-tile cam.")
ENUM_VALUE_CbPerfCounter(FcDocQtileCamHit						,232,	"NEO ONLY; Number of hits in the overwrite combiner's quarter-tile cam.")
ENUM_VALUE_CbPerfCounter(FcDocClineCamMiss						,233,	"NEO ONLY; Number of misses in the overwrite combiner's cacheline cam.")
ENUM_VALUE_CbPerfCounter(FcDocClineCamHit						,234,	"NEO ONLY; Number of hits in the overwrite combiner's cacheline cam.")
ENUM_VALUE_CbPerfCounter(FcDocQuadPtrFifoIsFull					,235,	"NEO ONLY; Number of cycles that the overwrite combiner's quad pointer fifo is full.")
ENUM_VALUE_CbPerfCounter(FcDocOverwrote1Sector					,236,	"NEO ONLY; Number of times that the overwrite combiner overwrote just 1 sector.")
ENUM_VALUE_CbPerfCounter(FcDocOverwrote2Sectors					,237,	"NEO ONLY; Number of times that the overwrite combiner overwrote just 2 sector.")
ENUM_VALUE_CbPerfCounter(FcDocOverwrote3Sectors					,238,	"NEO ONLY; Number of times that the overwrite combiner overwrote just 3 sector.")
ENUM_VALUE_CbPerfCounter(FcDocOverwrote4Sectors					,239,	"NEO ONLY; Number of times that the overwrite combiner overwrote all 4 sectors.")
ENUM_VALUE_CbPerfCounter(FcDocTotalOverwrittenSectors			,240,	"NEO ONLY; Number of total sectors overwritten by the Overwrite Combiner.")
ENUM_VALUE_CbPerfCounter(FcDccCacheHit							,241,	"NEO ONLY; Number of hits in the DCC cache (TAG HIT && SECTOR HIT).")
ENUM_VALUE_CbPerfCounter(FcDccCacheTagMiss						,242,	"NEO ONLY; Number of tag misses in the DCC cache (TAG MISS).")
ENUM_VALUE_CbPerfCounter(FcDccCacheSectorMiss					,243,	"NEO ONLY; Number of sector misses in the DCC cache (TAG MISS || SECTOR MISS).")
ENUM_VALUE_CbPerfCounter(FcDccCacheReevictionStall				,244,	"NEO ONLY; Number of cycles the DCC cache is stalled because it is trying to evict a line that already has a pending evict. This can happen when a cacheline has been written out to memory and waiting for the write ack gets a hit again, eventually becoming dirty and needing to be re-evicted. Since only one eviction per cacheline can be outstanding, the cache is stalled.")
ENUM_VALUE_CbPerfCounter(FcDccCacheEvictNonzeroInflightStall	,245,	"NEO ONLY; Number of cycles the DCC cache is stalled because it is trying to evict a line that has a nonzero inflight count.\nWhen a cachelines LRU count reaches the scaled eviction point set by DCC_CACHE_EVICT_POINT and it is still inflight then this counter get incremented\nThis is usually a sign that the cache is unable to withstand the memory read latency. DCC_CACHE_EVICT_POINT can be set to a LOWER value to handle the increased read latency.\nThis count is the number of times the Key Cache sends a panic to the Color Cache.")
ENUM_VALUE_CbPerfCounter(FcDccCacheReplacePendingEvictStall		,246,	"NEO ONLY; Number of cycles the DCC cache is stalled because the line being replaced has a pending evict. This happens when the cacheline chosen for allocation on a miss is still waiting for its write-ack to return from a previous eviction. This is usually a sign that the cache is unable to withstand the memory write latency. DCC_CACHE_EVICT_POINT can be set to a HIGHER value to handle the increased write latency.")
ENUM_VALUE_CbPerfCounter(FcDccCacheInflightCounterMaximumStall	,247,	"NEO ONLY; Number of cycles the DCC cache is stalled because one of the inflight counters has reached the maximum value.")
ENUM_VALUE_CbPerfCounter(FcDccCacheReadOutputStall				,248,	"NEO ONLY; Number of cycles the DCC cache is stalled because the read request output path is stalled. This can happen due to increased memory read request ask-go latency")
ENUM_VALUE_CbPerfCounter(FcDccCacheWriteOutputStall				,249,	"NEO ONLY; Number of cycles the DCC cache is stalled because the write request output path is stalled. This can happen due to increased memory write request ask-go latency")
ENUM_VALUE_CbPerfCounter(FcDccCacheAckOutputStall				,250,	"NEO ONLY; Number of cycles the DCC cache is stalled because the acknowledge output path is stalled. This can happen if the next stage in the pipeline (DCC cache read latency hiding fifo) is full and stalling the DCC cache so the cache cannot output any transactions.")
ENUM_VALUE_CbPerfCounter(FcDccCacheStall						,251,	"NEO ONLY; Number of cycles the DCC cache is stalled. This is the combined cache stall signal.")
ENUM_VALUE_CbPerfCounter(FcDccCacheFlush						,252,	"NEO ONLY; This is the number of DCC cache flushes.")
ENUM_VALUE_CbPerfCounter(FcDccCacheTagsFlushed					,253,	"NEO ONLY; Number of dirty tags that are flushed (the DCC cache has 32 tags).")
ENUM_VALUE_CbPerfCounter(FcDccCacheSectorsFlushed				,254,	"NEO ONLY; Number of valid sectors (i.e they have valid data) per dirty tags that are flushed (the DCC cache has 1 sector per tag). The valid sectors may be dirty. The total valid non-dirty sectors in flushed out tags= CB_PERF_SEL_FC_DCC_CACHE_SECTORS_FLUSHED - CB_PERF_SEL_FC_DCC_CACHE_DIRTY_SECTORS_FLUSHED.")
ENUM_VALUE_CbPerfCounter(FcDccCacheDirtySectorsFlushed			,255,	"NEO ONLY; Number of dirty sectors per dirty tags that are flushed (the DCC cache has 1 sector per tag).")
ENUM_VALUE_CbPerfCounter(CcDccBeyondTileSplit					,256,	"NEO ONLY; Number of fragments that lie outside the tile split boundary.  The color cache controller limits DCC compression support to only those fragments that are within the first tile split.")
ENUM_VALUE_CbPerfCounter(FcMcDccWriteRequest					,257,	"NEO ONLY; Number of 32-byte fmask mc DCC write requests.")
ENUM_VALUE_CbPerfCounter(FcMcDccWriteRequestsInFlight			,258,	"NEO ONLY; Number of 32-byte fmask mc DCC write requests in flight.  CB_PERF_SEL_FC_MC_DCC_WRITE_REQUESTS_IN_FLIGHT/CB_PERF_SEL_FC_MC_DCC_WRITE_REQUEST= average latency.")
ENUM_VALUE_CbPerfCounter(FcMcDccReadRequest						,259,	"NEO ONLY; Number of 32-byte fmask mc DCC read requests.")
ENUM_VALUE_CbPerfCounter(FcMcDccReadRequestsInFlight			,260,	"NEO ONLY; Number of 32-byte fmask mc DCC read requests in flight.  CB_PERF_SEL_FC_MC_DCC_READ_REQUESTS_IN_FLIGHT/CB_PERF_SEL_FC_MC_DCC_READ_REQUEST= average latency.")
ENUM_VALUE_CbPerfCounter(CcDccRdreqStall						,261,	"NEO ONLY; Number of times DCC read requests are stalled because the internal scoreboard predicts that the skid fifo will be full.")
ENUM_VALUE_CbPerfCounter(CcDccDecompressTidsIn					,262,	"NEO ONLY; Number of tids that come into the DCC's decompress module.")
ENUM_VALUE_CbPerfCounter(CcDccDecompressTidsOut					,263,	"NEO ONLY; Number of tids that come out of the DCC's decompress module.")
ENUM_VALUE_CbPerfCounter(CcDccCompressTidsIn					,264,	"NEO ONLY; Number of tids that come into the DCC's compress module.")
ENUM_VALUE_CbPerfCounter(CcDccCompressTidsOut					,265,	"NEO ONLY; Number of tids that come out of the DCC's compress module.")
ENUM_VALUE_CbPerfCounter(FcDccKeyValueClear						,266,	"NEO ONLY; From DCC cache:  Number of times all sectors of a cacheline were initialized with a register-defined clear value.")
ENUM_VALUE_CbPerfCounter(CcDccKeyValue4Blocks2To1				,267,	"NEO ONLY; From DCC Compressor in Color Cache:  Number of times all 4 sectors were compressed as 2:1 blocks.")
ENUM_VALUE_CbPerfCounter(CcDccKeyValue3Blocks2To11Block2To2		,268,	"NEO ONLY; From DCC Compressor in Color Cache:  Number of times sectors 1 through 3 were compressed as 2:1 blocks and sector 0 was compressed as 2:2 (uncompressed).")
ENUM_VALUE_CbPerfCounter(CcDccKeyValue2Blocks2To11Block2To21Block2To1	,269,	"NEO ONLY; From DCC Compressor in Color Cache:  Number of times sectors 2 and 3 were compressed as 2:1 blocks, sector 1 was compressed as 2:2 (uncompressed) and sector 0 was compressed as 2:1 blocks.")
ENUM_VALUE_CbPerfCounter(CcDccKeyValue1Block2To11Block2To22Blocks2To1	,270,	"NEO ONLY; From DCC Compressor in Color Cache:  Number of times sector 3 was compressed as 2:1 blocks, sector 2 was compressed as 2:2 (uncompressed) and sectors 0 and 1 were compressed as 2:1 blocks.")
ENUM_VALUE_CbPerfCounter(CcDccKeyValue1Block2To23Blocks2To1				,271,	"NEO ONLY; From DCC Compressor in Color Cache:  Number of times sector 3 was compressed as 2:2 (uncompressed) and sectors 0 through 2 were compressed as 2:1 blocks.")
ENUM_VALUE_CbPerfCounter(CcDccKeyValue2Blocks2To12Blocks2To2			,272,	"NEO ONLY; From DCC Compressor in Color Cache:  Number of times sectors 2 and 3 were compressed as 2:1 blocks and sectors 0 and 1 were compressed as 2:2 (uncompressed).")
ENUM_VALUE_CbPerfCounter(CcDccKeyValue1Block2To12Blocks2To21Block2To1	,273,	"NEO ONLY; From DCC Compressor in Color Cache:  Number of times sector 3 was compressed as 2:1 blocks, sectors 1 and 2 were compressed as 2:2 (uncompressed) and sector 0 was compressed as 2:1 blocks.")
ENUM_VALUE_CbPerfCounter(CcDccKeyValue1Block2To11Block2To21Block2To11Block2To2		,274,	"NEO ONLY; From DCC Compressor in Color Cache:  Number of times sector 3 was compressed as 2:1 blocks, sector 2 was compressed as 2:2 (uncompressed), sector 1 was compressed as 2:1 blocks and sector 0 was compressed as 2:2 (uncompressed).")
ENUM_VALUE_CbPerfCounter(CcDccKeyValue1Block2To21Block2To11Block2To21Block2To1		,275,	"NEO ONLY; From DCC Compressor in Color Cache:  Number of times sector 3 was compressed as 2:2 (uncompressed), sector 2 was compressed as 2:1 blocks, sector 1 was compressed as 2:2 (uncompressed) and sector 0 was compressed as 2:1 blocks.")
ENUM_VALUE_CbPerfCounter(CcDccKeyValue2Blocks2To22Blocks2To1			,276,	"NEO ONLY; From DCC Compressor in Color Cache:  Number of times sectors 2 and 3 were compressed as 2:2 (uncompressed) and sectors 0 and 1 were compressed as 2:1 blocks.")
ENUM_VALUE_CbPerfCounter(CcDccKeyValue1Block2To22Blocks2To11Block2To2	,277,	"NEO ONLY; From DCC Compressor in Color Cache:  Number of times sector 3 was compressed as 2:2 (uncompressed), sectors 1 and 2 were compressed as 2:1 blocks and sector 0 was compressed as 2:2 (uncompressed).")
ENUM_VALUE_CbPerfCounter(CcDccKeyValue1Block2To13Blocks2To2				,278,	"NEO ONLY; From DCC Compressor in Color Cache:  Number of times sector 3 was compressed as 2:1 blocks and sectors 0 through 2 were compressed as 2:2 (uncompressed).")
ENUM_VALUE_CbPerfCounter(CcDccKeyValue1Block2To21Block2To12Blocks2To2	,279,	"NEO ONLY; From DCC Compressor in Color Cache:  Number of times sector 3 was compressed as 2:2 (uncompressed), sector 2 was compressed as 2:1 blocks and sectors 0 and 1 were compressed as 2:2 (uncompressed).")
ENUM_VALUE_CbPerfCounter(CcDccKeyValue2Blocks2To21Block2To11Block2To2	,280,	"NEO ONLY; From DCC Compressor in Color Cache:  Number of times sectors 2 and 3 were compressed as 2:2 (uncompressed), sector 1 was compressed as 2:1 blocks and sector 0 was compressed as 2:2 (uncompressed).")
ENUM_VALUE_CbPerfCounter(CcDccKeyValue3Blocks2To21Block2To1				,281,	"NEO ONLY; From DCC Compressor in Color Cache:  Number of times sectors 1 through 3 were compressed as 2:2 (uncompressed) and sector 0 was compressed as 2:1 blocks.")
ENUM_VALUE_CbPerfCounter(CcDccKeyValue2Blocks4To1						,282,	"NEO ONLY; From DCC Compressor in Color Cache:  Number of times sectors 0 and 1 were compressed as 4:1 blocks.")
ENUM_VALUE_CbPerfCounter(CcDccKeyValue1Block4To11Block4To2				,283,	"NEO ONLY; From DCC Compressor in Color Cache:  Number of times sector 1 was compressed as 4:1 blocks and sector 0 was compressed as 4:2 blocks.")
ENUM_VALUE_CbPerfCounter(CcDccKeyValue1Block4To11Block4To3				,284,	"NEO ONLY; From DCC Compressor in Color Cache:  Number of times sector 1 was compressed as 4:1 blocks and sector 0 was compressed as 4:3 blocks.")
ENUM_VALUE_CbPerfCounter(CcDccKeyValue1Block4To11Block4To4				,285,	"NEO ONLY; From DCC Compressor in Color Cache:  Number of times sector 1 was compressed as 4:1 blocks and sector 0 was compressed as 4:4 (uncompressed).")
ENUM_VALUE_CbPerfCounter(CcDccKeyValue1Block4To21Block4To1				,286,	"NEO ONLY; From DCC Compressor in Color Cache:  Number of times sector 1 was compressed as 4:2 blocks and sector 0 was compressed as 4:1 blocks.")
ENUM_VALUE_CbPerfCounter(CcDccKeyValue2Blocks4To2						,287,	"NEO ONLY; From DCC Compressor in Color Cache:  Number of times sectors 0 and 1 were compressed as 4:2 blocks.")
ENUM_VALUE_CbPerfCounter(CcDccKeyValue1Block4To21Block4To3				,288,	"NEO ONLY; From DCC Compressor in Color Cache:  Number of times sector 1 was compressed as 4:2 blocks and sector 0 was compressed as 4:3 blocks.")
ENUM_VALUE_CbPerfCounter(CcDccKeyValue1Block4To21Block4To4				,289,	"NEO ONLY; From DCC Compressor in Color Cache:  Number of times sector 1 was compressed as 4:2 blocks and sector 0 was compressed as 4:4 (uncompressed).")
ENUM_VALUE_CbPerfCounter(CcDccKeyValue1Block4To31Block4To1				,290,	"NEO ONLY; From DCC Compressor in Color Cache:  Number of times sector 1 was compressed as 4:3 blocks and sector 0 was compressed as 4:1 blocks.")
ENUM_VALUE_CbPerfCounter(CcDccKeyValue1Block4To31Block4To2				,291,	"NEO ONLY; From DCC Compressor in Color Cache:  Number of times sector 1 was compressed as 4:3 blocks and sector 0 was compressed as 4:2 blocks.")
ENUM_VALUE_CbPerfCounter(CcDccKeyValue2Blocks4To3						,292,	"NEO ONLY; From DCC Compressor in Color Cache:  Number of times sectors 0 & 1 were compressed as 4:3 blocks.")
ENUM_VALUE_CbPerfCounter(CcDccKeyValue1Block4To31Block4To4				,293,	"NEO ONLY; From DCC Compressor in Color Cache:  Number of times sector 1 was compressed as 4:3 blocks and sector 0 was compressed as 4:4 (uncompressed).")
ENUM_VALUE_CbPerfCounter(CcDccKeyValue1Block4To41Block4To1				,294,	"NEO ONLY; From DCC Compressor in Color Cache:  Number of times sector 1 was compressed as 4:4 (uncompressed) and sector 0 was compressed as 4:1 blocks.")
ENUM_VALUE_CbPerfCounter(CcDccKeyValue1Block4To41Block4To2				,295,	"NEO ONLY; From DCC Compressor in Color Cache:  Number of times sector 1 was compressed as 4:4 (uncompressed) and sector 0 was compressed as 4:2 blocks.")
ENUM_VALUE_CbPerfCounter(CcDccKeyValue1Block4To41Block4To3				,296,	"NEO ONLY; From DCC Compressor in Color Cache:  Number of times sector 1 was compressed as 4:4 (uncompressed) and sector 0 was compressed as 4:3 blocks.")
ENUM_VALUE_CbPerfCounter(CcDccKeyValue2Blocks2To11Block4To1				,297,	"NEO ONLY; From DCC Compressor in Color Cache:  Number of times sectors 1 and 2 were compressed as 2:1 blocks and sector 0 was compressed as 4:1 blocks.")
ENUM_VALUE_CbPerfCounter(CcDccKeyValue2Blocks2To11Block4To2				,298,	"NEO ONLY; From DCC Compressor in Color Cache:  Number of times sectors 1 and 2 were compressed as 2:1 blocks and sector 0 was compressed as 4:2 blocks.")
ENUM_VALUE_CbPerfCounter(CcDccKeyValue2Blocks2To11Block4To3				,299,	"NEO ONLY; From DCC Compressor in Color Cache:  Number of times sectors 1 and 2 were compressed as 2:1 blocks and sector 0 was compressed as 4:3 blocks.")
ENUM_VALUE_CbPerfCounter(CcDccKeyValue2Blocks2To11Block4To4				,300,	"NEO ONLY; From DCC Compressor in Color Cache:  Number of times sectors 1 and 2 were compressed as 2:1 blocks and sector 0 was compressed as 4:4 (uncompressed).")
ENUM_VALUE_CbPerfCounter(CcDccKeyValue1Block2To11Block2To21Block4To1	,301,	"NEO ONLY; From DCC Compressor in Color Cache:  Number of times sector 2 was compressed as 2:1 blocks, sector 1 was compressed as 2:2 (uncompressed) and sector 0 was compressed as 4:1 blocks.")
ENUM_VALUE_CbPerfCounter(CcDccKeyValue1Block2To11Block2To21Block4To2	,302,	"NEO ONLY; From DCC Compressor in Color Cache:  Number of times sector 2 was compressed as 2:1 blocks, sector 1 was compressed as 2:2 (uncompressed) and sector 0 was compressed as 4:2 blocks.")
ENUM_VALUE_CbPerfCounter(CcDccKeyValue1Block2To11Block2To21Block4To3	,303,	"NEO ONLY; From DCC Compressor in Color Cache:  Number of times sector 2 was compressed as 2:1 blocks, sector 1 was compressed as 2:2 (uncompressed) and sector 0 was compressed as 4:3 blocks.")
ENUM_VALUE_CbPerfCounter(CcDccKeyValue1Block2To11Block2To21Block4To4	,304,	"NEO ONLY; From DCC Compressor in Color Cache:  Number of times sector 2 was compressed as 2:1 blocks, sector 1 was compressed as 2:2 (uncompressed) and sector 0 was compressed as 4:4 (uncompressed).")
ENUM_VALUE_CbPerfCounter(CcDccKeyValue1Block2To21Block2To11Block4To1	,305,	"NEO ONLY; From DCC Compressor in Color Cache:  Number of times sector 2 was compressed as 2:2 (uncompressed), sector 1 was compressed as 2:1 blocks and sector 0 was compressed as 4:1 blocks.")
ENUM_VALUE_CbPerfCounter(CcDccKeyValue1Block2To21Block2To11Block4To2	,306,	"NEO ONLY; From DCC Compressor in Color Cache:  Number of times sector 2 was compressed as 2:2 (uncompressed), sector 1 was compressed as 2:1 blocks and sector 0 was compressed as 4:2 blocks.")
ENUM_VALUE_CbPerfCounter(CcDccKeyValue1Block2To21Block2To11Block4To3	,307,	"NEO ONLY; From DCC Compressor in Color Cache:  Number of times sector 2 was compressed as 2:2 (uncompressed), sector 1 was compressed as 2:1 blocks and sector 0 was compressed as 4:3 blocks.")
ENUM_VALUE_CbPerfCounter(CcDccKeyValue1Block2To21Block2To11Block4To4	,308,	"NEO ONLY; From DCC Compressor in Color Cache:  Number of times sector 2 was compressed as 2:2 (uncompressed), sector 1 was compressed as 2:1 blocks and sector 0 was compressed as 4:4 (uncompressed).")
ENUM_VALUE_CbPerfCounter(CcDccKeyValue2Blocks2To21Block4To1				,309,	"NEO ONLY; From DCC Compressor in Color Cache:  Number of times sectors 1 and 2 were compressed as 2:2 (uncompressed) and sector 0 was compressed as 4:1 blocks.")
ENUM_VALUE_CbPerfCounter(CcDccKeyValue2Blocks2To21Block4To2				,310,	"NEO ONLY; From DCC Compressor in Color Cache:  Number of times sectors 1 and 2 were compressed as 2:2 (uncompressed) and sector 0 was compressed as 4:2 blocks.")
ENUM_VALUE_CbPerfCounter(CcDccKeyValue2Blocks2To21Block4To3				,311,	"NEO ONLY; From DCC Compressor in Color Cache:  Number of times sectors 1 and 2 were compressed as 2:2 (uncompressed) and sector 0 was compressed as 4:3 blocks.")
ENUM_VALUE_CbPerfCounter(CcDccKeyValue1Block2To11Block4To11Block2To1	,312,	"NEO ONLY; From DCC Compressor in Color Cache:  Number of times sector 2 was compressed as 2:1 blocks, sector 1 was compressed as 4:1 blocks and sector 0 was compressed as 2:1 blocks.")
ENUM_VALUE_CbPerfCounter(CcDccKeyValue1Block2To11Block4To21Block2To1	,313,	"NEO ONLY; From DCC Compressor in Color Cache:  Number of times sector 2 was compressed as 2:1 blocks, sector 1 was compressed as 4:2 blocks and sector 0 was compressed as 2:1 blocks.")
ENUM_VALUE_CbPerfCounter(CcDccKeyValue1Block2To11Block4To31Block2To1	,314,	"NEO ONLY; From DCC Compressor in Color Cache:  Number of times sector 2 was compressed as 2:1 blocks, sector 1 was compressed as 4:3 blocks and sector 0 was compressed as 2:1 blocks.")
ENUM_VALUE_CbPerfCounter(CcDccKeyValue1Block2To11Block4To41Block2To1	,315,	"NEO ONLY; From DCC Compressor in Color Cache:  Number of times sector 2 was compressed as 2:1 blocks, sector 1 was compressed as 4:4 (uncompressed) and sector 0 was compressed as 2:1 blocks.")
ENUM_VALUE_CbPerfCounter(CcDccKeyValue1Block2To21Block4To11Block2To1	,316,	"NEO ONLY; From DCC Compressor in Color Cache:  Number of times sector 2 was compressed as 2:2 (uncompressed), sector 1 was compressed as 4:1 blocks and sector 0 was compressed as 2:1 blocks.")
ENUM_VALUE_CbPerfCounter(CcDccKeyValue1Block2To21Block4To21Block2To1	,317,	"NEO ONLY; From DCC Compressor in Color Cache:  Number of times sector 2 was compressed as 2:2 (uncompressed), sector 1 was compressed as 4:2 blocks and sector 0 was compressed as 2:1 blocks.")
ENUM_VALUE_CbPerfCounter(CcDccKeyValue1Block2To21Block4To31Block2To1	,318,	"NEO ONLY; From DCC Compressor in Color Cache:  Number of times sector 2 was compressed as 2:2 (uncompressed), sector 1 was compressed as 4:3 blocks and sector 0 was compressed as 2:1 blocks.")
ENUM_VALUE_CbPerfCounter(CcDccKeyValue1Block2To21Block4To41Block2To1	,319,	"NEO ONLY; From DCC Compressor in Color Cache:  Number of times sector 2 was compressed as 2:2 (uncompressed), sector 1 was compressed as 4:4 (uncompressed) and sector 0 was compressed as 2:1 blocks.")
ENUM_VALUE_CbPerfCounter(CcDccKeyValue1Block2To11Block4To11Block2To2	,320,	"NEO ONLY; From DCC Compressor in Color Cache:  Number of times sector 2 was compressed as 2:1 blocks, sector 1 was compressed as 4:1 blocks and sector 0 was compressed as 2:2 (uncompressed).")
ENUM_VALUE_CbPerfCounter(CcDccKeyValue1Block2To11Block4To21Block2To2	,321,	"NEO ONLY; From DCC Compressor in Color Cache:  Number of times sector 2 was compressed as 2:1 blocks, sector 1 was compressed as 4:2 blocks and sector 0 was compressed as 2:2 (uncompressed).")
ENUM_VALUE_CbPerfCounter(CcDccKeyValue1Block2To11Block4To31Block2To2	,322,	"NEO ONLY; From DCC Compressor in Color Cache:  Number of times sector 2 was compressed as 2:1 blocks, sector 1 was compressed as 4:3 blocks and sector 0 was compressed as 2:2 (uncompressed).")
ENUM_VALUE_CbPerfCounter(CcDccKeyValue1Block2To11Block4To41Block2To2	,323,	"NEO ONLY; From DCC Compressor in Color Cache:  Number of times sector 2 was compressed as 2:1 blocks, sector 1 was compressed as 4:4 (uncompressed) and sector 0 was compressed as 2:2 (uncompressed).")
ENUM_VALUE_CbPerfCounter(CcDccKeyValue1Block2To21Block4To11Block2To2	,324,	"NEO ONLY; From DCC Compressor in Color Cache:  Number of times sector 2 was compressed as 2:2 (uncompressed), sector 1 was compressed as 4:1 blocks and sector 0 was compressed as 2:2 (uncompressed).")
ENUM_VALUE_CbPerfCounter(CcDccKeyValue1Block2To21Block4To21Block2To2	,325,	"NEO ONLY; From DCC Compressor in Color Cache:  Number of times sector 2 was compressed as 2:2 (uncompressed), sector 1 was compressed as 4:2 blocks and sector 0 was compressed as 2:2 (uncompressed).")
ENUM_VALUE_CbPerfCounter(CcDccKeyValue1Block2To21Block4To31Block2To2	,326,	"NEO ONLY; From DCC Compressor in Color Cache:  Number of times sector 2 was compressed as 2:2 (uncompressed), sector 1 was compressed as 4:3 blocks and sector 0 was compressed as 2:2 (uncompressed).")
ENUM_VALUE_CbPerfCounter(CcDccKeyValue1Block4To12Blocks2To1				,327,	"NEO ONLY; From DCC Compressor in Color Cache:  Number of times sector 2 was compressed as 4:1 blocks and sectors 0 and 1 were compressed as 2:1 blocks.")
ENUM_VALUE_CbPerfCounter(CcDccKeyValue1Block4To22Blocks2To1				,328,	"NEO ONLY; From DCC Compressor in Color Cache:  Number of times sector 2 was compressed as 4:2 blocks and sectors 0 and 1 were compressed as 2:1 blocks.")
ENUM_VALUE_CbPerfCounter(CcDccKeyValue1Block4To32Blocks2To1				,329,	"NEO ONLY; From DCC Compressor in Color Cache:  Number of times sector 2 was compressed as 4:3 blocks and sectors 0 and 1 were compressed as 2:1 blocks.")
ENUM_VALUE_CbPerfCounter(CcDccKeyValue1Block4To42Blocks2To1				,330,	"NEO ONLY; From DCC Compressor in Color Cache:  Number of times sector 2 was compressed as 4:4 (uncompressed) and sectors 0 and 1 were compressed as 2:1 blocks.")
ENUM_VALUE_CbPerfCounter(CcDccKeyValue1Block4To12Blocks2To2				,331,	"NEO ONLY; From DCC Compressor in Color Cache:  Number of times sector 2 was compressed as 4:1 blocks and sectors 0 and 1 were compressed as 2:1 blocks.")
ENUM_VALUE_CbPerfCounter(CcDccKeyValue1Block4To22Blocks2To2				,332,	"NEO ONLY; From DCC Compressor in Color Cache:  Number of times sector 2 was compressed as 4:1 blocks and sectors 0 and 1 were compressed as 2:1 blocks.")
ENUM_VALUE_CbPerfCounter(CcDccKeyValue1Block4To32Blocks2To2				,333,	"NEO ONLY; From DCC Compressor in Color Cache:  Number of times sector 2 was compressed as 4:1 blocks and sectors 0 and 1 were compressed as 2:1 blocks.")
ENUM_VALUE_CbPerfCounter(CcDccKeyValue1Block4To11Block2To11Block2To2	,334,	"NEO ONLY; From DCC Compressor in Color Cache:  Number of times sector 2 was compressed as 4:1 blocks, sector 1 was compressed as 2:1 blocks and sector 0 was compressed as 2:2 (uncompressed).")
ENUM_VALUE_CbPerfCounter(CcDccKeyValue1Block4To21Block2To11Block2To2	,335,	"NEO ONLY; From DCC Compressor in Color Cache:  Number of times sector 2 was compressed as 4:2 blocks, sector 1 was compressed as 2:1 blocks and sector 0 was compressed as 2:2 (uncompressed).")
ENUM_VALUE_CbPerfCounter(CcDccKeyValue1Block4To31Block2To11Block2To2	,336,	"NEO ONLY; From DCC Compressor in Color Cache:  Number of times sector 2 was compressed as 4:3 blocks, sector 1 was compressed as 2:1 blocks and sector 0 was compressed as 2:2 (uncompressed).")
ENUM_VALUE_CbPerfCounter(CcDccKeyValue1Block4To41Block2To11Block2To2	,337,	"NEO ONLY; From DCC Compressor in Color Cache:  Number of times sector 2 was compressed as 4:4 (uncompressed), sector 1 was compressed as 2:1 blocks and sector 0 was compressed as 2:2 (uncompressed).")
ENUM_VALUE_CbPerfCounter(CcDccKeyValue1Block4To11Block2To21Block2To1	,338,	"NEO ONLY; From DCC Compressor in Color Cache:  Number of times sector 2 was compressed as 4:1 blocks, sector 1 was compressed as 2:2 (uncompressed) and sector 0 was compressed as 2:1 blocks.")
ENUM_VALUE_CbPerfCounter(CcDccKeyValue1Block4To21Block2To21Block2To1	,339,	"NEO ONLY; From DCC Compressor in Color Cache:  Number of times sector 2 was compressed as 4:2 blocks, sector 1 was compressed as 2:2 (uncompressed) and sector 0 was compressed as 2:1 blocks.")
ENUM_VALUE_CbPerfCounter(CcDccKeyValue1Block4To31Block2To21Block2To1	,340,	"NEO ONLY; From DCC Compressor in Color Cache:  Number of times sector 2 was compressed as 4:3 blocks, sector 1 was compressed as 2:2 (uncompressed) and sector 0 was compressed as 2:1 blocks.")
ENUM_VALUE_CbPerfCounter(CcDccKeyValue1Block4To41Block2To21Block2To1	,341,	"NEO ONLY; From DCC Compressor in Color Cache:  Number of times sector 2 was compressed as 4:4 (uncompressed), sector 1 was compressed as 2:2 (uncompressed) and sector 0 was compressed as 2:1 blocks.")
ENUM_VALUE_CbPerfCounter(CcDccKeyValue1Block2To11Block6To1				,342,	"NEO ONLY; From DCC Compressor in Color Cache:  Number of times sector 1 was compressed as 2:1 blocks and sector 0 was compressed as 6:1 blocks.")
ENUM_VALUE_CbPerfCounter(CcDccKeyValue1Block2To11Block6To2				,343,	"NEO ONLY; From DCC Compressor in Color Cache:  Number of times sector 1 was compressed as 2:1 blocks and sector 0 was compressed as 6:2 blocks.")
ENUM_VALUE_CbPerfCounter(CcDccKeyValue1Block2To11Block6To3				,344,	"NEO ONLY; From DCC Compressor in Color Cache:  Number of times sector 1 was compressed as 2:1 blocks and sector 0 was compressed as 6:3 blocks.")
ENUM_VALUE_CbPerfCounter(CcDccKeyValue1Block2To11Block6To4				,345,	"NEO ONLY; From DCC Compressor in Color Cache:  Number of times sector 1 was compressed as 2:1 blocks and sector 0 was compressed as 6:4 blocks.")
ENUM_VALUE_CbPerfCounter(CcDccKeyValue1Block2To11Block6To5				,346,	"NEO ONLY; From DCC Compressor in Color Cache:  Number of times sector 1 was compressed as 2:1 blocks and sector 0 was compressed as 6:5 blocks.")
ENUM_VALUE_CbPerfCounter(CcDccKeyValue1Block2To11Block6To6				,347,	"NEO ONLY; From DCC Compressor in Color Cache:  Number of times sector 1 was compressed as 2:1 blocks and sector 0 was compressed as 6:6 (uncompressed).")
ENUM_VALUE_CbPerfCounter(CcDccKeyValue1Block2To1Inv0					,348,	"NEO ONLY; From DCC Compressor in Color Cache:  Number of times sector 1 was compressed as 2:1 blocks and the key for the 6:x compression blocks is invalid (top 3 bits of the key are 3'b110).")
ENUM_VALUE_CbPerfCounter(CcDccKeyValue1Block2To1Inv1					,349,	"NEO ONLY; From DCC Compressor in Color Cache:  Number of times sector 1 was compressed as 2:1 blocks and the key for the 6:x compression blocks is invalid (top 3 bits of the key are 3'b111).")
ENUM_VALUE_CbPerfCounter(CcDccKeyValue1Block2To21Block6To1				,350,	"NEO ONLY; From DCC Compressor in Color Cache:  Number of times sector 1 was compressed as 2:2 (uncompressed) and sector 0 was compressed as 6:1 blocks.")
ENUM_VALUE_CbPerfCounter(CcDccKeyValue1Block2To21Block6To2				,351,	"NEO ONLY; From DCC Compressor in Color Cache:  Number of times sector 1 was compressed as 2:2 (uncompressed) and sector 0 was compressed as 6:2 blocks.")
ENUM_VALUE_CbPerfCounter(CcDccKeyValue1Block2To21Block6To3				,352,	"NEO ONLY; From DCC Compressor in Color Cache:  Number of times sector 1 was compressed as 2:2 (uncompressed) and sector 0 was compressed as 6:3 blocks.")
ENUM_VALUE_CbPerfCounter(CcDccKeyValue1Block2To21Block6To4				,353,	"NEO ONLY; From DCC Compressor in Color Cache:  Number of times sector 1 was compressed as 2:2 (uncompressed) and sector 0 was compressed as 6:4 blocks.")
ENUM_VALUE_CbPerfCounter(CcDccKeyValue1Block2To21Block6To5				,354,	"NEO ONLY; From DCC Compressor in Color Cache:  Number of times sector 1 was compressed as 2:2 (uncompressed) and sector 0 was compressed as 6:5 blocks.")
ENUM_VALUE_CbPerfCounter(CcDccKeyValue1Block2To2Inv0					,355,	"NEO ONLY; From DCC Compressor in Color Cache:  Number of times sector 1 was compressed as 2:2 (uncompressed) and the key for the 6:x compression blocks is invalid (top 3 bits of the key are 3'b110).")
ENUM_VALUE_CbPerfCounter(CcDccKeyValue1Block2To2Inv1					,356,	"NEO ONLY; From DCC Compressor in Color Cache:  Number of times sector 1 was compressed as 2:2 (uncompressed) and the key for the 6:x compression blocks is invalid (top 3 bits of the key are 3'b111).")
ENUM_VALUE_CbPerfCounter(CcDccKeyValue1Block6To11Block2To1				,357,	"NEO ONLY; From DCC Compressor in Color Cache:  Number of times sector 1 was compressed as 6:1 blocks and sector 0 was compressed as 2:1 blocks.")
ENUM_VALUE_CbPerfCounter(CcDccKeyValue1Block6To21Block2To1				,358,	"NEO ONLY; From DCC Compressor in Color Cache:  Number of times sector 1 was compressed as 6:2 blocks and sector 0 was compressed as 2:1 blocks.")
ENUM_VALUE_CbPerfCounter(CcDccKeyValue1Block6To31Block2To1				,359,	"NEO ONLY; From DCC Compressor in Color Cache:  Number of times sector 1 was compressed as 6:3 blocks and sector 0 was compressed as 2:1 blocks.")
ENUM_VALUE_CbPerfCounter(CcDccKeyValue1Block6To41Block2To1				,360,	"NEO ONLY; From DCC Compressor in Color Cache:  Number of times sector 1 was compressed as 6:4 blocks and sector 0 was compressed as 2:1 blocks.")
ENUM_VALUE_CbPerfCounter(CcDccKeyValue1Block6To51Block2To1				,361,	"NEO ONLY; From DCC Compressor in Color Cache:  Number of times sector 1 was compressed as 6:5 blocks and sector 0 was compressed as 2:1 blocks.")
ENUM_VALUE_CbPerfCounter(CcDccKeyValue1Block6To61Block2To1				,362,	"NEO ONLY; From DCC Compressor in Color Cache:  Number of times sector 1 was compressed as 6:6 (uncompressed) and sector 0 was compressed as 2:1 blocks.")
ENUM_VALUE_CbPerfCounter(CcDccKeyValueInv01Block2To1					,363,	"NEO ONLY; From DCC Compressor in Color Cache:  Number of times sector 0 was compressed as 2:1 blocks and the key for the 6:x compression blocks is invalid (top 3 bits of the key are 3'b110).")
ENUM_VALUE_CbPerfCounter(CcDccKeyValueInv11Block2To1					,364,	"NEO ONLY; From DCC Compressor in Color Cache:  Number of times sector 0 was compressed as 2:1 blocks and the key for the 6:x compression blocks is invalid (top 3 bits of the key are 3'b111).")
ENUM_VALUE_CbPerfCounter(CcDccKeyValue1Block6To11Block2To2				,365,	"NEO ONLY; From DCC Compressor in Color Cache:  Number of times sector 1 was compressed as 6:1 blocks and sector 0 was compressed as 2:2 (uncompressed).")
ENUM_VALUE_CbPerfCounter(CcDccKeyValue1Block6To21Block2To2				,366,	"NEO ONLY; From DCC Compressor in Color Cache:  Number of times sector 1 was compressed as 6:2 blocks and sector 0 was compressed as 2:2 (uncompressed).")
ENUM_VALUE_CbPerfCounter(CcDccKeyValue1Block6To31Block2To2				,367,	"NEO ONLY; From DCC Compressor in Color Cache:  Number of times sector 1 was compressed as 6:3 blocks and sector 0 was compressed as 2:2 (uncompressed).")
ENUM_VALUE_CbPerfCounter(CcDccKeyValue1Block6To41Block2To2				,368,	"NEO ONLY; From DCC Compressor in Color Cache:  Number of times sector 1 was compressed as 6:4 blocks and sector 0 was compressed as 2:2 (uncompressed).")
ENUM_VALUE_CbPerfCounter(CcDccKeyValue1Block6To51Block2To2				,369,	"NEO ONLY; From DCC Compressor in Color Cache:  Number of times sector 1 was compressed as 6:5 blocks and sector 0 was compressed as 2:2 (uncompressed).")
ENUM_VALUE_CbPerfCounter(CcDccKeyValueInv01Block2To2					,370,	"NEO ONLY; From DCC Compressor in Color Cache:  Number of times sector 0 was compressed as 2:2 (uncompressed) and the key for the 6:x compression blocks is invalid (top 3 bits of the key are 3'b110).")
ENUM_VALUE_CbPerfCounter(CcDccKeyValueInv11Block2To2					,371,	"NEO ONLY; From DCC Compressor in Color Cache:  Number of times sector 0 was compressed as 2:2 (uncompressed) and the key for the 6:x compression blocks is invalid (top 3 bits of the key are 3'b111).")
ENUM_VALUE_CbPerfCounter(CcDccKeyValue1Block8To1						,372,	"NEO ONLY; From DCC Compressor in Color Cache:  Number of times sector 0 was compressed as 8:1 blocks.")
ENUM_VALUE_CbPerfCounter(CcDccKeyValue1Block8To2						,373,	"NEO ONLY; From DCC Compressor in Color Cache:  Number of times sector 0 was compressed as 8:2 blocks.")
ENUM_VALUE_CbPerfCounter(CcDccKeyValue1Block8To3						,374,	"NEO ONLY; From DCC Compressor in Color Cache:  Number of times sector 0 was compressed as 8:3 blocks.")
ENUM_VALUE_CbPerfCounter(CcDccKeyValue1Block8To4						,375,	"NEO ONLY; From DCC Compressor in Color Cache:  Number of times sector 0 was compressed as 8:4 blocks.")
ENUM_VALUE_CbPerfCounter(CcDccKeyValue1Block8To5						,376,	"NEO ONLY; From DCC Compressor in Color Cache:  Number of times sector 0 was compressed as 8:5 blocks.")
ENUM_VALUE_CbPerfCounter(CcDccKeyValue1Block8To6						,377,	"NEO ONLY; From DCC Compressor in Color Cache:  Number of times sector 0 was compressed as 8:6 blocks.")
ENUM_VALUE_CbPerfCounter(CcDccKeyValue1Block8To7						,378,	"NEO ONLY; From DCC Compressor in Color Cache:  Number of times sector 0 was compressed as 8:7 blocks.")
ENUM_VALUE_CbPerfCounter(CcDccKeyValueUncompressed						,379,	"NEO ONLY; From DCC Compressor in Color Cache:  Number of times all sectors of a cacheline were uncompressed with a 2:2 ratio.")
ENUM_VALUE_CbPerfCounter(CcDccCompressRatio2To1							,380,	"NEO ONLY; From DCC Compressor in Color Cache:  Number of times a sector was compressed as 2:1.")
ENUM_VALUE_CbPerfCounter(CcDccCompressRatio4To1							,381,	"NEO ONLY; From DCC Compressor in Color Cache:  Number of times a sector was compressed as 4:1.")
ENUM_VALUE_CbPerfCounter(CcDccCompressRatio4To2							,382,	"NEO ONLY; From DCC Compressor in Color Cache:  Number of times a sector was compressed as 4:2.")
ENUM_VALUE_CbPerfCounter(CcDccCompressRatio4To3							,383,	"NEO ONLY; From DCC Compressor in Color Cache:  Number of times a sector was compressed as 4:3.")
ENUM_VALUE_CbPerfCounter(CcDccCompressRatio6To1							,384,	"NEO ONLY; From DCC Compressor in Color Cache:  Number of times a sector was compressed as 6:1.")
ENUM_VALUE_CbPerfCounter(CcDccCompressRatio6To2							,385,	"NEO ONLY; From DCC Compressor in Color Cache:  Number of times a sector was compressed as 6:2.")
ENUM_VALUE_CbPerfCounter(CcDccCompressRatio6To3							,386,	"NEO ONLY; From DCC Compressor in Color Cache:  Number of times a sector was compressed as 6:3.")
ENUM_VALUE_CbPerfCounter(CcDccCompressRatio6To4							,387,	"NEO ONLY; From DCC Compressor in Color Cache:  Number of times a sector was compressed as 6:4.")
ENUM_VALUE_CbPerfCounter(CcDccCompressRatio6To5							,388,	"NEO ONLY; From DCC Compressor in Color Cache:  Number of times a sector was compressed as 6:5.")
ENUM_VALUE_CbPerfCounter(CcDccCompressRatio8To1							,389,	"NEO ONLY; From DCC Compressor in Color Cache:  Number of times a sector was compressed as 8:1.")
ENUM_VALUE_CbPerfCounter(CcDccCompressRatio8To2							,390,	"NEO ONLY; From DCC Compressor in Color Cache:  Number of times a sector was compressed as 8:2.")
ENUM_VALUE_CbPerfCounter(CcDccCompressRatio8To3							,391,	"NEO ONLY; From DCC Compressor in Color Cache:  Number of times a sector was compressed as 8:3.")
ENUM_VALUE_CbPerfCounter(CcDccCompressRatio8To4							,392,	"NEO ONLY; From DCC Compressor in Color Cache:  Number of times a sector was compressed as 8:4.")
ENUM_VALUE_CbPerfCounter(CcDccCompressRatio8To5							,393,	"NEO ONLY; From DCC Compressor in Color Cache:  Number of times a sector was compressed as 8:5.")
ENUM_VALUE_CbPerfCounter(CcDccCompressRatio8To6							,394,	"NEO ONLY; From DCC Compressor in Color Cache:  Number of times a sector was compressed as 8:6.")
ENUM_VALUE_CbPerfCounter(CcDccCompressRatio8To7							,395,	"NEO ONLY; From DCC Compressor in Color Cache:  Number of times a sector was compressed as 8:7.")

#ifndef ENUM_VALUE_DbPerfCounter
#define ENUM_VALUE_DbPerfCounter(sym, val, desc_string)
#endif
ENUM_VALUE_DbPerfCounter(ScDbTileSends							,  0,	"Cycles SC_DB_tile interface is sending")
ENUM_VALUE_DbPerfCounter(ScDbTileBusy							,  1,	"Cycles SC_DB_tile interface is busy")
ENUM_VALUE_DbPerfCounter(ScDbTileStalls							,  2,	"Cycles SC_DB_tile interface is stalled")
ENUM_VALUE_DbPerfCounter(ScDbTileEvents							,  3,	"Events sent over SC_DB_tile interface")
ENUM_VALUE_DbPerfCounter(ScDbTileTiles							,  4,	"Tiles sent over SC_DB_tile interface")
ENUM_VALUE_DbPerfCounter(ScDbTileCovered						,  5,	"Fully covered tiles")
ENUM_VALUE_DbPerfCounter(HizTcReadStarved						,  6,	"Cycles HiZ starved waiting for htile data from cache")
ENUM_VALUE_DbPerfCounter(HizTcWriteStall						,  7,	"Cycles HiZ stalled writing to htile cache")
ENUM_VALUE_DbPerfCounter(HizQtilesCulled						,  8,	"Quarter tiles culled by HiZ")
ENUM_VALUE_DbPerfCounter(HisQtilesCulled						,  9,	"Quarter tiles culled by HiS")
ENUM_VALUE_DbPerfCounter(DbScTileSends							, 10,	"Cycles DB_SC_tile interface is sending")
ENUM_VALUE_DbPerfCounter(DbScTileBusy							, 11,	"Cycles DB_SC_tile interface is busy")
ENUM_VALUE_DbPerfCounter(DbScTileStalls							, 12,	"Cycles DB_SC_tile interface is stalled by SC")
ENUM_VALUE_DbPerfCounter(DbScTileDfStalls						, 13,	"Cycles DB_SC_tile interface is stalled by detail walk tile fifo")
ENUM_VALUE_DbPerfCounter(DbScTileTiles							, 14,	"Tiles sent over DB_SC_tile interface")
ENUM_VALUE_DbPerfCounter(DbScTileCulled							, 15,	"Tiles culled in total")
ENUM_VALUE_DbPerfCounter(DbScTileHierKill						, 16,	"Tiles culled due to a hierarchical fail test")
ENUM_VALUE_DbPerfCounter(DbScTileFastOps						, 17,	"Tiles culled because they were accerated fast tile ops.")
ENUM_VALUE_DbPerfCounter(DbScTileNoOps							, 18,	"Tiles culled because they would not do anything")
ENUM_VALUE_DbPerfCounter(DbScTileTileRate						, 19,	"Tiles run at tile rate as opposed to sample rate tile")
ENUM_VALUE_DbPerfCounter(DbScTileSsaaKill						, 20,	"Tiles culled because they were supersample tiles that are merged into a fast tile op")
ENUM_VALUE_DbPerfCounter(DbScTileFastZOps						, 21,	"Tiles that operate on Z in 1 clock.  Can be inside a slow, pixel rate, or fast tile op")
ENUM_VALUE_DbPerfCounter(DbScTileFastStencilOps					, 22,	"Tiles that operate on stencil in 1 clock.  Can be inside a slow, pixel rate, or fast tile op")
ENUM_VALUE_DbPerfCounter(ScDbQuadSends							, 23,	"Cycles SC_DB_quad interface is sending")
ENUM_VALUE_DbPerfCounter(ScDbQuadBusy							, 24,	"Cycles SC_DB_quad interface is busy")
ENUM_VALUE_DbPerfCounter(ScDbQuadSquads							, 25,	"Squads transferred over SC_DB_quad interface")
ENUM_VALUE_DbPerfCounter(ScDbQuadTiles							, 26,	"Tiles sent over SC_DB_quad interface")
ENUM_VALUE_DbPerfCounter(ScDbQuadPixels							, 27,	"Pixels transfered over SC_DB_quad interface")
ENUM_VALUE_DbPerfCounter(ScDbQuadKilledTiles					, 28,	"Number of detail killed tiles")
ENUM_VALUE_DbPerfCounter(DbScQuadSends							, 29,	"Cycles DB_SC_quad interface is sending")
ENUM_VALUE_DbPerfCounter(DbScQuadBusy							, 30,	"Cycles DB_SC_quad interface is busy")
ENUM_VALUE_DbPerfCounter(DbScQuadStalls							, 31,	"Cycles DB_SC_quad interface is stalled")
ENUM_VALUE_DbPerfCounter(DbScQuadTiles							, 32,	"Tiles sent over DB_SC_quad interface")
ENUM_VALUE_DbPerfCounter(DbScQuadLitQuad						, 33,	"Quads transferred over the DB_SC_quad interface that are lit")
ENUM_VALUE_DbPerfCounter(DbCbTileSends							, 34,	"Cycles sending tiles/events to CB. Tiles not shaded or needed by the CB are not sent.")
ENUM_VALUE_DbPerfCounter(DbCbTileBusy							, 35,	"Cycles DB_CB_tile interface is busy")
ENUM_VALUE_DbPerfCounter(DbCbTileStalls							, 36,	"Cycles DB_CB_tile interface is stalled")
ENUM_VALUE_DbPerfCounter(SxDbQuadSends							, 37,	"Cycles SX_DB_quad interface is sending")
ENUM_VALUE_DbPerfCounter(SxDbQuadBusy							, 38,	"Cycles SX_DB_quad interface is busy")
ENUM_VALUE_DbPerfCounter(SxDbQuadStalls							, 39,	"Cycles SX_DB_quad interface is stalled")
ENUM_VALUE_DbPerfCounter(SxDbQuadQuads							, 40,	"Quads sent over SX_DB_quad interface. In most usage, all quads that are pixel shaded are counted here, once each, regardless of the number of color render targets.")
ENUM_VALUE_DbPerfCounter(SxDbQuadPixels							, 41,	"Pixels sent over SX_DB_quad interface. In most usage, all pixels that are pixel shaded are counted here, once each, regardless of the number of color render targets.")
ENUM_VALUE_DbPerfCounter(SxDbQuadExports						, 42,	"Each MRT of a quad sent over interface")
ENUM_VALUE_DbPerfCounter(ShQuadsOutstandingSum					, 43,	"Multiply by 128 and divide by kDbPerfCounterSxDbQuadQuads? to get PS latency.")
ENUM_VALUE_DbPerfCounter(DbCbLquadSends							, 44,	"Cycles DB_CB_lquad interface is sending")
ENUM_VALUE_DbPerfCounter(DbCbLquadBusy							, 45,	"Cycles DB_CB_lquad interface is busy")
ENUM_VALUE_DbPerfCounter(DbCbLquadStalls						, 46,	"Cycles DB_CB_lquad interface is stalled")
ENUM_VALUE_DbPerfCounter(DbCbLquadQuads							, 47,	"Quads sent over DB_CB_lquad interface")
ENUM_VALUE_DbPerfCounter(TileRdSends							, 48,	"HTILE reads. Each is 256 bytes. This directly measures the memory-to-DB read bandwidth originating from HTILE buffer updates.")
ENUM_VALUE_DbPerfCounter(MiTileRdOutstandingSum					, 49,	"Multiply by 16 and divide by kDbPerfCounterTileRdSends*8 to get htile memory latency")
ENUM_VALUE_DbPerfCounter(QuadRdSends							, 50,	"Quad read reqs.  Each is 32B to 256B")
ENUM_VALUE_DbPerfCounter(QuadRdBusy								, 51,	"Cycles quad read interface is trying to send requests")
ENUM_VALUE_DbPerfCounter(QuadRdMiStall							, 52,	"Cycles quad read interface is stalled by the memory interface")
ENUM_VALUE_DbPerfCounter(QuadRdRwCollision						, 53,	"Cycles a quad read is stalled waiting for a write to finish")
ENUM_VALUE_DbPerfCounter(QuadRdTagStall							, 54,	"Cycles a quad read is stalled because the read latency hiding fifo is full.")
ENUM_VALUE_DbPerfCounter(QuadRd32ByteReqs						, 55,	"Number of 32 byte quad read requests. This directly measures the memory-to-DB read bandwidth originating from depth-stencil buffer updates.")
ENUM_VALUE_DbPerfCounter(QuadRdPanic							, 56,	"Cycles DB is panicing for quad read data")
ENUM_VALUE_DbPerfCounter(MiQuadRdOutstandingSum					, 57,	"Multiply by 16 and divide by kDbPerfCounterQuadRd32ByteReqs to get depth buffer memory latency")
ENUM_VALUE_DbPerfCounter(QuadRdretSends							, 58,	"Number of 32 byte quad read returns")
ENUM_VALUE_DbPerfCounter(QuadRdretBusy							, 59,	"Cycles the quad read data is returning")
ENUM_VALUE_DbPerfCounter(TileWrSends							, 60,	"32 byte HTILE writes. This directly measures the DB-to-memory write bandwidth originating from HTILE buffer updates.")
ENUM_VALUE_DbPerfCounter(TileWrAcks								, 61,	"32 Byte Htile write acks")
ENUM_VALUE_DbPerfCounter(MiTileWrOutstandingSum					, 62,	"Multiply by 16 and divide by kDbPerfCounterTileWrSends to get tile write memory latency")
ENUM_VALUE_DbPerfCounter(QuadWrSends							, 63,	"Cycles quad is sending write requests to the memory interface block of the DB")
ENUM_VALUE_DbPerfCounter(QuadWrBusy								, 64,	"Cycles quad is trying to write to the memory interface")
ENUM_VALUE_DbPerfCounter(QuadWrMiStall							, 65,	"Cycles quad is stalled while writing to the memory interface")
ENUM_VALUE_DbPerfCounter(QuadWrCoherencyStall					, 66,	"Cycles quad write is stalled waiting for a previous write to finish on the same address")
ENUM_VALUE_DbPerfCounter(QuadWrAcks								, 67,	"Number of 32 byte quad write acknowledgements. This indirectly and perhaps approximately measures the DB-to-memory write bandwidth originating from depth-stencil buffer updates.")
ENUM_VALUE_DbPerfCounter(MiQuadWrOutstandingSum					, 68,	"Multiply by 16 and divide by the kDbPerfCounterQuadWrSends to get quad memory write latency")
ENUM_VALUE_DbPerfCounter(TileCacheMisses						, 69,	"Htile Cache misses")
ENUM_VALUE_DbPerfCounter(TileCacheHits							, 70,	"Htile Cache hits")
ENUM_VALUE_DbPerfCounter(TileCacheFlushes						, 71,	"Htile Cache flushes")
ENUM_VALUE_DbPerfCounter(TileCacheSurfaceStall					, 72,	"Tile stalls waiting for an htile surface to flush and free")
ENUM_VALUE_DbPerfCounter(TileCacheStarves						, 73,	"Tile stalls waiting for an htile cacheline to free")
ENUM_VALUE_DbPerfCounter(TileCacheMemReturnStarve				, 74,	"Tile stalls waiting for an htile memory read to return")
ENUM_VALUE_DbPerfCounter(TcpDispatcherReads						, 75,	"Number of htile cachelines fetched by the normal tile stream")
ENUM_VALUE_DbPerfCounter(TcpPrefetcherReads						, 76,	"Number of htile cachelines fetched by the prefetcher")
ENUM_VALUE_DbPerfCounter(TcpPreloaderReads						, 77,	"Number of htile cachelines fetched by the preloader")
ENUM_VALUE_DbPerfCounter(TcpDispatcherFlushes					, 78,	"Number of htile flushes caused byt the normal tile stream")
ENUM_VALUE_DbPerfCounter(TcpPrefetcherFlushes					, 79,	"Number of htile flushes caused byt the normal prefetcher")
ENUM_VALUE_DbPerfCounter(TcpPreloaderFlushes					, 80,	"Number of htile flushes caused byt the normal preloader")
ENUM_VALUE_DbPerfCounter(DepthTileCacheSends					, 81,	"Tiles/Events through the Depth Tile Cache")
ENUM_VALUE_DbPerfCounter(DepthTileCacheBusy						, 82,	"Cycles the Depth Tile Cache is busy testing hit/miss on tiles/events")
ENUM_VALUE_DbPerfCounter(DepthTileCacheStarves					, 83,	"Cycles starved waiting for a depth surface tile tag to free up")
ENUM_VALUE_DbPerfCounter(DepthTileCacheDtileLocked				, 84,	"Cycles stalled waiting for a forced flush or invalidate to finish")
ENUM_VALUE_DbPerfCounter(DepthTileCacheAllocStall				, 85,	"Cycles depth tile stalled while allocating data")
ENUM_VALUE_DbPerfCounter(DepthTileCacheMisses					, 86,	"Depth/Stencil Cache tile misses")
ENUM_VALUE_DbPerfCounter(DepthTileCacheHits						, 87,	"Depth/Stencil Cache tile hits")
ENUM_VALUE_DbPerfCounter(DepthTileCacheFlushes					, 88,	"Depth/Stencil Cache tile flushes")
ENUM_VALUE_DbPerfCounter(DepthTileCacheNoopTile					, 89,	"Noop tiles through the depth tile cache")
ENUM_VALUE_DbPerfCounter(DepthTileCacheDetailedNoop				, 90,	"Detail walked noops though the depth tile cache")
ENUM_VALUE_DbPerfCounter(DepthTileCacheEvent					, 91,	"Events through the Depth Tile Cache")
ENUM_VALUE_DbPerfCounter(DepthTileCacheTileFrees				, 92,	"Depth tile frees")
ENUM_VALUE_DbPerfCounter(DepthTileCacheDataFrees				, 93,	"Depth tile data frees (may free data without freeing the dtile)")
ENUM_VALUE_DbPerfCounter(DepthTileCacheMemReturnStarve			, 94,	"Cycles depth/stencil cache is waiting for memory to return")
ENUM_VALUE_DbPerfCounter(StencilCacheMisses						, 95,	"Stencil cache misses; each allocates 512 bits")
ENUM_VALUE_DbPerfCounter(StencilCacheHits						, 96,	"Stencil cache hits")
ENUM_VALUE_DbPerfCounter(StencilCacheFlushes					, 97,	"Stencil cache flushes; each writes 256 bits. Two per cacheline unless it is compressed, in which case it is 1.")
ENUM_VALUE_DbPerfCounter(StencilCacheStarves					, 98,	"Stencil cache starves when the cache wants to miss but is out of cachelines to allocate")
ENUM_VALUE_DbPerfCounter(StencilCacheFrees						, 99,	"Stencil cache frees")
ENUM_VALUE_DbPerfCounter(ZCacheSeparateZMisses					,100,	"Z cache misses for separate Z")
ENUM_VALUE_DbPerfCounter(ZCacheSeparateZHits					,101,	"Z cache hits for separate Z")
ENUM_VALUE_DbPerfCounter(ZCacheSeparateZFlushes					,102,	"Z cache flushes of separate Z")
ENUM_VALUE_DbPerfCounter(ZCacheSeparateZStarves					,103,	"Z cache starves when the cache wants to miss but is out of cachelines to allocate for separate Z")
ENUM_VALUE_DbPerfCounter(ZCachePmaskMisses						,104,	"Z cache misses for plane mask")
ENUM_VALUE_DbPerfCounter(ZCachePmaskHits						,105,	"Z cache hits for plane mask")
ENUM_VALUE_DbPerfCounter(ZCachePmaskFlushes						,106,	"Z cache flushes of plane mask")
ENUM_VALUE_DbPerfCounter(ZCachePmaskStarves						,107,	"Z cache starves when the cache wants to miss but is out of cachelines to allocate for plane mask")
ENUM_VALUE_DbPerfCounter(ZCacheFrees							,108,	"Z cache frees")
ENUM_VALUE_DbPerfCounter(PlaneCacheMisses						,109,	"Z-plane cache misses")
ENUM_VALUE_DbPerfCounter(PlaneCacheHits							,110,	"Z-plane cache hits")
ENUM_VALUE_DbPerfCounter(PlaneCacheFlushes						,111,	"Z-plane cache flushes")
ENUM_VALUE_DbPerfCounter(PlaneCacheStarves						,112,	"Z-plane cache starves when the cache wants to miss but is out of cachelines to allocate")
ENUM_VALUE_DbPerfCounter(PlaneCacheFrees						,113,	"Z-plane cache frees")
ENUM_VALUE_DbPerfCounter(FlushExpandedStencil					,114,	"Tiles flushed with with expanded stencil")
ENUM_VALUE_DbPerfCounter(FlushCompressedStencil					,115,	"Tiles flushed with with compressed stencil")
ENUM_VALUE_DbPerfCounter(FlushSingleStencil						,116,	"Tiles flushed with with single stencil")
ENUM_VALUE_DbPerfCounter(PlanesFlushed							,117,	"Total planes flushed among all tiles")
ENUM_VALUE_DbPerfCounter(Flush1Plane							,118,	"Tiles flushed with 1 ZPlane")
ENUM_VALUE_DbPerfCounter(Flush2Plane							,119,	"Tiles flushed with 2 ZPlanes")
ENUM_VALUE_DbPerfCounter(Flush3Plane							,120,	"Tiles flushed with 3 ZPlanes")
ENUM_VALUE_DbPerfCounter(Flush4Plane							,121,	"Tiles flushed with 4 ZPlanes")
ENUM_VALUE_DbPerfCounter(Flush5Plane							,122,	"Tiles flushed with 5 ZPlanes")
ENUM_VALUE_DbPerfCounter(Flush6Plane							,123,	"Tiles flushed with 6 ZPlanes")
ENUM_VALUE_DbPerfCounter(Flush7Plane							,124,	"Tiles flushed with 7 ZPlanes")
ENUM_VALUE_DbPerfCounter(Flush8Plane							,125,	"Tiles flushed with 8 ZPlanes")
ENUM_VALUE_DbPerfCounter(Flush9Plane							,126,	"Tiles flushed with 9 ZPlanes")
ENUM_VALUE_DbPerfCounter(Flush10Plane							,127,	"Tiles flushed with 10 ZPlanes")
ENUM_VALUE_DbPerfCounter(Flush11Plane							,128,	"Tiles flushed with 11 ZPlanes")
ENUM_VALUE_DbPerfCounter(Flush12Plane							,129,	"Tiles flushed with 12 ZPlanes")
ENUM_VALUE_DbPerfCounter(Flush13Plane							,130,	"Tiles flushed with 13 ZPlanes")
ENUM_VALUE_DbPerfCounter(Flush14Plane							,131,	"Tiles flushed with 14 ZPlanes")
ENUM_VALUE_DbPerfCounter(Flush15Plane							,132,	"Tiles flushed with 15 ZPlanes")
ENUM_VALUE_DbPerfCounter(Flush16Plane							,133,	"Tiles flushed with 16 ZPlanes")
ENUM_VALUE_DbPerfCounter(FlushExpandedZ							,134,	"Tiles flushed with expanded Z")
ENUM_VALUE_DbPerfCounter(EarlyzWaitingForPostzDone				,135,	"Cycles stalled while transitioning from Late/ReZ to EarlyZ")
ENUM_VALUE_DbPerfCounter(RezWaitingForPostzDone					,136,	"Cycles stalled while transitioning to ReZ from an incompatible Z mode/func/etc.")
ENUM_VALUE_DbPerfCounter(DkTileSends							,137,	"Detail kill block tiles/squads/events sent")
ENUM_VALUE_DbPerfCounter(DkTileBusy								,138,	"Cycles Detail Kill block busy")
ENUM_VALUE_DbPerfCounter(DkTileQuadStarves						,139,	"Cycles Detail Kill has tile, but no quads from the SC_DB_quad")
ENUM_VALUE_DbPerfCounter(DkTileStalls							,140,	"Cycles Detail Kill is stalled from below")
ENUM_VALUE_DbPerfCounter(DkSquadSends							,141,	"Detail Kill squads")
ENUM_VALUE_DbPerfCounter(DkSquadBusy							,142,	"Cycles the squad Detail Kill input is busy")
ENUM_VALUE_DbPerfCounter(DkSquadStalls							,143,	"Cycles squads are stalled from below.")
ENUM_VALUE_DbPerfCounter(OpPipeBusy								,144,	"Cycles the quad OP pipe of the DB is busy (including memory fetches, but not initial startup)")
ENUM_VALUE_DbPerfCounter(OpPipeMcReadStall						,145,	"Cycles the Op Pipe is waiting for memory to return (ignoring initial startup)")
ENUM_VALUE_DbPerfCounter(QcBusy									,146,	"Cycles the quad coherency is busy")
ENUM_VALUE_DbPerfCounter(QcXfc									,147,	"Squads going through the quad coherency block")
ENUM_VALUE_DbPerfCounter(QcConflicts							,148,	"Stalls ona a squad input because of a coherency check conflict (squads ahead of it could affect the dest data)")
ENUM_VALUE_DbPerfCounter(QcFullStall							,149,	"Quad Coherency is stalled because it is out of slots.")
ENUM_VALUE_DbPerfCounter(QcInPrezTileStallsPostz				,150,	"Cycles postZ squad inputs are stalled because the OP pipe is operating on a preZ tile, and there is no PreZ squad input available")
ENUM_VALUE_DbPerfCounter(QcInPostzTileStallsPrez				,151,	"Cycles preZ squad inputs are stalled because the OP pipe is operating on a postZ tile, and there is no PostZ squad input available")
ENUM_VALUE_DbPerfCounter(TscInsertSummarizeStall				,152,	"Cycles the op pipe is stalled by the tile summarizer inserting summarize squads")
ENUM_VALUE_DbPerfCounter(TlBusy									,153,	"Cycles Tile Lookup block busy")
ENUM_VALUE_DbPerfCounter(TlDtcReadStarved						,154,	"Cycles Tile Lookup block")
ENUM_VALUE_DbPerfCounter(TlZFetchStall							,155,	"Cycles Tile Lookup block stalled by zfetch block")
ENUM_VALUE_DbPerfCounter(TlStencilStall							,156,	"Cycles Tile Lookup block stalled by stencil test block")
ENUM_VALUE_DbPerfCounter(TlZDecompressStall						,157,	"Cycles Tile Lookup block stalled by z decompress block")
ENUM_VALUE_DbPerfCounter(TlStencilLockedStall					,158,	"Cycles Tile Lookup block stalled by stencil being locked")
ENUM_VALUE_DbPerfCounter(TlEvents								,159,	"Cycles Tile Lookup block sends out events")
ENUM_VALUE_DbPerfCounter(TlSummarizeSquads						,160,	"Cycles Tile Lookup block sends out summarize squads")
ENUM_VALUE_DbPerfCounter(TlFlushExpandSquads					,161,	"Cycles Tile Lookup block sends out flush expand squads")
ENUM_VALUE_DbPerfCounter(TlExpandSquads							,162,	"Cycles Tile Lookup block sends out expand squads")
ENUM_VALUE_DbPerfCounter(TlPrezSquads							,163,	"Cycles Tile Lookup block sends out preZ squads")
ENUM_VALUE_DbPerfCounter(TlPostzSquads							,164,	"Cycles Tile Lookup block sends out postZ squads")
ENUM_VALUE_DbPerfCounter(TlPrezNoopSquads						,165,	"Cycles Tile Lookup block sends out noops on the preZ path")
ENUM_VALUE_DbPerfCounter(TlPostzNoopSquads						,166,	"Cycles Tile Lookup block sends out noops on the postZ path")
ENUM_VALUE_DbPerfCounter(TlTileOps								,167,	"Cycles Tile Lookup block sends out tile op squads")
ENUM_VALUE_DbPerfCounter(TlInXfc								,168,	"Cycles Tile Lookup block receives any input")
ENUM_VALUE_DbPerfCounter(TlInSingleStencilExpandStall			,169,	"Cycles Tile Lookup block is stalling due to expanding single stencil")
ENUM_VALUE_DbPerfCounter(TlInFastZStall							,170,	"Cycles Tile Lookup block is stalling due to fastZ")
ENUM_VALUE_DbPerfCounter(TlOutXfc								,171,	"Cycles Tile Lookup block is sending anything out")
ENUM_VALUE_DbPerfCounter(TlOutSquads							,172,	"Cycles Tile Lookup block is sending squads out")
ENUM_VALUE_DbPerfCounter(ZfPlaneMulticycle						,173,	"Cycles the z fetch is multicycling a squad because it needs to fetch more than 2 planes from the cache for compressed Z")
ENUM_VALUE_DbPerfCounter(PostzSamplesPassingZ					,174,	"Samples passing Z test during a PostZ pass")
ENUM_VALUE_DbPerfCounter(PostzSamplesFailingZ					,175,	"Samples failing Z test during a PostZ pass")
ENUM_VALUE_DbPerfCounter(PostzSamplesFailingS					,176,	"Samples failing Stencil test during a PostZ pass")
ENUM_VALUE_DbPerfCounter(PrezSamplesPassingZ					,177,	"Samples passing Z test during a PreZ pass")
ENUM_VALUE_DbPerfCounter(PrezSamplesFailingZ					,178,	"Samples failing Z test during a PreZ pass")
ENUM_VALUE_DbPerfCounter(PrezSamplesFailingS					,179,	"Samples failing Stencil test during a PreZ pass")
ENUM_VALUE_DbPerfCounter(TsTcUpdateStall						,180,	"Cycles Tile Summarizer to Tile Cache write interface is stalled")
ENUM_VALUE_DbPerfCounter(ScKickStart							,181,	"Times the DB sent a hang panic to the SC")
ENUM_VALUE_DbPerfCounter(ScKickEnd								,182,	"Times the DB completed a hang panic")
ENUM_VALUE_DbPerfCounter(ClockRegActive							,183,	"Cycles register part of DB is awake")
ENUM_VALUE_DbPerfCounter(ClockMainActive						,184,	"Cycles core part of DB is awake")
ENUM_VALUE_DbPerfCounter(ClockMemExportActive					,185,	"Cycles mem export part of DB is awake")
ENUM_VALUE_DbPerfCounter(EsrPsOutBusy							,186,	"Early Squad Router PS Iter Out cycles busy")
ENUM_VALUE_DbPerfCounter(EsrPsLqfBusy							,187,	"Early Squad Router to LQuad fifo cycles busy")
ENUM_VALUE_DbPerfCounter(EsrPsLqfStall							,188,	"Early Squad Router to LQuad fifo cycles stalled")
ENUM_VALUE_DbPerfCounter(EtrOutSend								,189,	"Squads being sent through the Early Tile Router")
ENUM_VALUE_DbPerfCounter(EtrOutBusy								,190,	"Cycles Early Tile router busy")
ENUM_VALUE_DbPerfCounter(EtrOutLtileProbeFifoFullStall			,191,	"Cycles Early Tile router is stalled due to ltile probe fifo being full")
ENUM_VALUE_DbPerfCounter(EtrOutCbTileStall						,192,	"Cycles Early Tile router is stalled due to running out of credits on cb tile interface")
ENUM_VALUE_DbPerfCounter(EtrOutEsrStall							,193,	"Cycles Early Tile router is stalled due to Early Squad router back pressure")
ENUM_VALUE_DbPerfCounter(EsrPsSqqBusy							,194,	"Cycles Early Squad Router squad-to-quad block busy")
ENUM_VALUE_DbPerfCounter(EsrPsSqqStall							,195,	"Cycles Early Squad Router squad-to-quad block stalled")
ENUM_VALUE_DbPerfCounter(EsrEotFwdBusy							,196,	"Cycles Early Squad Router end of tile forwarder busy")
ENUM_VALUE_DbPerfCounter(EsrEotFwdHoldingSquad					,197,	"Cycles Early Squad Router end of tile forwarder is holding an squad waiting for end of tile")
ENUM_VALUE_DbPerfCounter(EsrEotFwdForward						,198,	"Tiles where an end of tile is being forwarded")
ENUM_VALUE_DbPerfCounter(EsrSqqZiBusy							,199,	"Cycles Early Squad Router Z Interp busy")
ENUM_VALUE_DbPerfCounter(EsrSqqZiStall							,200,	"Cycles Early Squad Router Z Interp stalled")
ENUM_VALUE_DbPerfCounter(PostzlSqPtBusy							,201,	"Cycles PostZ Squad Launcher squad to tile sync interface busy")
ENUM_VALUE_DbPerfCounter(PostzlSqPtStall						,202,	"Cycles PostZ Squad Launcher squad to tile sync interface stalled")
ENUM_VALUE_DbPerfCounter(PostzlSeBusy							,203,	"Cycles PostZ Squad Launcher shader export busy")
ENUM_VALUE_DbPerfCounter(PostzlSeStall							,204,	"Cycles PostZ Squad Launcher shader export stalled")
ENUM_VALUE_DbPerfCounter(PostzlPartialLaunch					,205,	"Squads that are paritally launched by PostZ Squad Launcher")
ENUM_VALUE_DbPerfCounter(PostzlFullLaunch						,206,	"Squads that are fully launched by PostZ Squad Launcher")
ENUM_VALUE_DbPerfCounter(PostzlPartialWaiting					,207,	"Cycles a partial squad is waiting for more quads to fill in the squad")
ENUM_VALUE_DbPerfCounter(PostzlTileMemStall						,208,	"Cycles PostZ Squad Launcher stalled waiting for data from memory")
ENUM_VALUE_DbPerfCounter(PostzlTileInitStall					,209,	"Cycles PostZ Squad Launcher stalled waiting for cache to be initialized")
ENUM_VALUE_DbPerfCounter(PrezlTileMemStall						,210,	"Cycles PreZ Squad Launcher stalled waiting for data from memory")
ENUM_VALUE_DbPerfCounter(PrezlTileInitStall						,211,	"Cycles PreZ Squad Launcher stalled waiting for cache to be initialized")
ENUM_VALUE_DbPerfCounter(DttSmClashStall						,212,	"Cycles Depth Tile Tag Surface Manager stalled due to address clash with existing surface")
ENUM_VALUE_DbPerfCounter(DttSmSlotStall							,213,	"Cycles Depth Tile Tag Surface Manager stalled due to no slots being available")
ENUM_VALUE_DbPerfCounter(DttSmMissStall							,214,	"Cycles Depth Tile Tag Surface Manager stalled due to surface miss")
ENUM_VALUE_DbPerfCounter(MiRdreqBusy							,215,	"Cycles Memory Interface read request busy")
ENUM_VALUE_DbPerfCounter(MiRdreqStall							,216,	"Cycles Memory Interface read request stalled")
ENUM_VALUE_DbPerfCounter(MiWrreqBusy							,217,	"Cycles Memory Interface write request busy")
ENUM_VALUE_DbPerfCounter(MiWrreqStall							,218,	"Cycles Memory Interface write request stalled")
ENUM_VALUE_DbPerfCounter(RecompTileTo1ZplaneNoFastop			,219,	"Tiles that went to 1 zplane without a fast z op")
ENUM_VALUE_DbPerfCounter(DkgTileRateTile						,220,	"Tiles running at tile rate through detail kill block")
ENUM_VALUE_DbPerfCounter(PrezlSrcInSends						,221,	"Transactions going into Prez Squad Launcher Sample Rate converter")
ENUM_VALUE_DbPerfCounter(PrezlSrcInStall						,222,	"Cycles squad is stalled in the Prez Squad Launcher Sample Rate converter")
ENUM_VALUE_DbPerfCounter(PrezlSrcInSquads						,223,	"Squads going into Prez Squad Launcher Sample Rate converter")
ENUM_VALUE_DbPerfCounter(PrezlSrcInSquadsUnrolled				,224,	"Squads being unrolled in Prez Squad Launcher Sample Rate converter")
ENUM_VALUE_DbPerfCounter(PrezlSrcInTileRate						,225,	"Tile rate tiles going into the Prez Squad Launcher Sample Rate converter")
ENUM_VALUE_DbPerfCounter(PrezlSrcInTileRateUnrolled				,226,	"Tile rate tiles being unrolled in Prez Squad Launcher Sample Rate converter")
ENUM_VALUE_DbPerfCounter(PrezlSrcOutStall						,227,	"Cycles transaction is stalled on the output of Prez Squad Launcher Sample Rate converter")
ENUM_VALUE_DbPerfCounter(PostzlSrcInSends						,228,	"Transactions going into Postz Squad Launcher Sample Rate converter")
ENUM_VALUE_DbPerfCounter(PostzlSrcInStall						,229,	"Cycles squad is stalled in the Postz Squad Launcher Sample Rate converter")
ENUM_VALUE_DbPerfCounter(PostzlSrcInSquads						,230,	"Squads going into Postz Squad Launcher Sample Rate converter")
ENUM_VALUE_DbPerfCounter(PostzlSrcInSquadsUnrolled				,231,	"Squads being unrolled in Postz Squad Launcher Sample Rate converter")
ENUM_VALUE_DbPerfCounter(PostzlSrcInTileRate					,232,	"Tile rate tiles going into the Postz Squad Launcher Sample Rate converter")
ENUM_VALUE_DbPerfCounter(PostzlSrcInTileRateUnrolled			,233,	"Tile rate tiles being unrolled in Postz Squad Launcher Sample Rate converter")
ENUM_VALUE_DbPerfCounter(PostzlSrcOutStall						,234,	"Cycles transaction is stalled on the output of Postz Squad Launcher Sample Rate converter")
ENUM_VALUE_DbPerfCounter(EsrPsSrcInSends						,235,	"Transactions going into Early Squad Router PS Iter Sample Rate converter")
ENUM_VALUE_DbPerfCounter(EsrPsSrcInStall						,236,	"Cycles squad is stalled in the Early Squad Router PS Iter Sample Rate converter")
ENUM_VALUE_DbPerfCounter(EsrPsSrcInSquads						,237,	"Squads going into Early Squad Router PS Iter Sample Rate converter")
ENUM_VALUE_DbPerfCounter(EsrPsSrcInSquadsUnrolled				,238,	"Squads being unrolled in Early Squad Router PS Iter Sample Rate converter")
ENUM_VALUE_DbPerfCounter(EsrPsSrcInTileRate						,239,	"Tile rate tiles going into the Early Squad Router PS Iter Sample Rate converter")
ENUM_VALUE_DbPerfCounter(EsrPsSrcInTileRateUnrolled				,240,	"Tile rate tiles being unrolled in Early Squad Router PS Iter Sample Rate converter")
ENUM_VALUE_DbPerfCounter(EsrPsSrcInTileRateUnrolledToPixelRate	,241,	"Tile rate tiles being unrolled to pixel rate in Early Squad Router PS Iter Sample Rate converter")
ENUM_VALUE_DbPerfCounter(EsrPsSrcOutStall						,242,	"Cycles transaction is stalled on the output of Early Squad Router PS Iter Sample Rate converter")
ENUM_VALUE_DbPerfCounter(DepthBoundsQtilesCulled				,243,	"Quarter tiles culled at hiz time due to depth bounds")
ENUM_VALUE_DbPerfCounter(PrezSamplesFailingDb					,244,	"PreZ Samples failing depth bounds test")
ENUM_VALUE_DbPerfCounter(PostzSamplesFailingDb					,245,	"PostZ Samples failing depth bounds test")
ENUM_VALUE_DbPerfCounter(FlushCompressed						,246,	"Tiles that flushed compressed")
ENUM_VALUE_DbPerfCounter(FlushPlaneLe4							,247,	"Tiles that flushed compressed with less than or equal to 4 planes")
ENUM_VALUE_DbPerfCounter(TilesZFullySummarized					,248,	"Tiles that fully summarized z")
ENUM_VALUE_DbPerfCounter(TilesStencilFullySummarized			,249,	"Tiles that fully summarized stencil")
ENUM_VALUE_DbPerfCounter(TilesZClearOnExpclear					,250,	"Tiles that do a z clear on expanded and clear")
ENUM_VALUE_DbPerfCounter(TilesSClearOnExpclear					,251,	"Tiles that do a stencil clear on expanded and clear")
ENUM_VALUE_DbPerfCounter(TilesDecompOnExpclear					,252,	"Tiles that do a z decompress on expanded and clear")
ENUM_VALUE_DbPerfCounter(TilesCompressedToDecompressed			,253,	"Tiles that transition from compressed to expanded")
ENUM_VALUE_DbPerfCounter(OpPipePrezBusy							,254,	"Cycles the op pipe is busy with prez squads")
ENUM_VALUE_DbPerfCounter(OpPipePostzBusy						,255,	"Cycles tha op pipe is busy with postz squads")
ENUM_VALUE_DbPerfCounter(DiDtStall								,256,	"Cycles the op pipe stalls due to di/dt controller")
		
#ifndef ENUM_VALUE_SqPerfCounter
#define ENUM_VALUE_SqPerfCounter(sym, val, desc_string)
#endif
ENUM_VALUE_SqPerfCounter(None										,  0,	"Count nothing.")
ENUM_VALUE_SqPerfCounter(AccumPrev									,  1,	"For counter N, increment by the value of counter N-1.")
ENUM_VALUE_SqPerfCounter(Cycles										,  2,	"Clock cycles. This value is nondeterministic; it does not work in counter slots other than 0 or 1.")
ENUM_VALUE_SqPerfCounter(BusyCycles									,  3,	"Clock cycles while SQ is reporting that it is busy.  (nondeterministic, per-simd, global)")
ENUM_VALUE_SqPerfCounter(Waves										,  4,	"Count number of waves sent to SQs. (per-simd, emulated, global)")
ENUM_VALUE_SqPerfCounter(LevelWaves									,  5,	"Track the number of waves.  Set kSqPerfCounterAccumPrev for the next counter to use this. (level, per-simd, global)")
ENUM_VALUE_SqPerfCounter(WavesEq64									,  6,	"Count number of waves with exactly 64 active threads sent to SQs. (per-simd, emulated, global)")
ENUM_VALUE_SqPerfCounter(WavesLt64									,  7,	"Count number of waves with <64 active threads sent to SQs. (per-simd, emulated, global)")
ENUM_VALUE_SqPerfCounter(WavesLt48									,  8,	"Count number of waves with <48 active threads sent to SQs. (per-simd, emulated, global)")
ENUM_VALUE_SqPerfCounter(WavesLt32									,  9,	"Count number of waves sent <32 active threads sent to SQs. (per-simd, emulated, global)")
ENUM_VALUE_SqPerfCounter(WavesLt16									, 10,	"Count number of waves sent <16 active threads sent to SQs. (per-simd, emulated, global)")
ENUM_VALUE_SqPerfCounter(WavesCu									, 11,	"Count number of waves sent to CUs. (per-simd, emulated)")
ENUM_VALUE_SqPerfCounter(LevelWavesCu								, 12,	"Track the number of waves.  Set kSqPerfCounterAccumPrev for the next counter to use this. (level, per-simd)")
ENUM_VALUE_SqPerfCounter(BusyCuCycles								, 13,	"Count quad-cycles each CU is busy. (nondeterministic, per-simd)")
ENUM_VALUE_SqPerfCounter(Items										, 14,	"Number of valid items per wave.  (per-simd, global)")
ENUM_VALUE_SqPerfCounter(Quads										, 15,	"Number of completely or partially covered quads per wave.  (per-simd, emulated, global)")
ENUM_VALUE_SqPerfCounter(Events										, 16,	"Number of events.  (unwindowed, emulated, global)")
ENUM_VALUE_SqPerfCounter(SurfSyncs									, 17,	"Number of surface syncs.  (unwindowed, emulated, global)")
ENUM_VALUE_SqPerfCounter(TtraceReqs									, 18,	"Number of thread trace requests.  (unwindowed, global, nondeterministic)")
ENUM_VALUE_SqPerfCounter(TtraceInflightReqs							, 19,	"Number of in-flight thread trace requests.  (nondeterministic, unwindowed, global)")
ENUM_VALUE_SqPerfCounter(TtraceStall								, 20,	"Number of cycles thread trace stalls stalled execution.  (nondeterministic, unwindowed, global)")
ENUM_VALUE_SqPerfCounter(MsgCntr									, 21,	"Number of counter messages.  (nondeterministic, unwindowed, global)")
ENUM_VALUE_SqPerfCounter(MsgPerf									, 22,	"Number of perfcounter messages.  (nondeterministic, unwindowed), global")
ENUM_VALUE_SqPerfCounter(MsgGscnt									, 23,	"Number of geometry messages.  (emulated, unwindowed, global)")
ENUM_VALUE_SqPerfCounter(MsgInterrupt								, 24,	"Number of interrupt messages.  (emulated, unwindowed, global)")
ENUM_VALUE_SqPerfCounter(Insts										, 25,	"Number of instructions issued. (per-simd, emulated)")
ENUM_VALUE_SqPerfCounter(InstsValu									, 26,	"Number of VALU instructions issued. (per-simd, emulated)")
ENUM_VALUE_SqPerfCounter(InstsVmemWr								, 27,	"Number of VMEM write instructions issued (including FLAT). (per-simd, emulated)")
ENUM_VALUE_SqPerfCounter(InstsVmemRd								, 28,	"Number of VMEM read instructions issued (including FLAT). (per-simd, emulated)")
ENUM_VALUE_SqPerfCounter(InstsVmem									, 29,	"Number of VMEM instructions issued. (per-simd, emulated)")
ENUM_VALUE_SqPerfCounter(InstsSalu									, 30,	"Number of SALU instructions issued. (per-simd, emulated)")
ENUM_VALUE_SqPerfCounter(InstsSmem									, 31,	"Number of SMEM read instructions issued. (per-simd, emulated)")
ENUM_VALUE_SqPerfCounter(InstsFlat									, 32,	"Number of FLAT instructions issued. (per-simd, emulated)")
ENUM_VALUE_SqPerfCounter(InstsFlatLdsOnly							, 33,	"Number of FLAT instructions issued that read/wrote only from/to LDS (only works if EARLY_TA_DONE is enabled). (per-simd, emulated)")
ENUM_VALUE_SqPerfCounter(InstsLds									, 34,	"Number of LDS instructions issued (including FLAT). (per-simd, emulated)")
ENUM_VALUE_SqPerfCounter(InstsGds									, 35,	"Number of GDS instructions issued. (per-simd, emulated)")
ENUM_VALUE_SqPerfCounter(InstsExp									, 36,	"Number of EXP instructions issued, excluding skipped export instructions. (per-simd, emulated)")
ENUM_VALUE_SqPerfCounter(InstsExpGds								, 37,	"Number of EXP and GDS instructions issued, excluding skipped export instructions. (per-simd, emulated)")
ENUM_VALUE_SqPerfCounter(InstsBranch								, 38,	"Number of Branch instructions issued. (per-simd, emulated)")
ENUM_VALUE_SqPerfCounter(InstsSendmsg								, 39,	"Number of Sendmsg instructions issued. (per-simd, emulated)")
ENUM_VALUE_SqPerfCounter(InstsVskipped								, 40,	"Number of vector instructions skipped. (per-simd, emulated)")
ENUM_VALUE_SqPerfCounter(InstLevelVmem								, 41,	"Number of in-flight VMEM instructions. Set next counter to kSqPerfCounterAccumPrev and divide by kSqPerfCounterInstsVmem for average latency.  Includes FLAT instructions. (per-simd, level, nondeterministic)")
ENUM_VALUE_SqPerfCounter(InstLevelSmem								, 42,	"Number of in-flight SMEM read instructions * 2. Set next counter to kSqPerfCounterAccumPrev and divide by kSqPerfCounterInstsSmem for average latency per smem request.  Falls slightly short of total request latency because some fetches are divided into two requests that may finish at different times and this counter collects the average latency of the two. (per-simd, level, nondeterministic)")
ENUM_VALUE_SqPerfCounter(InstLevelLds								, 43,	"Number of in-flight LDS instructions. Set next counter to kSqPerfCounterAccumPrev and divide by kSqPerfCounterInstsLds for average latency. Includes FLAT instructions.  (per-simd, level, nondeterministic)")
ENUM_VALUE_SqPerfCounter(InstLevelGds								, 44,	"Number of in-flight GDS instructions. Set next counter to kSqPerfCounterAccumPrev and divide by kSqPerfCounterInstsGds for average latency. (per-simd, level, nondeterministic)")
ENUM_VALUE_SqPerfCounter(InstLevelExp								, 45,	"Number of in-flight EXP instructions. Set next counter to kSqPerfCounterAccumPrev and divide by kSqPerfCounterInstsExp for average latency. (per-simd, level, nondeterministic)")
ENUM_VALUE_SqPerfCounter(WaveCycles									, 46,	"Number of wave-cycles spent by waves in the CUs (per-simd, nondeterministic)")
ENUM_VALUE_SqPerfCounter(WaveReady									, 47,	"Number of wave-cycles waves were ready to execute the next instruction (per-simd, nondeterministic)")
ENUM_VALUE_SqPerfCounter(WaitCntVm									, 48,	"Number of wave-cycles spent waiting for VM counter. In units of 4 cycles.  (per-simd, nondeterministic)")
ENUM_VALUE_SqPerfCounter(WaitCntLgkm								, 49,	"Number of wave-cycles spent waiting for LGKM counter. In units of 4 cycles.  (per-simd, nondeterministic)")
ENUM_VALUE_SqPerfCounter(WaitCntExp									, 50,	"Number of wave-cycles spent waiting for EXP counter. In units of 4 cycles.  (per-simd, nondeterministic)")
ENUM_VALUE_SqPerfCounter(WaitCntAny									, 51,	"Number of wave-cycles spent waiting for any counter. In units of 4 cycles.  (per-simd, nondeterministic)")
ENUM_VALUE_SqPerfCounter(WaitBarrier								, 52,	"Number of wave-cycles spent waiting for a barrier. In units of 4 cycles.  (per-simd, nondeterministic)")
ENUM_VALUE_SqPerfCounter(WaitExpAlloc								, 53,	"Number of wave-cycles spent waiting for export allocation (per-simd, nondeterministic)")
ENUM_VALUE_SqPerfCounter(WaitSleep									, 54,	"Number of wave-cycles spent waiting for sleep to finish (per-simd, nondeterministic)")
ENUM_VALUE_SqPerfCounter(WaitOther									, 55,	"Number of wave-cycles spent waiting for dependency stalls (per-simd, nondeterministic)")
ENUM_VALUE_SqPerfCounter(WaitAny									, 56,	"Number of wave-cycles spent waiting for anything (per-simd, nondeterministic)")
ENUM_VALUE_SqPerfCounter(WaitTtrace									, 57,	"Number of wave-cycles spent waiting for thread trace stalls (per-simd, nondeterministic)")
ENUM_VALUE_SqPerfCounter(WaitIfetch									, 58,	"Number of wave-cycles spent waiting for instructions to arrive (per-simd, nondeterministic)")
ENUM_VALUE_SqPerfCounter(WaitInstVmem								, 59,	"Number of wave-cycles spent waiting for VMEM instruction issue. In units of 4 cycles.  (per-simd, nondeterministic)")
ENUM_VALUE_SqPerfCounter(WaitInstSca								, 60,	"Number of wave-cycles spent waiting for SALU or SMEM instruction issue. In units of 4 cycles. (per-simd, nondeterministic)")
ENUM_VALUE_SqPerfCounter(WaitInstLds								, 61,	"Number of wave-cycles spent waiting for LDS instruction issue. In units of 4 cycles. (per-simd, nondeterministic)")
ENUM_VALUE_SqPerfCounter(WaitInstValu								, 62,	"Number of wave-cycles spent waiting for VALU instrution issue. In units of 4 cycles. (per-simd, nondeterministic)")
ENUM_VALUE_SqPerfCounter(WaitInstExpGds								, 63,	"Number of wave-cycles spent waiting for EXPORT or GDS instruction issue. In units of 4 cycles. (per-simd, nondeterministic)")
ENUM_VALUE_SqPerfCounter(WaitInstMisc								, 64,	"Number of wave-cycles spent waiting for BRANCH or SENDMSG instruction issue. In units of 4 cycles. (per-simd, nondeterministic)")
ENUM_VALUE_SqPerfCounter(WaitInstFlat								, 65,	"Number of wave-cycles spent waiting for flat instruction issue. In units of 4 cycles. (per-simd, nondeterministic)")
ENUM_VALUE_SqPerfCounter(ActiveInstAny								, 66,	"Number of cycles each wave is working on an instruction. (per-simd, nondeterministic)")
ENUM_VALUE_SqPerfCounter(ActiveInstVmem								, 67,	"Number of cycles the SQ instruction arbiter is working on a VMEM instruction. (per-simd, nondeterministic)")
ENUM_VALUE_SqPerfCounter(ActiveInstLds								, 68,	"Number of cycles the SQ instruction arbiter is working on a LDS instruction. (per-simd, nondeterministic)")
ENUM_VALUE_SqPerfCounter(ActiveInstValu								, 69,	"Number of cycles the SQ instruction arbiter is working on a VALU instruction. (per-simd, nondeterministic)")
ENUM_VALUE_SqPerfCounter(ActiveInstSca								, 70,	"Number of cycles the SQ instruction arbiter is working on a SALU or SMEM instruction. (per-simd, nondeterministic)")
ENUM_VALUE_SqPerfCounter(ActiveInstExpGds							, 71,	"Number of cycles the SQ instruction arbiter is working on an EXPORT or GDS instruction. (per-simd, nondeterministic)")
ENUM_VALUE_SqPerfCounter(ActiveInstMisc								, 72,	"Number of cycles the SQ instruction aribter is working on a BRANCH or SENDMSG instruction. (per-simd, nondeterministic)")
ENUM_VALUE_SqPerfCounter(ActiveInstFlat								, 73,	"Number of cycles the SQ instruction arbiter is working on a FLAT instruction. (per-simd, nondeterministic)")
ENUM_VALUE_SqPerfCounter(InstCyclesVmemWr							, 74,	"Number of cycles needed to send addr and cmd data for VMEM write instructions. (per-simd, emulated)")
ENUM_VALUE_SqPerfCounter(InstCyclesVmemRd							, 75,	"Number of cycles needed to send addr and cmd data for VMEM read instructions. (per-simd, emulated)")
ENUM_VALUE_SqPerfCounter(InstCyclesVmemAddr							, 76,	"Number of cycles needed to send VMEM read/write addresses to TA. (per-simd, emulated)")
ENUM_VALUE_SqPerfCounter(InstCyclesVmemData							, 77,	"Number of cycles needed to send VMEM write data to TA. (per-simd, emulated)")
ENUM_VALUE_SqPerfCounter(InstCyclesVmemCmd							, 78,	"Number of cycles needed to send VMEM command to TA. (per-simd, emulated)")
ENUM_VALUE_SqPerfCounter(InstCyclesVmem								, 79,	"Number of cycles needed to send addr and cmd data for VMEM instructions. (per-simd, emulated)")
ENUM_VALUE_SqPerfCounter(InstCyclesLds								, 80,	"Number of cycles needed to send instructions to LDS. (per-simd, emulated)")
ENUM_VALUE_SqPerfCounter(InstCyclesValu								, 81,	"Number of cycles needed to execute VALU instructions. (per-simd, emulated)")
ENUM_VALUE_SqPerfCounter(InstCyclesExp								, 82,	"Number of cycles needed to export data for EXP instructions. (per-simd, emulated)")
ENUM_VALUE_SqPerfCounter(InstCyclesGds								, 83,	"Number of cycles needed to export data for GDS instructions. (per-simd, emulated)")
ENUM_VALUE_SqPerfCounter(InstCyclesSca								, 84,	"Number of cycles needed to execute scalar instructions. (per-simd, emulated)")
ENUM_VALUE_SqPerfCounter(InstCyclesSmem								, 85,	"Number of cycles needed to execute scalar memory reads. (per-simd, emulated)")
ENUM_VALUE_SqPerfCounter(InstCyclesSalu								, 86,	"Number of cycles needed to execute non-memory read scalar operations. (per-simd, emulated)")
ENUM_VALUE_SqPerfCounter(InstCyclesExpGds							, 87,	"Number of cycles needed to export data for both EXP or GDS instructions (same as than INST_CYCLES_EXP + INST_CYCLES_GDS). (per-simd, emulated)")
ENUM_VALUE_SqPerfCounter(InstCyclesMisc								, 88,	"Number of cycles needed to execute BRANCH or SENDMSG instructions. (per-simd, emulated)")
ENUM_VALUE_SqPerfCounter(ThreadCyclesValu							, 89,	"Number of thread-cycles used to execute VALU operations (similar to kSqPerfCounterInstCyclesValu but multiplied by # of active threads). (per-simd)")
ENUM_VALUE_SqPerfCounter(ThreadCyclesValuMax						, 90,	"Maximum number of thread-cycles VALU operations that could have been executed given the instruction mix (similar to kSqPerfCounterInstCyclesValu but multiplied by # of active threads). (per-simd, emulated)")
ENUM_VALUE_SqPerfCounter(Ifetch										, 91,	"Number of instruction fetch requests from cache. (per-simd, emulated)")
ENUM_VALUE_SqPerfCounter(IfetchLevel								, 92,	"Number of instruction fetch requests from cache. (per-simd, level)")
ENUM_VALUE_SqPerfCounter(CbranchFork								, 93,	"Number of conditional branch instructions. (per-simd, emulated)")
ENUM_VALUE_SqPerfCounter(CbranchForkSplit							, 94,	"Number of conditional branch instructions that take both branches. (per-simd, emulated)")
ENUM_VALUE_SqPerfCounter(ValuLdsDirectRd							, 95,	"Number of LDS direct reads issued (excluding interpolation ops). (per-simd, emulated)")
ENUM_VALUE_SqPerfCounter(ValuLdsInterpOp							, 96,	"Number of LDS interpolation ops issued. (per-simd, emulated)")
ENUM_VALUE_SqPerfCounter(LdsBankConflict							, 97,	"Number of cycles LDS is stalled by bank conflicts. (emulated)")
ENUM_VALUE_SqPerfCounter(LdsAddrConflict							, 98,	"Number of cycles LDS is stalled by address conflicts. (emulated,nondeterministic)")
ENUM_VALUE_SqPerfCounter(LdsUnalignedStall							, 99,	"Number of cycles LDS is stalled processing flat unaligned load/store ops. (emulated)")
ENUM_VALUE_SqPerfCounter(LdsMemViolations							,100,	"Number of threads that have a memory violation in the LDS.(emulated)")
ENUM_VALUE_SqPerfCounter(LdsAtomicReturn							,101,	"Number of atomic return cycles in LDS. (per-simd, emulated)")
ENUM_VALUE_SqPerfCounter(LdsIdxActive								,102,	"Number of cycles LDS is used for indexed (non-direct,non-interpolation) operations. (per-simd, emulated)")
ENUM_VALUE_SqPerfCounter(ValuDepStall								,103,	"Number of cycles VALU is stalled by previous instructions due to dependencies (wait state count).  (nondeterministic)")
ENUM_VALUE_SqPerfCounter(ValuStarve									,104,	"Number of cycles VALU is starved while waves are present. (per-simd, nondeterministic)")
ENUM_VALUE_SqPerfCounter(ExpReqFifoFull								,105,	"Number of cycles export request fifo is full. (nondeterministic, unwindowed)")
ENUM_VALUE_SqPerfCounter(LdsBack2BackStall							,106,	"Number of cycles LDS command stalled due to back to back requests. (nondeterministic, unwindowed)")
ENUM_VALUE_SqPerfCounter(LdsDataFifoFull							,107,	"Number of cycles LDS data fifo is full. (nondeterministic, unwindowed)")
ENUM_VALUE_SqPerfCounter(LdsCmdFifoFull								,108,	"Number of cycles LDS command fifo is full. (nondeterministic, unwindowed)")
ENUM_VALUE_SqPerfCounter(VmemBack2BackStall							,109,	"Number of cycles texture requests are stalled due to back to back requests. (nondeterministic, unwindowed)")
ENUM_VALUE_SqPerfCounter(VmemTaAddrFifoFull							,110,	"Number of cycles texture requests are stalled due to full address fifo in TA. (nondeterministic, unwindowed)")
ENUM_VALUE_SqPerfCounter(VmemTaCmdFifoFull							,111,	"Number of cycles texture requests are stalled due to full cmd fifo in TA. (nondeterministic, unwindowed).")
ENUM_VALUE_SqPerfCounter(VmemExDataRegBusy							,112,	"Number of cycles texture requests are stalled due to full data staging register in EX. (nondeterministic, unwindowed).")
ENUM_VALUE_SqPerfCounter(VmemWrBack2BackStall						,113,	"Number of cycles texture writes are stalled due to back to back writes. (nondeterministic, unwindowed)")
ENUM_VALUE_SqPerfCounter(VmemWrTaDataFifoFull						,114,	"Number of cycles texture writes are stalled due to full data fifo in TA. (nondeterministic, unwindowed)")
ENUM_VALUE_SqPerfCounter(ValuSrcCConflict							,115,	"Number of cycles VALU is stalled by arbitration due to src c conflict.  (nondeterministic, unwindowed)")
ENUM_VALUE_SqPerfCounter(VmemRdSrcCdConflict						,116,	"Number of cycles VMEM_RD instructions are stalled due to VGPR port conflicts. (nondeterministic, unwindowed)")
ENUM_VALUE_SqPerfCounter(VmemWrSrcCdConflict						,117,	"Number of cycles VMEM_WR instructions are stalled due to VGPR port conflicts. (nondeterministic, unwindowed)")
ENUM_VALUE_SqPerfCounter(FlatSrcCdConflict							,118,	"Number of cycles FLAT instructions are stalled due to VGPR port conflicts. (nondeterministic, unwindowed)")
ENUM_VALUE_SqPerfCounter(LdsSrcCdConflict							,119,	"Number of cycles LDS instructions are stalled due to VGPR port conflicts. (nondeterministic, unwindowed)")
ENUM_VALUE_SqPerfCounter(SrcCdBusy									,120,	"Number of total accesses of port C and D (up to 2 per cycle). (per-simd)")
ENUM_VALUE_SqPerfCounter(PtPowerStall								,121,	"Number of cycles the power throttle indicated ALU should stall (ignores whether something actually got stalled).  (nondeterministic, unwindowed)")
ENUM_VALUE_SqPerfCounter(User0										,122,	"User counter.  Incremented by S_INCPERFLEVEL when SIMM16[3:0] == 0. (emulated)")
ENUM_VALUE_SqPerfCounter(User1										,123,	"User counter.  Incremented by S_INCPERFLEVEL when SIMM16[3:0] == 1. (emulated)")
ENUM_VALUE_SqPerfCounter(User2										,124,	"User counter.  Incremented by S_INCPERFLEVEL when SIMM16[3:0] == 2. (emulated)")
ENUM_VALUE_SqPerfCounter(User3										,125,	"User counter.  Incremented by S_INCPERFLEVEL when SIMM16[3:0] == 3. (emulated)")
ENUM_VALUE_SqPerfCounter(User4										,126,	"User counter.  Incremented by S_INCPERFLEVEL when SIMM16[3:0] == 4. (emulated)")
ENUM_VALUE_SqPerfCounter(User5										,127,	"User counter.  Incremented by S_INCPERFLEVEL when SIMM16[3:0] == 5. (emulated)")
ENUM_VALUE_SqPerfCounter(User6										,128,	"User counter.  Incremented by S_INCPERFLEVEL when SIMM16[3:0] == 6. (emulated)")
ENUM_VALUE_SqPerfCounter(User7										,129,	"User counter.  Incremented by S_INCPERFLEVEL when SIMM16[3:0] == 7. (emulated)")
ENUM_VALUE_SqPerfCounter(User8										,130,	"User counter.  Incremented by S_INCPERFLEVEL when SIMM16[3:0] == 8. (emulated)")
ENUM_VALUE_SqPerfCounter(User9										,131,	"User counter.  Incremented by S_INCPERFLEVEL when SIMM16[3:0] == 9. (emulated)")
ENUM_VALUE_SqPerfCounter(User10										,132,	"User counter.  Incremented by S_INCPERFLEVEL when SIMM16[3:0] == 10. (emulated)")
ENUM_VALUE_SqPerfCounter(User11										,133,	"User counter.  Incremented by S_INCPERFLEVEL when SIMM16[3:0] == 11. (emulated)")
ENUM_VALUE_SqPerfCounter(User12										,134,	"User counter.  Incremented by S_INCPERFLEVEL when SIMM16[3:0] == 12. (emulated)")
ENUM_VALUE_SqPerfCounter(User13										,135,	"User counter.  Incremented by S_INCPERFLEVEL when SIMM16[3:0] == 13. (emulated)")
ENUM_VALUE_SqPerfCounter(User14										,136,	"User counter.  Incremented by S_INCPERFLEVEL when SIMM16[3:0] == 14. (emulated)")
ENUM_VALUE_SqPerfCounter(User15										,137,	"User counter.  Incremented by S_INCPERFLEVEL when SIMM16[3:0] == 15. (emulated)")
ENUM_VALUE_SqPerfCounter(UserLevel0									,138,	"User level counter.  Incremented by S_INCPERFLEVEL, decremented by S_DECPERFLEVEL when SIMM16[3:0] == 0. (level, emulated)")
ENUM_VALUE_SqPerfCounter(UserLevel1									,139,	"User level counter.  Incremented by S_INCPERFLEVEL, decremented by S_DECPERFLEVEL SIMM16[3:0] == 1. (level, emulated)")
ENUM_VALUE_SqPerfCounter(UserLevel2									,140,	"User level counter.  Incremented by S_INCPERFLEVEL, decremented by S_DECPERFLEVEL SIMM16[3:0] == 2. (level, emulated)")
ENUM_VALUE_SqPerfCounter(UserLevel3									,141,	"User level counter.  Incremented by S_INCPERFLEVEL, decremented by S_DECPERFLEVEL SIMM16[3:0] == 3. (level, emulated)")
ENUM_VALUE_SqPerfCounter(UserLevel4									,142,	"User level counter.  Incremented by S_INCPERFLEVEL, decremented by S_DECPERFLEVEL SIMM16[3:0] == 4. (level, emulated)")
ENUM_VALUE_SqPerfCounter(UserLevel5									,143,	"User level counter.  Incremented by S_INCPERFLEVEL, decremented by S_DECPERFLEVEL SIMM16[3:0] == 5. (level, emulated)")
ENUM_VALUE_SqPerfCounter(UserLevel6									,144,	"User level counter.  Incremented by S_INCPERFLEVEL, decremented by S_DECPERFLEVEL SIMM16[3:0] == 6. (level, emulated)")
ENUM_VALUE_SqPerfCounter(UserLevel7									,145,	"User level counter.  Incremented by S_INCPERFLEVEL, decremented by S_DECPERFLEVEL SIMM16[3:0] == 7. (level, emulated)")
ENUM_VALUE_SqPerfCounter(UserLevel8									,146,	"User level counter.  Incremented by S_INCPERFLEVEL, decremented by S_DECPERFLEVEL SIMM16[3:0] == 8. (level, emulated)")
ENUM_VALUE_SqPerfCounter(UserLevel9									,147,	"User level counter.  Incremented by S_INCPERFLEVEL, decremented by S_DECPERFLEVEL SIMM16[3:0] == 9. (level, emulated)")
ENUM_VALUE_SqPerfCounter(UserLevel10								,148,	"User level counter.  Incremented by S_INCPERFLEVEL, decremented by S_DECPERFLEVEL SIMM16[3:0] == 10. (level, emulated)")
ENUM_VALUE_SqPerfCounter(UserLevel11								,149,	"User level counter.  Incremented by S_INCPERFLEVEL, decremented by S_DECPERFLEVEL SIMM16[3:0] == 11. (level, emulated)")
ENUM_VALUE_SqPerfCounter(UserLevel12								,150,	"User level counter.  Incremented by S_INCPERFLEVEL, decremented by S_DECPERFLEVEL SIMM16[3:0] == 12. (level, emulated)")
ENUM_VALUE_SqPerfCounter(UserLevel13								,151,	"User level counter.  Incremented by S_INCPERFLEVEL, decremented by S_DECPERFLEVEL SIMM16[3:0] == 13. (level, emulated)")
ENUM_VALUE_SqPerfCounter(UserLevel14								,152,	"User level counter.  Incremented by S_INCPERFLEVEL, decremented by S_DECPERFLEVEL SIMM16[3:0] == 14. (level, emulated)")
ENUM_VALUE_SqPerfCounter(UserLevel15								,153,	"User level counter.  Incremented by S_INCPERFLEVEL, decremented by S_DECPERFLEVEL SIMM16[3:0] == 15. (level, emulated)")
ENUM_VALUE_SqPerfCounter(PowerValu									,154,	"Number of CAC pulses for ALU instructions (nondeterministic, unwindowed)")
ENUM_VALUE_SqPerfCounter(PowerValu0									,155,	"Number of CAC pulses for ALU instructions in group 0 (nondeterministic, unwindowed)")
ENUM_VALUE_SqPerfCounter(PowerValu1									,156,	"Number of CAC pulses for ALU instructions in group 1 (nondeterministic, unwindowed)")
ENUM_VALUE_SqPerfCounter(PowerValu2									,157,	"Number of CAC pulses for ALU instructions in group 2 (nondeterministic, unwindowed)")
ENUM_VALUE_SqPerfCounter(PowerGprRd									,158,	"Number of CAC pulses for GPR reads (nondeterministic, unwindowed)")
ENUM_VALUE_SqPerfCounter(PowerGprWr									,159,	"Number of CAC pulses for GPR writes (nondeterministic, unwindowed)")
ENUM_VALUE_SqPerfCounter(PowerLdsBusy								,160,	"Number of CAC pulses for cycles LDS clocks are active (nondeterministic, unwindowed)")
ENUM_VALUE_SqPerfCounter(PowerAluBusy								,161,	"Number of CAC pulses for cycles ALU clocks are active (nondeterministic, unwindowed)")
ENUM_VALUE_SqPerfCounter(PowerTexBusy								,162,	"Number of CAC pulses for cycles texture clocks are active (nondeterministic, unwindowed)")
ENUM_VALUE_SqPerfCounter(SqcIcacheInputValidReady					,168,	"Successful Transaction (per-SQ, nondeterministic, unwindowed)")
ENUM_VALUE_SqPerfCounter(SqcIcacheInputValidReadyb					,169,	"Input stalled by SQC (per-SQ, nondeterministic, unwindowed)")
ENUM_VALUE_SqPerfCounter(SqcIcacheInputValidb						,170,	"SQC starved (per-SQ, nondeterministic, unwindowed)")
ENUM_VALUE_SqPerfCounter(SqcDcacheInputValidReady					,171,	"Successful Transaction (per-SQ, nondeterministic, unwindowed)")
ENUM_VALUE_SqPerfCounter(SqcDcacheInputValidReadyb					,172,	"Input stalled by SQC (per-SQ, nondeterministic, unwindowed)")
ENUM_VALUE_SqPerfCounter(SqcDcacheInputValidb						,173,	"SQC starved (per-SQ, nondeterministic, unwindowed)")
ENUM_VALUE_SqPerfCounter(SqcTcReq									,174,	"Total number of TC requests that were issued by instruction and constant caches.  (No-Masking, nondeterministic)")
ENUM_VALUE_SqPerfCounter(SqcTcInstReq								,175,	"Number of insruction requests to the TC (No-Masking, nondeterministic)")
ENUM_VALUE_SqPerfCounter(SqcTcDataReq								,176,	"Number of data requests to the TC (No-Masking, nondeterministic)")
ENUM_VALUE_SqPerfCounter(SqcTcStall									,177,	"Valid request stalled TC request interface (no-credits). (No-Masking, nondeterministic, unwindowed)")
ENUM_VALUE_SqPerfCounter(SqcTcStarve								,178,	"No requests sent to TC while credits available. (No-Masking, nondeterministic, unwindowed)")
ENUM_VALUE_SqPerfCounter(SqcIcacheBusyCycles						,179,	"Clock cycles while cache is reporting that it is busy.  (No-Masking, nondeterministic, unwindowed)")
ENUM_VALUE_SqPerfCounter(SqcIcacheReq								,180,	"Number of requests. (per-SQ, per-Bank)")
ENUM_VALUE_SqPerfCounter(SqcIcacheHits								,181,	"Number of cache hits. (per-SQ, per-Bank, nondeterministic)")
ENUM_VALUE_SqPerfCounter(SqcIcacheMisses							,182,	"Number of cache misses, includes uncached requests. (per-SQ, per-Bank, nondeterministic)")
ENUM_VALUE_SqPerfCounter(SqcIcacheMissesDuplicate					,183,	"Number of misses that were duplicates (access to a non-resident, miss pending CL).  (per-SQ, per-Bank, nondeterministic)")
ENUM_VALUE_SqPerfCounter(SqcIcacheUncached							,184,	"Number of uncached cache requests.  (per-SQ, per-Bank)")
ENUM_VALUE_SqPerfCounter(SqcIcacheVolatile							,185,	"Number of volatile cache requests.  (per-SQ, per-Bank)")
ENUM_VALUE_SqPerfCounter(SqcIcacheInvalInst							,186,	"Number of cache invalidations caused by instructions (No-Masking)")
ENUM_VALUE_SqPerfCounter(SqcIcacheInvalAsync						,187,	"Number of asynchronous invalidates (surface sync, register write, etc.) (No-Masking, unwindowed)")
ENUM_VALUE_SqPerfCounter(SqcIcacheInvalVolatileInst					,188,	"Number of volatile cache invalidations caused by instructions (No-Masking)")
ENUM_VALUE_SqPerfCounter(SqcIcacheInvalVolatileAsync				,189,	"Number of asynchronous volatile invalidates (surface sync, register write, etc.) (No-Masking, unwindowed)")
ENUM_VALUE_SqPerfCounter(SqcIcacheInputStallArbNoGrant				,190,	"Number of arbitration stalls due to lost arbitration to other SQs.  (per-SQ, nondeterministic, unwindowed)")
ENUM_VALUE_SqPerfCounter(SqcIcacheInputStallBankReadyb				,191,	"Number of arbitration stalls due to bank stalling.  (per-SQ, nondeterministic, unwindowed)")
ENUM_VALUE_SqPerfCounter(SqcIcacheCacheStalled						,192,	"Number of cache stalls.  (per-Bank, nondeterministic, unwindowed)")
ENUM_VALUE_SqPerfCounter(SqcIcacheCacheStallInflightNonzero			,193,	"Number of cycles stalled because allocated line has nonzero inflight.  (per-Bank, nondeterministic, unwindowed)")
ENUM_VALUE_SqPerfCounter(SqcIcacheCacheStallInflightMax				,194,	"Number of cycles stalled on a hit CL but inflight counter is maxed out.  (per-Bank, nondeterministic, unwindowed)")
ENUM_VALUE_SqPerfCounter(SqcIcacheCacheStallVolatileMismatch		,195,	"Number of cycles stalled because the volatile bit mismatched.  (per-Bank, nondeterministic, unwindowed)")
ENUM_VALUE_SqPerfCounter(SqcIcacheCacheStallUncachedHit				,196,	"Number of cycles stalled because an uncached access had a tag match.  (per-Bank, nondeterministic, unwindowed)")
ENUM_VALUE_SqPerfCounter(SqcIcacheCacheStallOutput					,197,	"Number of cycles stalled at cache controller output.  (per-Bank, nondeterministic, unwindowed)")
ENUM_VALUE_SqPerfCounter(SqcIcacheCacheStallOutputMissFifo			,198,	"Number of cycles stalled because the miss FIFO is full.  (per-Bank, nondeterministic, unwindowed)")
ENUM_VALUE_SqPerfCounter(SqcIcacheCacheStallOutputHitFifo			,199,	"Number of cycles stalled because a hit FIFO is full.  (per-Bank, nondeterministic, unwindowed)")
ENUM_VALUE_SqPerfCounter(SqcIcacheCacheStallOutputTcIf				,200,	"Number of cycles stalled because the TC request interface is stalled.  (per-Bank, nondeterministic, unwindowed)")
ENUM_VALUE_SqPerfCounter(SqcIcacheStallOutxbarArbNoGrant			,201,	"Number of arbitration stalls due to lost arbitration for the output port.  (per-Bank, nondeterministic, unwindowed)")
ENUM_VALUE_SqPerfCounter(SqcDcacheBusyCycles						,202,	"Clock cycles while cache is reporting that it is busy.  (No-Masking, nondeterministic, unwindowed)")
ENUM_VALUE_SqPerfCounter(SqcDcacheReq								,203,	"Number of requests (post-bank-serialization). (per-SQ, per-Bank)")
ENUM_VALUE_SqPerfCounter(SqcDcacheHits								,204,	"Number of cache hits. (per-SQ, per-Bank, nondeterministic)")
ENUM_VALUE_SqPerfCounter(SqcDcacheMisses							,205,	"Number of cache misses, includes uncached requests. (per-SQ, per-Bank, nondeterministic)")
ENUM_VALUE_SqPerfCounter(SqcDcacheMissesDuplicate					,206,	"Number of misses that were duplicates (access to a non-resident, miss pending CL).  (per-SQ, per-Bank, nondeterministic)")
ENUM_VALUE_SqPerfCounter(SqcDcacheUncached							,207,	"Number of uncached cache requests.  (per-SQ, per-Bank)")
ENUM_VALUE_SqPerfCounter(SqcDcacheVolatile							,208,	"Number of volatile cache requests.  (per-SQ, per-Bank)")
ENUM_VALUE_SqPerfCounter(SqcDcacheInvalInst							,209,	"Number of cache invalidations caused by instructions (No-Masking)")
ENUM_VALUE_SqPerfCounter(SqcDcacheInvalAsync						,210,	"Number of asynchronous invalidates (surface sync, register write, etc.) (No-Masking, unwindowed)")
ENUM_VALUE_SqPerfCounter(SqcDcacheInvalVolatileInst					,211,	"Number of volatile cache invalidations caused by instructions (No-Masking)")
ENUM_VALUE_SqPerfCounter(SqcDcacheInvalVolatileAsync				,212,	"Number of asynchronous volatile invalidates (surface sync, register write, etc.) (No-Masking, unwindowed)")
ENUM_VALUE_SqPerfCounter(SqcDcacheInputStallArbNoGrant				,213,	"Number of arbitration stalls due to lost arbitration to other SQs.  (per-SQ, nondeterministic, unwindowed)")
ENUM_VALUE_SqPerfCounter(SqcDcacheInputStallBankReadyb				,214,	"Number of arbitration stalls due to bank stalling.  (per-SQ, nondeterministic, unwindowed)")
ENUM_VALUE_SqPerfCounter(SqcDcacheCacheStalled						,215,	"Number of cache stalls.  (per-Bank, nondeterministic, unwindowed)")
ENUM_VALUE_SqPerfCounter(SqcDcacheCacheStallInflightNonzero			,216,	"Number of cycles stalled because allocated line has nonzero inflight.  (per-Bank, nondeterministic, unwindowed)")
ENUM_VALUE_SqPerfCounter(SqcDcacheCacheStallInflightMax				,217,	"Number of cycles stalled on a hit CL but inflight counter is maxed out.  (per-Bank, nondeterministic, unwindowed)")
ENUM_VALUE_SqPerfCounter(SqcDcacheCacheStallVolatileMismatch		,218,	"Number of cycles stalled because the volatile bit mismatched.  (per-Bank, nondeterministic, unwindowed)")
ENUM_VALUE_SqPerfCounter(SqcDcacheCacheStallUncachedHit				,219,	"Number of cycles stalled because an uncached access had a tag match.  (per-Bank, nondeterministic, unwindowed)")
ENUM_VALUE_SqPerfCounter(SqcDcacheCacheStallOutput					,220,	"Number of cycles stalled at cache controller output.  (per-Bank, nondeterministic, unwindowed)")
ENUM_VALUE_SqPerfCounter(SqcDcacheCacheStallOutputMissFifo			,221,	"Number of cycles stalled because the miss FIFO is full.  (per-Bank, nondeterministic, unwindowed)")
ENUM_VALUE_SqPerfCounter(SqcDcacheCacheStallOutputHitFifo			,222,	"Number of cycles stalled because a hit FIFO is full.  (per-Bank, nondeterministic, unwindowed)")
ENUM_VALUE_SqPerfCounter(SqcDcacheCacheStallOutputTcIf				,223,	"Number of cycles stalled because the TC request interface is stalled.  (per-Bank, nondeterministic, unwindowed)")
ENUM_VALUE_SqPerfCounter(SqcDcacheStallOutxbarArbNoGrant			,224,	"Number of arbitration stalls due to lost arbitration for the output port.  (per-Bank, nondeterministic, unwindowed)")
ENUM_VALUE_SqPerfCounter(SqcDcacheReq1								,225,	"Number of constant cache 1 dw requests.  (per-SQ)")
ENUM_VALUE_SqPerfCounter(SqcDcacheReq2								,226,	"Number of constant cache 2 dw requests.  (per-SQ)")
ENUM_VALUE_SqPerfCounter(SqcDcacheReq4								,227,	"Number of constant cache 4 dw requests.  (per-SQ)")
ENUM_VALUE_SqPerfCounter(SqcDcacheReq8								,228,	"Number of constant cache 8 dw requests.  (per-SQ)")
ENUM_VALUE_SqPerfCounter(SqcDcacheReq16								,229,	"Number of constant cache 16 dw requests.  (per-SQ)")
ENUM_VALUE_SqPerfCounter(SqcDcacheReqTime							,230,	"Number of constant cache timestamp requests.  (per-SQ)")
ENUM_VALUE_SqPerfCounter(SqcSqDcacheReqs							,231,	"Number of constant requests from SQ before any serialization (per-SQ)")
ENUM_VALUE_SqPerfCounter(SqcDcacheFlatReq							,232,	"Number of constant flat requests (per-SQ)")
ENUM_VALUE_SqPerfCounter(SqcDcacheNonflatReq						,233,	"Number of constant non-flat requests (per-SQ)")
ENUM_VALUE_SqPerfCounter(SqcIcacheInflightLevel						,234,	"Level Counter: # total outstanding transactions in instruction cache (per-SQ, nondeterministic)")
ENUM_VALUE_SqPerfCounter(SqcIcachePreCcLevel						,235,	"Level Counter: Pre-Cache Controller # outstanding transactions (per-SQ, nondeterministic)")
ENUM_VALUE_SqPerfCounter(SqcIcachePostCcLevel						,236,	"Level Counter: Post-Cache Controller # outstanding transactions (per-SQ, nondeterministic)")
ENUM_VALUE_SqPerfCounter(SqcIcachePostCcHitLevel					,237,	"Level Counter: Post-Cache Controller # outstanding transactions (per-SQ, nondeterministic)")
ENUM_VALUE_SqPerfCounter(SqcIcachePostCcMissLevel					,238,	"Level Counter: Post-Cache Controller # outstanding transactions (per-SQ, nondeterministic)")
ENUM_VALUE_SqPerfCounter(SqcDcacheInflightLevel						,239,	"Level Counter: # total outstanding transactions in data cache (per-SQ, nondeterministic)")
ENUM_VALUE_SqPerfCounter(SqcDcachePreCcLevel						,240,	"Level Counter: Pre-Cache Controller # outstanding transactions (per-SQ, nondeterministic)")
ENUM_VALUE_SqPerfCounter(SqcDcachePostCcLevel						,241,	"Level Counter: Post-Cache Controller # outstanding transactions (per-SQ, nondeterministic)")
ENUM_VALUE_SqPerfCounter(SqcDcachePostCcHitLevel					,242,	"Level Counter: Post-Cache Controller # outstanding transactions (per-SQ, nondeterministic)")
ENUM_VALUE_SqPerfCounter(SqcDcachePostCcMissLevel					,243,	"Level Counter: Post-Cache Controller # outstanding transactions (per-SQ, nondeterministic)")
ENUM_VALUE_SqPerfCounter(SqcTcInflightLevel							,244,	"Level Counter: total outstanding requests to TC (No-Masking, nondeterministic)")
ENUM_VALUE_SqPerfCounter(SqcIcacheTcInflightLevel					,245,	"Level Counter: # of outstanding instruction requests to TC (No-Masking, nondeterministic)")
ENUM_VALUE_SqPerfCounter(SqcDcacheTcInflightLevel					,246,	"Level Counter: # of outstanding data requests to TC (No-Masking, nondeterministic)")
ENUM_VALUE_SqPerfCounter(SqcErrDcacheReq2GprAddrUnaligned			,247,	"Count of error event: GPR address not aligned correctly (must be 2 GPR aligned) in a 2 dw constant fetch (No-Masking, unwindowed)")
ENUM_VALUE_SqPerfCounter(SqcErrDcacheReq4GprAddrUnaligned			,248,	"Count of error event: GPR address not aligned correctly (must be 4 GPR aligned) in a 4 dw constant fetch (No-Masking, unwindowed)")
ENUM_VALUE_SqPerfCounter(SqcErrDcacheReq8GprAddrUnaligned			,249,	"Count of error event: GPR address not aligned correctly (must be 4 GPR aligned) in a 8 dw constant fetch (No-Masking, unwindowed)")
ENUM_VALUE_SqPerfCounter(SqcErrDcacheReq16GprAddrUnaligned			,250,	"Count of error event: GPR address not aligned correctly (must be 4 GPR aligned) in a 16 dw constant fetch (No-Masking, unwindowed)")
ENUM_VALUE_SqPerfCounter(SqcIcachePrefetch1							,251,	"NEO ONLY; Number of +1 prefetch requests granted. (per-SQ)")
ENUM_VALUE_SqPerfCounter(SqcIcachePrefetch2							,252,	"NEO ONLY; Number of +2 prefetch requests granted. (per-SQ)")
ENUM_VALUE_SqPerfCounter(SqcIcachePrefetchFiltered					,253,	"NEO ONLY; Number of prefetch requests filtered out. (per-SQ)")

#ifndef ENUM_VALUE_TaPerfCounter
#define ENUM_VALUE_TaPerfCounter(sym, val, desc_string)
#endif
ENUM_VALUE_TaPerfCounter(TaBusy												,  0,	"TA unit is busy processing input data or resolving addresses. Performance windowing is not supported for this counter.")
ENUM_VALUE_TaPerfCounter(ShFifoBusy											,  1,	"sh_fifo subblock is busy.  Perf_Windowing not supported for this counter.")
ENUM_VALUE_TaPerfCounter(ShFifoCmdBusy										,  2,	"sh_fifo subblock, cmd fifo section is busy.  Perf_Windowing not supported for this counter.")
ENUM_VALUE_TaPerfCounter(ShFifoAddrBusy										,  3,	"sh_fifo subblock, addr fifo section is busy.  Perf_Windowing not supported for this counter.")
ENUM_VALUE_TaPerfCounter(ShFifoDataBusy										,  4,	"sh_fifo subblock, data fifo section is busy.  Perf_Windowing not supported for this counter.")
ENUM_VALUE_TaPerfCounter(ShFifoDataSfifoBusy								,  5,	"sh_fifo subblock, data sfifo section is busy.  Perf_Windowing not supported for this counter.")
ENUM_VALUE_TaPerfCounter(ShFifoDataTfifoBusy								,  6,	"sh_fifo subblock, data tfifo section is busy.  Perf_Windowing not supported for this counter.")
ENUM_VALUE_TaPerfCounter(GradientBusy										,  7,	"Deriv/Dispatch/Input subblocks are busy busy.  Perf_Windowing not supported for this counter.")
ENUM_VALUE_TaPerfCounter(GradientFifoBusy									,  8,	"Gradient FIFO subblock is busy.  Perf_Windowing not supported for this counter.")
ENUM_VALUE_TaPerfCounter(LodBusy											,  9,	"Aniso subblock is busy.  Perf_Windowing not supported for this counter.")
ENUM_VALUE_TaPerfCounter(LodFifoBusy										, 10,	"LOD FIFO subblock is busy.  Perf_Windowing not supported for this counter.")
ENUM_VALUE_TaPerfCounter(AddresserBusy										, 11,	"Addresser subblock is busy.  Perf_Windowing not supported for this counter.")
ENUM_VALUE_TaPerfCounter(AddresserFifoBusy									, 12,	"Addresser FIFO subblock is busy.  Perf_Windowing not supported for this counter.")
ENUM_VALUE_TaPerfCounter(AlignerBusy										, 13,	"Aligner subblock is busy.  Perf_Windowing not supported for this counter.")
ENUM_VALUE_TaPerfCounter(WritePathBusy										, 14,	"Write Path subblock is busy.  Perf_Windowing not supported for this counter.")
ENUM_VALUE_TaPerfCounter(SqTaCmdCycles										, 16,	"Number of cycles the TA unit was reading instruction commands over the SQ_TA_cmd interface. Performance windowing is not supported for this counter.")
ENUM_VALUE_TaPerfCounter(SpTaAddrCycles										, 17,	"Number of cycles the TA unit was reading address register values over the SQ_TA_addr interface. Performance windowing is not supported for this counter.")
ENUM_VALUE_TaPerfCounter(SpTaDataCycles										, 18,	"Number of cycles the TA unit was reading store or atomic data register values over the SQ_TA_data interface. Performance windowing is not supported for this counter.")
ENUM_VALUE_TaPerfCounter(TaFaDataStateCycles								, 19,	"Number of input cycles input on TA_FA wrts interface.  Perf_Windowing not supported for this counter.")
ENUM_VALUE_TaPerfCounter(ShFifoAddrWaitingOnCmdCycles						, 20,	"Number of cycles addr waiting on cmd in sh_fifo subblock.  Perf_Windowing not supported for this counter.")
ENUM_VALUE_TaPerfCounter(ShFifoCmdWaitingOnAddrCycles						, 21,	"Number of cycles cmd waiting on addr in sh_fifo subblock.  Perf_Windowing not supported for this counter.")
ENUM_VALUE_TaPerfCounter(ShFifoAddrStarvedWhileBusyCycles					, 22,	"Number of cycles addr starved while busy in sh_fifo subblock.  Perf_Windowing not supported for this counter.")
ENUM_VALUE_TaPerfCounter(ShFifoCmdStarvedWhileBusyCycles					, 23,	"Number of cycles cmd starved while busy in sh_fifo subblock.  Perf_Windowing not supported for this counter.")
ENUM_VALUE_TaPerfCounter(ShFifoDataWaitingOnDataStateCycles					, 24,	"Number of cycles data waiting on data state in sh_fifo subblock.  Perf_Windowing not supported for this counter.")
ENUM_VALUE_TaPerfCounter(ShFifoDataStateWaitingOnDataCycles					, 25,	"Number of cycles data state waiting on data in sh_fifo subblock.  Perf_Windowing not supported for this counter.")
ENUM_VALUE_TaPerfCounter(ShFifoDataStarvedWhileBusyCycles					, 26,	"Number of cycles data starved while busy in sh_fifo subblock.  Perf_Windowing not supported for this counter.")
ENUM_VALUE_TaPerfCounter(ShFifoDataStateStarvedWhileBusyCycles				, 27,	"Number of cycles data state starved while busy in sh_fifo subblock.  Perf_Windowing not supported for this counter.")
ENUM_VALUE_TaPerfCounter(ShFifoAddrCycles									, 30,	"Number of address cycles issued by sh_fifo to sh_dispatch subblock.")
ENUM_VALUE_TaPerfCounter(ShFifoDataCycles									, 31,	"Number of data cycles issued by sh_fifo to sh_dispatch subblock.")
ENUM_VALUE_TaPerfCounter(TotalWavefronts									, 32,	"Total number of instruction wavefronts processed by TA.  Each image or buffer read, write, or atomic instruction increments this counter for each wavefront that executes it.")
ENUM_VALUE_TaPerfCounter(GradientCycles										, 33,	"Number of cycles issued by the per-pixel-gradient state machine.")
ENUM_VALUE_TaPerfCounter(WalkerCycles										, 34,	"Number of cycles issued by the sampler state machine.")
ENUM_VALUE_TaPerfCounter(AlignerCycles										, 35,	"Number of cycles issued by the aligner state machine.")
ENUM_VALUE_TaPerfCounter(ImageWavefronts									, 36,	"Number of image instruction wavefronts processed by TA.")
ENUM_VALUE_TaPerfCounter(ImageReadWavefronts								, 37,	"Number of image read (Sample*, Load*, Gather4*) instruction wavefronts processed by TA.")
ENUM_VALUE_TaPerfCounter(ImageWriteWavefronts								, 38,	"Number of image write instruction wavefronts processed by TA.")
ENUM_VALUE_TaPerfCounter(ImageAtomicWavefronts								, 39,	"Number of image atomic instruction wavefronts processed by TA.")
ENUM_VALUE_TaPerfCounter(ImageTotalCycles									, 40,	"Number of cycles of image read, write, or atomic operations issued to the texture cache (TCP).")
ENUM_VALUE_TaPerfCounter(BufferWavefronts									, 44,	"Number of buffer instruction wavefronts processed by TA.")
ENUM_VALUE_TaPerfCounter(BufferReadWavefronts								, 45,	"Number of buffer read instruction wavefronts processed by TA.")
ENUM_VALUE_TaPerfCounter(BufferWriteWavefronts								, 46,	"Number of buffer write instruction wavefronts processed by TA.")
ENUM_VALUE_TaPerfCounter(BufferAtomicWavefronts								, 47,	"Number of buffer atomic instruction wavefronts processed by TA.")
ENUM_VALUE_TaPerfCounter(BufferCoalescableWavefronts						, 48,	"Number of buffer coalesceable wavefronts processed by TA.")
ENUM_VALUE_TaPerfCounter(BufferTotalCycles									, 49,	"Number of cycles of buffer read, write, or atomic operations issued to the texture cache (TCP).")
ENUM_VALUE_TaPerfCounter(BufferCoalescableAddrMulticycledCycles				, 50,	"Number of buffer coalesceable cycles issued to TC that were not coalesced due to addresser.")
ENUM_VALUE_TaPerfCounter(BufferCoalescableClamp16KdwordMulticycledCycles	, 51,	"Number of buffer coalesceable cycles issued to TC that were not coalesced due to clamping or 64KB bounds check.")
ENUM_VALUE_TaPerfCounter(BufferCoalescedReadCycles							, 52,	"Number of buffer coalesced read cycles issued to TC.")
ENUM_VALUE_TaPerfCounter(BufferCoalescedWriteCycles							, 53,	"Number of buffer coalesced write cycles issued to TC.")
ENUM_VALUE_TaPerfCounter(AddrStalledByTcCycles								, 54,	"Number of cycles addr path stalled by TC.  Perf_Windowing not supported for this counter.")
ENUM_VALUE_TaPerfCounter(AddrStalledByTdCycles								, 55,	"Number of cycles addr path stalled by TD.  Perf_Windowing not supported for this counter.")
ENUM_VALUE_TaPerfCounter(DataStalledByTcCycles								, 56,	"Number of cycles data path stalled by TC.  Perf_Windowing not supported for this counter.")
ENUM_VALUE_TaPerfCounter(AddresserStalledByAlignerOnlyCycles				, 57,	"Number of cycles Addresser stalled by Aligner and not further down the pipe.  Perf_Windowing not supported for this counter.")
ENUM_VALUE_TaPerfCounter(AddresserStalledCycles								, 58,	"Number of cycles Addresser stalled.  Perf_Windowing not supported for this counter.")
ENUM_VALUE_TaPerfCounter(AnisoStalledByAddresserOnlyCycles					, 59,	"Number of cycles Aniso stalled by Addresser and not further down the pipe.  Perf_Windowing not supported for this counter.")
ENUM_VALUE_TaPerfCounter(AnisoStalledCycles									, 60,	"Number of cycles Aniso stalled.  Perf_Windowing not supported for this counter.")
ENUM_VALUE_TaPerfCounter(DerivStalledByAnisoOnlyCycles						, 61,	"Number of cycles Deriv stalled by Aniso and not further down the pipe.  Perf_Windowing not supported for this counter.")
ENUM_VALUE_TaPerfCounter(DerivStalledCycles									, 62,	"Number of cycles Deriv stalled.  Perf_Windowing not supported for this counter.")
ENUM_VALUE_TaPerfCounter(AnisoGt1CycleQuads									, 63,	"Number of quads requiring more than 1 aniso sample.")
ENUM_VALUE_TaPerfCounter(Color1CyclePixels									, 64,	"Number of pixels requiring sampler state machine to take 1 cycle due to format.")
ENUM_VALUE_TaPerfCounter(Color2CyclePixels									, 65,	"Number of pixels requiring sampler state machine to take 2 cycle due to format.")
ENUM_VALUE_TaPerfCounter(Color3CyclePixels									, 66,	"Number of pixels requiring sampler state machine to take 3 cycle due to format.")
ENUM_VALUE_TaPerfCounter(Color4CyclePixels									, 67,	"Number of pixels requiring sampler state machine to take 4 cycle due to format.")
ENUM_VALUE_TaPerfCounter(Mip1CyclePixels									, 68,	"Number of pixels requiring sampler state machine to take 1 cycle due to mip filter.")
ENUM_VALUE_TaPerfCounter(Mip2CyclePixels									, 69,	"Number of pixels requiring sampler state machine to take 2 cycle due to mip filter.")
ENUM_VALUE_TaPerfCounter(Vol1CyclePixels									, 70,	"Number of pixels requiring sampler state machine to take 1 cycle due to z filter.")
ENUM_VALUE_TaPerfCounter(Vol2CyclePixels									, 71,	"Number of pixels requiring sampler state machine to take 2 cycle due to z filter.")
ENUM_VALUE_TaPerfCounter(BilinPoint1CyclePixels								, 72,	"Number of pixels requiring sampler state machine to take 1 cycle due to xy filter.")
ENUM_VALUE_TaPerfCounter(MipmapLod0Samples									, 73,	"Number of samples fetched from mip 0.")
ENUM_VALUE_TaPerfCounter(MipmapLod1Samples									, 74,	"Number of samples fetched from mip 1.")
ENUM_VALUE_TaPerfCounter(MipmapLod2Samples									, 75,	"Number of samples fetched from mip 2.")
ENUM_VALUE_TaPerfCounter(MipmapLod3Samples									, 76,	"Number of samples fetched from mip 3.")
ENUM_VALUE_TaPerfCounter(MipmapLod4Samples									, 77,	"Number of samples fetched from mip 4.")
ENUM_VALUE_TaPerfCounter(MipmapLod5Samples									, 78,	"Number of samples fetched from mip 5.")
ENUM_VALUE_TaPerfCounter(MipmapLod6Samples									, 79,	"Number of samples fetched from mip 6.")
ENUM_VALUE_TaPerfCounter(MipmapLod7Samples									, 80,	"Number of samples fetched from mip 7.")
ENUM_VALUE_TaPerfCounter(MipmapLod8Samples									, 81,	"Number of samples fetched from mip 8.")
ENUM_VALUE_TaPerfCounter(MipmapLod9Samples									, 82,	"Number of samples fetched from mip 9.")
ENUM_VALUE_TaPerfCounter(MipmapLod10Samples									, 83,	"Number of samples fetched from mip 10.")
ENUM_VALUE_TaPerfCounter(MipmapLod11Samples									, 84,	"Number of samples fetched from mip 11.")
ENUM_VALUE_TaPerfCounter(MipmapLod12Samples									, 85,	"Number of samples fetched from mip 12.")
ENUM_VALUE_TaPerfCounter(MipmapLod13Samples									, 86,	"Number of samples fetched from mip 13.")
ENUM_VALUE_TaPerfCounter(MipmapLod14Samples									, 87,	"Number of samples fetched from mip 14.")
ENUM_VALUE_TaPerfCounter(MipmapInvalidSamples								, 88,	"Number of samples marked invalid using mip 15 method.")
ENUM_VALUE_TaPerfCounter(Aniso1CycleQuads									, 89,	"Number of quads requiring 1 sample for anisotropic filtering.")
ENUM_VALUE_TaPerfCounter(Aniso2CycleQuads									, 90,	"Number of quads requiring 2 samples for anisotropic filtering.")
ENUM_VALUE_TaPerfCounter(Aniso4CycleQuads									, 91,	"Number of quads requiring 4 samples for anisotropic filtering.")
ENUM_VALUE_TaPerfCounter(Aniso6CycleQuads									, 92,	"Number of quads requiring 6 samples for anisotropic filtering.")
ENUM_VALUE_TaPerfCounter(Aniso8CycleQuads									, 93,	"Number of quads requiring 8 samples for anisotropic filtering.")
ENUM_VALUE_TaPerfCounter(Aniso10CycleQuads									, 94,	"Number of quads requiring 10 samples for anisotropic filtering.")
ENUM_VALUE_TaPerfCounter(Aniso12CycleQuads									, 95,	"Number of quads requiring 12 samples for anisotropic filtering.")
ENUM_VALUE_TaPerfCounter(Aniso14CycleQuads									, 96,	"Number of quads requiring 14 samples for anisotropic filtering.")
ENUM_VALUE_TaPerfCounter(Aniso16CycleQuads									, 97,	"Number of quads requiring 16 samples for anisotropic filtering.")
ENUM_VALUE_TaPerfCounter(WritePathInputCycles								, 98,	"Number of cycles received from write datapath from sh_dispatch.")
ENUM_VALUE_TaPerfCounter(WritePathOutputCycles								, 99,	"Number of cycles sent from write datapath to TC.")
ENUM_VALUE_TaPerfCounter(FlatWavefronts										,100,	"Number of flat opcode wavfronts processed by the TA.")
ENUM_VALUE_TaPerfCounter(FlatReadWavefronts									,101,	"Number of flat opcode reads processed by the TA.")
ENUM_VALUE_TaPerfCounter(FlatWriteWavefronts								,102,	"Number of flat opcode writes processed by the TA.")
ENUM_VALUE_TaPerfCounter(FlatAtomicWavefronts								,103,	"Number of flat opcode atomics processed by the TA.")
ENUM_VALUE_TaPerfCounter(FlatCoalesceableWavefronts							,104,	"Number of flat opcode coalesceale ops processed by the TA.")
ENUM_VALUE_TaPerfCounter(RegSclkVld											,105,	"Number of cycles reg_sclk is active.  Perf_Windowing not supported for this counter.")
ENUM_VALUE_TaPerfCounter(LocalCgDynSclkGrp0En								,106,	"Number of cycles grp0 sclk is active.  Perf_Windowing not supported for this counter.")
ENUM_VALUE_TaPerfCounter(LocalCgDynSclkGrp1En								,107,	"Number of cycles grp1 sclk is active.  Perf_Windowing not supported for this counter.")
ENUM_VALUE_TaPerfCounter(LocalCgDynSclkGrp1MemsEn							,108,	"Number of cycles grp1_mems sclk is active.  Perf_Windowing not supported for this counter.")
ENUM_VALUE_TaPerfCounter(LocalCgDynSclkGrp4En								,109,	"Number of cycles grp4 sclk is active.  Perf_Windowing not supported for this counter.")
ENUM_VALUE_TaPerfCounter(LocalCgDynSclkGrp5En								,110,	"Number of cycles grp5 sclk is active.  Perf_Windowing not supported for this counter.")

#ifndef ENUM_VALUE_TdPerfCounter
#define ENUM_VALUE_TdPerfCounter(sym, val, desc_string)
#endif
ENUM_VALUE_TdPerfCounter(TdBusy						,  0,	"TD is processing or waiting for data.")
ENUM_VALUE_TdPerfCounter(InputBusy					,  1,	"TD input subblock is busy or waiting for data.")
ENUM_VALUE_TdPerfCounter(OutputBusy					,  2,	"TD output subblock is busy for waiting for data.")
ENUM_VALUE_TdPerfCounter(LerpBusy					,  3,	"TD filter block is busy.")
ENUM_VALUE_TdPerfCounter(RegSclkVld					,  5,	"Clock gate enable for GRBM register reads & writes")
ENUM_VALUE_TdPerfCounter(LocalCgDynSclkGrp0En		,  6,	"Clock gate enable for group0 - non-harvestable always_on domain")
ENUM_VALUE_TdPerfCounter(LocalCgDynSclkGrp1En		,  7,	"Clock gate enable for group1 - harvestable texture logic domain")
ENUM_VALUE_TdPerfCounter(LocalCgDynSclkGrp4En		,  8,	"Clock gate enable for group4 - non-harvestable GDS chain domain")
ENUM_VALUE_TdPerfCounter(LocalCgDynSclkGrp5En		,  9,	"Clock gate enable for group5 - non-harvestable texture boundary domain")
ENUM_VALUE_TdPerfCounter(TcTdFifoFull				, 10,	"TC_TD input FIFO is full")
ENUM_VALUE_TdPerfCounter(ConstantStateFull			, 11,	"TA_TD instruction FIFO is full")
ENUM_VALUE_TdPerfCounter(SampleStateFull			, 12,	"TA_TD sample FIFO is full")
ENUM_VALUE_TdPerfCounter(OutputFifoFull				, 13,	"TD output FIFO is full")
ENUM_VALUE_TdPerfCounter(TcStall					, 15,	"TD is stalled waiting for TC data")
ENUM_VALUE_TdPerfCounter(PcStall					, 16,	"TD is stalled by PC waiting to send LDS data")
ENUM_VALUE_TdPerfCounter(GdsStall					, 17,	"TD is stalled by GDS data")
ENUM_VALUE_TdPerfCounter(Gather4Wavefront			, 20,	"Count the gather4 (same as fetch4) instruction wavefronts.")
ENUM_VALUE_TdPerfCounter(SampleCWavefront			, 21,	"Count the PCF comparison (sample_c or gather4_c, generated by SamplerComparisonState sampling) instruction wavefronts.")
ENUM_VALUE_TdPerfCounter(LoadWavefront				, 22,	"Count all image and buffer load, atomic, and store instruction wavefronts.")
ENUM_VALUE_TdPerfCounter(AtomicWavefront			, 23,	"Count the image and buffer atomic instruction wavefronts.")
ENUM_VALUE_TdPerfCounter(StoreWavefront				, 24,	"Count the image and buffer store instruction wavefronts.")
ENUM_VALUE_TdPerfCounter(LdfptrWavefront			, 25,	"Count the wavefronts with LDFPTR formats")
ENUM_VALUE_TdPerfCounter(BypassFilterWavefront		, 30,	"Count the wavefronts that bypass the filter, includes bypass opcode or bypass formats")
ENUM_VALUE_TdPerfCounter(MinMaxFilterWavefront		, 31,	"Count the wavefronts that use min/max filtering")
ENUM_VALUE_TdPerfCounter(CoalescableWavefront		, 32,	"Count wavefronts that TA finds coalescable")
ENUM_VALUE_TdPerfCounter(CoalescedPhase				, 33,	"Count up when a set of 4 phases are coalesced, if all phases in a wavefront were coalesced the count will be 4")
ENUM_VALUE_TdPerfCounter(FourPhaseWavefront			, 34,	"dmask=1,2,4,8, wavefront was packed into a 4 phase packet for SP")
ENUM_VALUE_TdPerfCounter(EightPhaseWavefront		, 35,	"dmask=3,5,6,9,a,c, wavefront was packed into an 8 phase packet for SP")
ENUM_VALUE_TdPerfCounter(SixteenPhaseWavefront		, 36,	"dmask=7,b,d,e,f, wavefront was forwarded to SP in 16 phases")
ENUM_VALUE_TdPerfCounter(FourPhaseForwardWavefront	, 37,	"Count the wavefronts that were forwarded to SP in 4 phases (coalescable)")
ENUM_VALUE_TdPerfCounter(WriteAckWavefront			, 38,	"Count write acknowledgments, sent to SQ and not to SP")
ENUM_VALUE_TdPerfCounter(UserDefinedBorder			, 40,	"Count the wavefronts that user defined border color was used")
ENUM_VALUE_TdPerfCounter(WhiteBorder				, 41,	"Count the wavefronts that white border color was used")
ENUM_VALUE_TdPerfCounter(OpaqueBlackBorder			, 42,	"Count the wavefronts that opaque black border color was used")
ENUM_VALUE_TdPerfCounter(Nack						, 45,	"Count the number of times an ack packet was generated and sent to SP/SQ")
ENUM_VALUE_TdPerfCounter(TdSpTraffic				, 46,	"Count the number of times this TD sends data to the SP")
ENUM_VALUE_TdPerfCounter(ConsumeGdsTraffic			, 47,	"Count the number of times GDS data was consumed by this TD, send to SP")
ENUM_VALUE_TdPerfCounter(AddresscmdPoison			, 48,	"Count the wavefronts that had poisoned address or command")
ENUM_VALUE_TdPerfCounter(DataPoison					, 49,	"Count the wavefronts that had poisoned data")
ENUM_VALUE_TdPerfCounter(D16EnWavefront				, 50,	"NEO ONLY; Count the wavefronts that use d16 conversion")
ENUM_VALUE_TdPerfCounter(D16DataPacked				, 51,	"NEO ONLY; Count the number of times the TD packs 2 sets of d16 data into 1 32-bit container")

#ifndef ENUM_VALUE_TcpPerfCounter
#define ENUM_VALUE_TcpPerfCounter(sym, val, desc_string)
#endif
ENUM_VALUE_TcpPerfCounter(TaTcpAddrStarveCycles			,  0,	"TA starves TCP addr interface. Not Windowed.")
ENUM_VALUE_TcpPerfCounter(TaTcpDataStarveCycles			,  1,	"TA starves TCP data interface. Not Windowed.")
ENUM_VALUE_TcpPerfCounter(TcpTaAddrStallCycles			,  2,	"TCP stalls TA addr interface.")
ENUM_VALUE_TcpPerfCounter(TcpTaDataStallCycles			,  3,	"TCP stalls TA data interface. Now Windowed.")
ENUM_VALUE_TcpPerfCounter(TdTcpStallCycles				,  4,	"TD stalls TCP")
ENUM_VALUE_TcpPerfCounter(TcrTcpStallCycles				,  5,	"TCR stalls TCP")
ENUM_VALUE_TcpPerfCounter(LodStallCycles				,  6,	"Per Pixel LOD stall")
ENUM_VALUE_TcpPerfCounter(ReadTagconflictStallCycles	,  7,	"Tagram conflict stall on a read")
ENUM_VALUE_TcpPerfCounter(WriteTagconflictStallCycles	,  8,	"Tagram conflict stall on a write")
ENUM_VALUE_TcpPerfCounter(AtomicTagconflictStallCycles	,  9,	"Tagram conflict stall on an atomic")
ENUM_VALUE_TcpPerfCounter(AllocStallCycles				, 10,	"Alloc on inflight cache line stall")
ENUM_VALUE_TcpPerfCounter(LfifoStallCycles				, 11,	"Memory Latency fifos full stall")
ENUM_VALUE_TcpPerfCounter(RfifoStallCycles				, 12,	"Memory Request fifos full stall")
ENUM_VALUE_TcpPerfCounter(TcrRdretStall					, 13,	"write into cache stalled by read return from tcr")
ENUM_VALUE_TcpPerfCounter(WriteConflictStall			, 14,	"write stall due to cache bank conflict")
ENUM_VALUE_TcpPerfCounter(HoleReadStall					, 15,	"read from cache stalled due to hole fill read")
ENUM_VALUE_TcpPerfCounter(ReadconflictStallCycles		, 16,	"Read conflict stall due to cache bank conflict")
ENUM_VALUE_TcpPerfCounter(PendingStallCycles			, 17,	"Pending stall")
ENUM_VALUE_TcpPerfCounter(ReadfifoStallCycles			, 18,	"Read fifo stall")
ENUM_VALUE_TcpPerfCounter(TcpLatency					, 19,	"Total TCP wave latency (from first clock of wave entering to first clock of wave leaving). Divide by kTcpPerfCounterTaTcpStateRead to calculate the average TCP (L1 texture cache) latency.")
ENUM_VALUE_TcpPerfCounter(TccReadReqLatency				, 20,	"Total TCP to TCC request latency for reads and atomics with return. Divide by kTcpPerfCounterTccReadReq + kTcpPerfCounterTccAtomicWithRetReq to calculate the average TCP (L1 texture cache) read latency.")
ENUM_VALUE_TcpPerfCounter(TccWriteReqLatency			, 21,	"Total TCP to TCC request latency for writes and atomics without return. Divide by kTcpPerfCounterTccWriteReq + kTcpPerfCounterTccAtomicWithoutRetReq to calculate the average TCP (L1 texture cache) write latency.")
ENUM_VALUE_TcpPerfCounter(TccWriteReqHoleLatency		, 22,	"Total TCP to TCC hole latency for writes and atomics. Performance windowing is not supported for this counter.")
ENUM_VALUE_TcpPerfCounter(TccReadReq					, 23,	"Total read requests from TCP to all TCCs. This counts L1 cache line read requests to the L2, that result from either an L1 miss or an L1 bypass by GLC=1.")
ENUM_VALUE_TcpPerfCounter(TccWriteReq					, 24,	"Total write requests from TCP to all TCCs. This counts L1 cache line write requests to the L2 that result from either an L1 miss or an L1 writethrough by GLC=1.")
ENUM_VALUE_TcpPerfCounter(TccAtomicWithRetReq			, 25,	"Total atomic instructions with return requests from TCP to all TCCs.")
ENUM_VALUE_TcpPerfCounter(TccAtomicWithoutRetReq		, 26,	"Total atomic instructions without return requests from TCP to all TCCs.")
ENUM_VALUE_TcpPerfCounter(TotalAtomicWithRet			, 31,	"Total number of atomic-with-return instruction threads executed by TA")
ENUM_VALUE_TcpPerfCounter(TotalAtomicWithoutRet			, 32,	"Total number of atomic-without-return instruction threads executed by TA.")
ENUM_VALUE_TcpPerfCounter(TotalWbinvl1					, 33,	"Total number of shader-instruction-initiated, L1 cache invalidate transactions from TA.")
ENUM_VALUE_TcpPerfCounter(ImgReadFmt1					, 34,	"Count of pixels read by image instructions from 1-bit formatted textures. Each kTcpPerfCounterImgRead* performance metric counts one for each image read instruction per executing thread, when the instruction accessed a texture of the given format.")
ENUM_VALUE_TcpPerfCounter(ImgReadFmt8					, 35,	"Count of pixels read by image instructions from 8-bit formats.")
ENUM_VALUE_TcpPerfCounter(ImgReadFmt16					, 36,	"Count of pixels read by image instructions from 16-bit formats.")
ENUM_VALUE_TcpPerfCounter(ImgReadFmt32					, 37,	"Count of pixels read by image instructions from 32-bit formats.")
ENUM_VALUE_TcpPerfCounter(ImgReadFmt32As8				, 38,	"Count of pixels read by image instructions from 32_AS_8 formats.")
ENUM_VALUE_TcpPerfCounter(ImgReadFmt32As16				, 39,	"Count of pixels read by image instructions from 32_AS_8_8 formats.")
ENUM_VALUE_TcpPerfCounter(ImgReadFmt32As128				, 40,	"Count of pixels read by image instructions from 32_AS_8_8 formats.")
ENUM_VALUE_TcpPerfCounter(ImgReadFmt642Cycle			, 41,	"Count of pixels read by image instructions from 64-bit 2-cycle formats.")
ENUM_VALUE_TcpPerfCounter(ImgReadFmt641Cycle			, 42,	"Count of pixels read by image instructions from 64-bit 1-cycle formats.")
ENUM_VALUE_TcpPerfCounter(ImgReadFmt96					, 43,	"Count of pixels read by image instructions from 96-bit formats.")
ENUM_VALUE_TcpPerfCounter(ImgReadFmt1284Cycle			, 44,	"Count of pixels read by image instructions from 128-bit 4-cycle formats.")
ENUM_VALUE_TcpPerfCounter(ImgReadFmt1281Cycle			, 45,	"Count of pixels read by image instructions from 128-bit 1-cycle formats.")
ENUM_VALUE_TcpPerfCounter(ImgReadFmtBc1					, 46,	"Count of pixels read by image instructions from BC1 format.")
ENUM_VALUE_TcpPerfCounter(ImgReadFmtBc2					, 47,	"Count of pixels read by image instructions from BC2 format.")
ENUM_VALUE_TcpPerfCounter(ImgReadFmtBc3					, 48,	"Count of pixels read by image instructions from BC3 format.")
ENUM_VALUE_TcpPerfCounter(ImgReadFmtBc4					, 49,	"Count of pixels read by image instructions from BC4 format.")
ENUM_VALUE_TcpPerfCounter(ImgReadFmtBc5					, 50,	"Count of pixels read by image instructions from BC5 format.")
ENUM_VALUE_TcpPerfCounter(ImgReadFmtBc6					, 51,	"Count of pixels read by image instructions from BC6 format.")
ENUM_VALUE_TcpPerfCounter(ImgReadFmtBc7					, 52,	"Count of pixels read by image instructions from BC7 format.")
ENUM_VALUE_TcpPerfCounter(ImgReadFmtI8					, 53,	"Count of pixels read by image instructions from 8-bit interlaced formats.")
ENUM_VALUE_TcpPerfCounter(ImgReadFmtI16					, 54,	"Count of pixels read by image instructions from 16-bit interlaced formats.")
ENUM_VALUE_TcpPerfCounter(ImgReadFmtI32					, 55,	"Count of pixels read by image instructions from 32-bit interlaced formats.")
ENUM_VALUE_TcpPerfCounter(ImgReadFmtI32As8				, 56,	"Count of pixels read by image instructions from 32_AS_8 interlaced formats.")
ENUM_VALUE_TcpPerfCounter(ImgReadFmtI32As16				, 57,	"Count of pixels read by image instructions from 32_AS_8_8 interlaced formats.")
ENUM_VALUE_TcpPerfCounter(ImgWriteFmt8					, 61,	"Count of pixels written by image instructions to 8-bit formats.")
ENUM_VALUE_TcpPerfCounter(ImgWriteFmt16					, 62,	"Count of pixels written by image instructions to 16-bit formats.")
ENUM_VALUE_TcpPerfCounter(ImgWriteFmt32					, 63,	"Count of pixels written by image instructions to 32-bit formats.")
ENUM_VALUE_TcpPerfCounter(ImgWriteFmt64					, 64,	"Count of pixels written by image instructions to 64-bit formats.")
ENUM_VALUE_TcpPerfCounter(ImgWriteFmt128				, 65,	"Count of pixels written by image instructions to 128-bit formats.")
ENUM_VALUE_TcpPerfCounter(ImgAtomicWithRetFmt32			, 69,	"Count of image atomic-with-return instruction threads that use 32-bit formatted textures.")
ENUM_VALUE_TcpPerfCounter(ImgAtomicWithoutRetFmt32		, 70,	"Count of image atomic-without-return instruction threads that use 32-bit formats.")
ENUM_VALUE_TcpPerfCounter(ImgAtomicWithRetFmt64			, 71,	"Count of image atomic-with-return instruction threads that use 64-bit formats.")
ENUM_VALUE_TcpPerfCounter(ImgAtomicWithoutRetFmt64		, 72,	"Count of image atomic-without-return instruction threads that use 64-bit formats.")
ENUM_VALUE_TcpPerfCounter(BufReadFmt8					, 73,	"Count of buffer read instruction threads that use 8-bit vertex format.")
ENUM_VALUE_TcpPerfCounter(BufReadFmt16					, 74,	"Count of buffer read instruction threads that use 16-bit vertex format.")
ENUM_VALUE_TcpPerfCounter(BufReadFmt32					, 75,	"Count of buffer read instruction threads that use 32-bit vertex format (includes 64-bit and 128-bit).")
ENUM_VALUE_TcpPerfCounter(BufWriteFmt8					, 76,	"Count of buffer write instruction threads that use 8-bit vertex format.")
ENUM_VALUE_TcpPerfCounter(BufWriteFmt16					, 77,	"Count of buffer write instruction threads that use 16-bit vertex format.")
ENUM_VALUE_TcpPerfCounter(BufWriteFmt32					, 78,	"Count of buffer write instruction threads that use 32-bit vertex format (includes 64-bit and 128-bit).")
ENUM_VALUE_TcpPerfCounter(BufAtomicWithRetFmt32			, 79,	"Count of buffer atomic-with-return instruction threads that use 32-bit formatted textures.")
ENUM_VALUE_TcpPerfCounter(BufAtomicWithoutRetFmt32		, 80,	"Count of buffer atomic-without-return instruction threads that use 32-bit formats.")
ENUM_VALUE_TcpPerfCounter(BufAtomicWithRetFmt64			, 81,	"Count of buffer atomic-with-return instruction threads that use 64-bit formats.")
ENUM_VALUE_TcpPerfCounter(BufAtomicWithoutRetFmt64		, 82,	"Count of buffer atomic-without-return instruction threads that use 64-bit formats.")
ENUM_VALUE_TcpPerfCounter(ArrLinearGeneral				, 83,	"Count of buffer instruction threads that use linear general memory tiling.")
ENUM_VALUE_TcpPerfCounter(ArrLinearAligned				, 84,	"Count of image instruction threads that use linear aligned memory tiling.")
ENUM_VALUE_TcpPerfCounter(Arr1DThin1					, 85,	"Count of image instruction threads that use 1d thin1 memory tiling.")
ENUM_VALUE_TcpPerfCounter(Arr1DThick					, 86,	"Count of image instruction threads that use 1d thick memory tiling.")
ENUM_VALUE_TcpPerfCounter(Arr2DThin1					, 87,	"Count of image instruction threads that use 2d thin1 memory tiling.")
ENUM_VALUE_TcpPerfCounter(Arr2DThick					, 88,	"Count of image instruction threads that use 2d thick memory tiling.")
ENUM_VALUE_TcpPerfCounter(Arr2DXthick					, 89,	"Count of image instruction threads that use 2d xthick memory tiling.")
ENUM_VALUE_TcpPerfCounter(Arr3DThin1					, 90,	"Count of image instruction threads that use 3d thin1 memory tiling.")
ENUM_VALUE_TcpPerfCounter(Arr3DThick					, 91,	"Count of image instruction threads that use 3d thick memory tiling.")
ENUM_VALUE_TcpPerfCounter(Arr3DXthick					, 92,	"Count of image instruction threads that use 3d xthick memory tiling.")
ENUM_VALUE_TcpPerfCounter(Dim1D							, 93,	"Count of image instruction threads that belong to 1D surfaces.")
ENUM_VALUE_TcpPerfCounter(Dim2D							, 94,	"Count of image instruction threads that belong to 2D surfaces.")
ENUM_VALUE_TcpPerfCounter(Dim3D							, 95,	"Count of image instruction threads that belong to 3D surfaces.")
ENUM_VALUE_TcpPerfCounter(Dim1DArray					, 96,	"Count of image instruction threads that belong to 1D Array surfaces.")
ENUM_VALUE_TcpPerfCounter(Dim2DArray					, 97,	"Count of image instruction threads that belong to 2D Array surfaces.")
ENUM_VALUE_TcpPerfCounter(Dim2DMsaa						, 98,	"Count of image instruction threads that belong to 2D MSAA surfaces.")
ENUM_VALUE_TcpPerfCounter(Dim2DArrayMsaa				, 99,	"Count of image instruction threads that belong to 2D MSAA Array surfaces.")
ENUM_VALUE_TcpPerfCounter(DimCubeArray					,100,	"Count of image instruction threads that belong to Cube Array surfaces.")
ENUM_VALUE_TcpPerfCounter(CpTcpInvalidate				,101,	"Number of L1 cache invalidates initiated from the CP, usually as a result of command buffer surface sync L1 invalidate events.")
ENUM_VALUE_TcpPerfCounter(TaTcpStateRead				,102,	"Number of state reads.")
ENUM_VALUE_TcpPerfCounter(Tagram0Req					,103,	"L1 Requests, (Tagram 0) 64B units")
ENUM_VALUE_TcpPerfCounter(Tagram1Req					,104,	"L1 Requests, (Tagram 1) 64B units")
ENUM_VALUE_TcpPerfCounter(Tagram2Req					,105,	"L1 Requests, (Tagram 2) 64B units")
ENUM_VALUE_TcpPerfCounter(Tagram3Req					,106,	"L1 Requests, (Tagram 3) 64B units")
ENUM_VALUE_TcpPerfCounter(GateEn1						,107,	"TCP interface clocks are turned on. Not Windowed.")
ENUM_VALUE_TcpPerfCounter(GateEn2						,108,	"TCP core clocks are turned on. Not Windowed.")
ENUM_VALUE_TcpPerfCounter(CoreRegSclkVld				,109,	"TCP reg clocks are turned on. Not Windowed.")
ENUM_VALUE_TcpPerfCounter(TccReq						,110,	"Total requests from TCP to all TCCs.  Equals kTcpPerfCounterTccReadReq + kTcpPerfCounterTccNonReadReq")
ENUM_VALUE_TcpPerfCounter(TccNonReadReq					,111,	"Total non-read requests from TCP to all TCCs.  Equals kTcpPerfCounterTccWriteReq+ kTcpPerfCounterTccAtomicWithRetReq+ kTcpPerfCounterTccAtomicWithoutRetReq")
ENUM_VALUE_TcpPerfCounter(TccBypassReadReq				,112,	"Total read requests from TCP to the TCS")
ENUM_VALUE_TcpPerfCounter(TccMissEvictReadReq			,113,	"Total read requests from TCP to all TCCs that were caused by a TCP request using the MISS_EVICT policy")
ENUM_VALUE_TcpPerfCounter(TccVolatileReadReq			,114,	"Total volatile read requests from TCP to all TCCs")
ENUM_VALUE_TcpPerfCounter(TccVolatileBypassReadReq		,115,	"Total volatile read requests from TCP to the TCS")
ENUM_VALUE_TcpPerfCounter(TccVolatileMissEvictReadReq	,116,	"Total volatile read requests from TCP to all TCCs that were caused by a TCP request using the MISS_EVICT policy")
ENUM_VALUE_TcpPerfCounter(TccBypassWriteReq				,117,	"Total write requests from TCP to the TCS")
ENUM_VALUE_TcpPerfCounter(TccMissEvictWriteReq			,118,	"Total write requests from TCP to all TCCs that were caused by a TCP request using the MISS_EVICT policy")
ENUM_VALUE_TcpPerfCounter(TccVolatileBypassWriteReq		,119,	"Total volatile write requests from TCP to the TCS")
ENUM_VALUE_TcpPerfCounter(TccVolatileWriteReq			,120,	"Total volatile write requests from TCP to all TCCs")
ENUM_VALUE_TcpPerfCounter(TccVolatileMissEvictWriteReq	,121,	"Total volatile write requests from TCP to all TCCs that were caused by a TCP request using the MISS_EVICT policy")
ENUM_VALUE_TcpPerfCounter(TccBypassAtomicReq			,122,	"Total atomic requests from TCP to the TCS")
ENUM_VALUE_TcpPerfCounter(TccAtomicReq					,123,	"Total atomic requests from TCP to all TCCs")
ENUM_VALUE_TcpPerfCounter(TccVolatileAtomicReq			,124,	"Total volatile atomic requests from TCP to all TCCs")
ENUM_VALUE_TcpPerfCounter(TccDataBusBusy				,125,	"Total cycles the TCC data bus is busy servicing this client.  Equals kTcpPerfCounterTccReadReq + kTcpPerfCounterTccWriteReq + kTcpPerfCounterTccAtomicWithoutRetReq + 2* kTcpPerfCounterTccAtomicWithRetReq. Not Windowed.")
ENUM_VALUE_TcpPerfCounter(TotalAccesses					,126,	"Total number of pixels/buffers from TA.  Equals kTcpPerfCounterTotalRead+kTcpPerfCounterTotalNonread")
ENUM_VALUE_TcpPerfCounter(TotalRead						,127,	"Total number of read pixels/buffers from TA.  Equals kTcpPerfCounterTotalHitLruRead ALPHA+ kTcpPerfCounterTotalHitEvictRead ALPHA+ kTcpPerfCounterTotalMissLruRead+ kTcpPerfCounterTotalMissEvictRead")
ENUM_VALUE_TcpPerfCounter(TotalHitLruRead				,128,	"Total number of read instruction threads from TA using the HIT_LRU policy.")
ENUM_VALUE_TcpPerfCounter(TotalHitEvictRead				,129,	"Total number of read instruction threads from TA using the HIT_EVICT policy.")
ENUM_VALUE_TcpPerfCounter(TotalMissLruRead				,130,	"Total number of read instruction threads from TA using the MISS_LRU policy.")
ENUM_VALUE_TcpPerfCounter(TotalMissEvictRead			,131,	"Total number of read instruction threads from TA using the MISS_EVICT policy.")
ENUM_VALUE_TcpPerfCounter(TotalNonRead					,132,	"Total number of non-read pixels/buffers from TA. Equals Tcp_Perf_Sel_Write + kTcpPerfCounterTotalAtomicWithRet + kTcpPerfCounterTotoalAtomicWithoutRet")
ENUM_VALUE_TcpPerfCounter(TotalWrite					,133,	"Total number of local write pixels/buffers from TA. Equals kTcpPerfCounterTotalMissLruWrite+ kTcpPerfCounterTotalMissEvictWrite")
ENUM_VALUE_TcpPerfCounter(TotalMissLruWrite				,134,	"Total number of local write instruction threads from TA using the MISS_LRU policy.")
ENUM_VALUE_TcpPerfCounter(TotalMissEvictWrite			,135,	"Total number of global write instruction threads from TA using the MISS_EVICT policy.")
ENUM_VALUE_TcpPerfCounter(TotalWbinvl1Vol				,136,	"Total number of volatile wbinvl1 transactions from TA (from shader WBINVL1_VOL instructions)")
ENUM_VALUE_TcpPerfCounter(TotalWritebackInvalidates		,137,	"Total number of cache invalidates.  Equals kTcpPerfCounterTotalWbinvl1+ kTcpPerfCounterTotalWbinvl1Vol+ kTcpPerfCounterCpTcpInvalidate+ kTcpPerfCounterSqTcpInvalidateVol. Not Windowed.")
ENUM_VALUE_TcpPerfCounter(DisplayMicrotiling			,138,	"Count of image pixels using display microtiling")
ENUM_VALUE_TcpPerfCounter(ThinMicrotiling				,139,	"Count of image pixels using thin microtiling")
ENUM_VALUE_TcpPerfCounter(DepthMicrotiling				,140,	"Count of image pixels using depth microtiling")
ENUM_VALUE_TcpPerfCounter(ArrPrtThin1					,141,	"Count of pixels that use prt thin1 memory tiling")
ENUM_VALUE_TcpPerfCounter(ArrPrt2DThin1					,142,	"Count of pixels that use 2d prt thin1 memory tiling")
ENUM_VALUE_TcpPerfCounter(ArrPrt3DThin1					,143,	"Count of pixels that use 3d prt thin1 memory tiling")
ENUM_VALUE_TcpPerfCounter(ArrPrtThick					,144,	"Count of pixels that use prt thick memory tiling")
ENUM_VALUE_TcpPerfCounter(ArrPrt2DThick					,145,	"Count of pixels that use 2d prt thick memory tiling")
ENUM_VALUE_TcpPerfCounter(ArrPrt3DThick					,146,	"Count of pixels that use 3d prt thick memory tiling")
ENUM_VALUE_TcpPerfCounter(CpTcpInvalidateVol			,147,	"Number of volatile cache invalidates from the CP. Not Windowed.")
ENUM_VALUE_TcpPerfCounter(SqTcpInvalidateVol			,148,	"Number of volatile cache invalidates from the SQ. Not Windowed.")
ENUM_VALUE_TcpPerfCounter(Unaligned						,149,	"Count of unaligned buffer fetches")
ENUM_VALUE_TcpPerfCounter(RotatedMicrotiling			,150,	"Count of image pixels using rotated microtiling")
ENUM_VALUE_TcpPerfCounter(ThickMicrotiling				,151,	"Count of image pixels using thick microtiling")
ENUM_VALUE_TcpPerfCounter(Atc							,152,	"Count of pixels/buffers that use ATC")
ENUM_VALUE_TcpPerfCounter(PowerStall					,153,	"Count of stalls due to power throttling")
ENUM_VALUE_TcpPerfCounter(TccDccReq						,154,	"NEO ONLY; Total DCC requests from this TCP to all TCCs")
