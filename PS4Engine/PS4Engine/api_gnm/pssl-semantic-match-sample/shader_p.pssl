/* SIE CONFIDENTIAL
PlayStation(R)4 Programmer Tool Runtime Library Release 05.008.001
* Copyright (C) 2013 Sony Interactive Entertainment Inc.
* All Rights Reserved.
*/

#include "std_cbuffer.h"
#include "vsoutput.hs"
#include "../toolkit/shader_common/illum.hs"

#define SHUFFULED_PS_INPUT
#ifdef SHUFFULED_PS_INPUT
struct PS_INPUT
{
    float4 vTang		: TEXCOORD3;
    float2 TextureUV    : TEXCOORD0;
    float4 Position     : S_POSITION;
	float3 vNorm		: TEXCOORD1;
	float3 vPosInView	: TEXCOORD5;
};
#else // ORIGINAL_MATCHING_ORDER
struct PS_INPUT
{
    float4 Position     : S_POSITION;
    float2 TextureUV    : TEXCOORD0;
	float3 vNorm		: TEXCOORD1;
    float4 vTang		: TEXCOORD3;
	float3 vPosInView	: TEXCOORD5;
};
#endif

SamplerState samp0 : register(s0);

Texture2D colorMap : register( t0 );
Texture2D bumpGlossMap : register( t1 );

float4 main( PS_INPUT In ) : S_TARGET_OUTPUT
{
	float3 lightRgb = 1.3*float3(0.5,0.58,0.8);
	float4 lightAtten = float4(1,0,0,0);
	float3 ambientRgb = 0.3*float3(0.18,0.2,0.3);
	float specPow = 30;

	const float3 vN = In.vNorm;
	const float3 vT = In.vTang.xyz;
	const float3 vB = In.vTang.w * cross(vN, vT);
	float3 vL = m_lightPosition - In.vPosInView;
	const float3 vV = normalize(float3(0,0,0) - In.vPosInView);
	float d = length(vL); vL = normalize(vL);
	float attenuation = saturate(1.0f/(lightAtten.x + lightAtten.y * d + lightAtten.z * d * d) - lightAtten.w);

	float4 normalGloss = bumpGlossMap.Sample(samp0, In.TextureUV.xy);
	normalGloss.xyz = normalGloss.xyz * 2.0f - 1.0f;
	normalGloss.y = -normalGloss.y;		// normal map has green channel inverted

	float3 vBumpNorm = normalize(normalGloss.x*vT+normalGloss.y*vB+normalGloss.z*vN);
	float3 vGeomNorm = normalize(vN);

	float3 diff_col = colorMap.Sample(samp0, In.TextureUV.xy).xyz;
	float3 spec_col = 0.4*normalGloss.w+0.1;
	float3 vLightInts = attenuation*lightRgb*BRDF2_ts_nphong_nofr(vBumpNorm, vGeomNorm, vL, vV, diff_col, spec_col, specPow);
	vLightInts += (diff_col*ambientRgb);

	//if (result.color.a < 0.5f)
	//	discard;
#if TEST_COMPLEX_STRUCT
	return float4(vLightInts, 1) + CB1b.c;
#else
	return float4(vLightInts, 1);
#endif
}
