/* SIE CONFIDENTIAL
PlayStation(R)4 Programmer Tool Runtime Library Release 05.008.001
* Copyright (C) 2011 Sony Interactive Entertainment Inc.
* All Rights Reserved.
*/

/* Optimized version of "Approximate Catmull-Clark" for irregular patches.
 */


#define ACC_PATCHES
#define PSSL_WORKAROUND 1

#include "../../../toolkit/shader_common/shader_base.h"
#include "../std_cbuffer.h"
#include "../sh_outputs.hs"


//--------------------------------------------------------------------
// Each quad of the control mesh is surrounded by a sequence of
// vertices which belong to the neighboring quads of this mesh.
// This is known as a 1-Ring. The implementation here assumes that InputPatch<>
// consists of the center quad and the surrounding 1-Ring. An example is shown below.
//
//					11
//				   / \
//                /   \
//		 13_____12	   10__ 9 
//		 | \	 \	   /   /
//		 |  \	  \	  /   /
//		 |   \	   \ /	 /
//		 |	  3-----2---8
//		 |	  |		|	|
//		 |	  |		|	|
//		 4----0-----1	|
//		/	   \	 \	|
//	   /		\	  \	|
//	  /__________\_____\|
//	 5			 6		 7
//
//	 Prefixes:				Valences:
//	 Vertex 0:	7			Vertex 0:		4
//	 Vertex 1:	8			Vertex 1:		3
//	 Vertex 2:	13			Vertex 2:		5
//	 Vertex 3:	14 (==4)	Vertex 3:		3
//
//	The prefix represents the first vertex of the 1-ring that is
//	directly connected to the following vertex of the center quad.
//	The valence is the numer of quads surrounding a vertex of the center quad.
//	These inputs are used to navigate through the vertices of InputPatch<>.
//	From this 16 control points of a bezier patch are produced and this bezier
//	patch will represent the center quad.
//	For Approximate Catmull-Clark (ACC) extra data is generated to produce tangent patches
//	which are used to ensure a continuous transition of normals from an irregular
//	patch to the adjacent patch.
//	The method ACC supports quads only.
//
//	The bezier patch that is built by this hull shader consists, as always, of
//	16 control points which can be divided into 4 categories:
//	corners Ci, left edge points El_i, right edge points Er_i and Interior points I_i.
//	Since there are 4 points within each category we can distribute the work efficiently
//	across 4 threads (per patch). The symmetry is shown below.
//
//		C3    Er_2	  El_2	  C2
//		El_3   I_3	  I_2	Er_1
//		Er_3   I_0	  I_1	El_1
//		C0    El_0	  Er_0	  C1
//--------------------------------------------------------------------


#ifndef M_PI
#define M_PI		3.1415926535897932384626433832795
#endif


DataBuffer<float2> g_v2TexCoordinates;
#ifdef READ_VERTS_IN_HS
DataBuffer<float3> g_v3PositionBuffer;
DataBuffer<uint> g_uIndexBuffer;
#endif
DataBuffer<uint2> g_uPreValData;

#ifdef READ_VERTS_IN_HS

#define NR_INPUT_CTRL_POINTS		1

#define FETCHINDEX(pi, i)		g_uIndexBuffer[32*(pi) + (i)]
#define FETCHPOS(pi, i)			(g_fScale*g_v3PositionBuffer[FETCHINDEX(pi, i)]+float3(g_fOffs,0,0))

#else

#define NR_INPUT_CTRL_POINTS		32
#define FETCHPOS(pi, i)		ip[(pi * 0) + i].PosIndex.xyz

#endif

#ifdef HS_GENERATED_TANGENTS
void CreateTangentPatches(out SQuadTangent res, const OutputPatch<HS_OUTPUT, 4> bezier_patch, const float4 vCW_in, const int i);
#endif


float getc(int valence)
{
	return cos( ( 2.0 * M_PI ) / valence );
}

HS_CNST_OUTPUT ConstantsHS( InputPatch<LS_OUTPUT, NR_INPUT_CTRL_POINTS> ip, uint patch_index_in : S_PRIMITIVE_ID, const OutputPatch<HS_OUTPUT, 4> res_patch )
{
    HS_CNST_OUTPUT output;
    
    for(int i=0; i<4; i++)
	{
		output.edge_ts[i] = g_fTessFactor;
		output.insi_ts[i&1] = g_fTessFactor;
	}

#ifdef READ_VERTS_IN_HS
	uint patch_index = patch_index_in; // HACK to suppress warning
	patch_index = ip[0].uPrimIndex;
#else
	uint patch_index = ip[0].PosIndex.x; // HACK to suppress warning
	patch_index = res_patch[0].corner.x; // HACK to suppress warning
	patch_index = patch_index_in;
#endif
	
	uint uVals = g_uPreValData[patch_index].y;
#ifndef HS_GENERATED_TANGENTS

// Dynamically indexed writes into a vector are currently not supported.
// Workaround: convert to statically indexed writes.
#ifdef PSSL_WORKAROUND
        output.vCWts[0]=getc((uVals>>(0*8))&0xff);
        output.vCWts[1]=getc((uVals>>(1*8))&0xff);
        output.vCWts[2]=getc((uVals>>(2*8))&0xff);
        output.vCWts[3]=getc((uVals>>(3*8))&0xff);
#else
	for(int i=0; i<4; i++)
		output.vCWts[i]=getc((uVals>>(i*8))&0xff);
#endif // PSSL_WORKAROUND

#else
	float4 vCWts;

// Dynamically indexed writes into a vector are currently not supported.
// Workaround: convert to statically indexed writes.
#ifdef PSSL_WORKAROUND
        vCWts[0]=getc((uVals>>(0*8))&0xff);
        vCWts[1]=getc((uVals>>(1*8))&0xff);
        vCWts[2]=getc((uVals>>(2*8))&0xff);
        vCWts[3]=getc((uVals>>(3*8))&0xff);
#else
	for(int i=0; i<4; i++)
		vCWts[i]=getc((uVals>>(i*8))&0xff);
#endif // PSSL_WORKAROUND

// Some issues may occur when passing dynamically selected structures as output arguments.
// Workaround: convert to static indexing (through manual loop unrolling for example).
#ifdef PSSL_WORKAROUND
	CreateTangentPatches(output.quad_tangents[0], res_patch, vCWts, 0);
	CreateTangentPatches(output.quad_tangents[1], res_patch, vCWts, 1);
	CreateTangentPatches(output.quad_tangents[2], res_patch, vCWts, 2);
	CreateTangentPatches(output.quad_tangents[3], res_patch, vCWts, 3);
#else
	for(int i=0; i<4; i++)
		CreateTangentPatches(output.quad_tangents[i], res_patch, vCWts, i);
#endif

#endif
	
    return output;
}

void AccCornerAttributes( out float3 Corner, out float3 TanU, out float3 TanV,
                          const in InputPatch<LS_OUTPUT, NR_INPUT_CTRL_POINTS> ip,
						  const uint index,
						  const uint patch_index,
						  const int prevprefix_c, const int prefix, 
						  const uint valence,
						  const float3 PosLu, const float3 PosLm,
						  const float3 PosCu, const float3 PosCm,
						  const float3 PosRu, const float3 PosRm, const float3 PosRd );

[DOMAIN_PATCH_TYPE("quad")]
//[PARTITIONING_TYPE("fractional_odd")]
[PARTITIONING_TYPE("integer")]
[OUTPUT_TOPOLOGY_TYPE("triangle_cw")]
[OUTPUT_CONTROL_POINTS(4)]
[PATCH_CONSTANT_FUNC("ConstantsHS")]
[MAX_TESS_FACTOR(16.0)]
HS_OUTPUT main( InputPatch<LS_OUTPUT, NR_INPUT_CTRL_POINTS> ip, uint uCPID : S_OUTPUT_CONTROL_POINT_ID, uint patch_index_in : S_PRIMITIVE_ID )
{  
    HS_OUTPUT    output = (HS_OUTPUT)0;
    
#ifdef READ_VERTS_IN_HS
	uint patch_index = ip[0].uPrimIndex;
#else
	uint patch_index = patch_index_in;
#endif

	uint2 uData = g_uPreValData[patch_index];

#ifdef READ_VERTS_IN_HS
	uint uVIndex = FETCHINDEX(patch_index, uCPID);
#else
	uint uVIndex = asuint(ip[uCPID].PosIndex.w);
#endif
	float2 texCoord = g_v2TexCoordinates[uVIndex];

	int i=uCPID;

	const int prefix = (uData.x>>(i*8))&0xff;
	const int prefix_c = i==3 ? 4 : prefix;
	const int prevprefix = (uData.x>>(((i-1)&0x3)*8))&0xff;
	const int prevprefix_c = i==0 ? 4 : prevprefix;

	const float3 PosRu = FETCHPOS(patch_index, (i+2)&0x3 );
	const float3 PosRm = FETCHPOS(patch_index,  (i+1)&0x3 );
	const float3 PosRd = FETCHPOS(patch_index,  prefix_c );

	const float3 PosCu = FETCHPOS(patch_index,  (i+3)&0x3 );
	const float3 PosCm = FETCHPOS(patch_index,  i );
	const float3 PosCd = FETCHPOS(patch_index,  prefix-1 );



	{
		// inner
		int valence_l = (uData.y>>(i*8))&0xff;
		const float3 inner = (valence_l*PosCm+2*(PosRm + PosCu) + PosRu)/(5+valence_l);

		// edges
		float div_l = 2 * valence_l + 10;
		int valence_r = (uData.y>>(((i+1)&0x3)*8))&0xff;
		float div_r = 2 * valence_r + 10;

		output.edge_l.xyz = (valence_l*2*PosCm + 4*PosRm + PosRu + 2*PosCu + 2*PosCd + PosRd) / div_l;
		output.edge_r.xyz = (4*PosCm + valence_r*2*PosRm + 2*PosRu + PosCu + PosCd + 2*PosRd) / div_r;

		// write inner
		output.corner.w = inner.x;
		output.edge_l.w = inner.y;
		output.edge_r.w = inner.z;


		// corner
		const float3 PosLu = FETCHPOS(patch_index,  prevprefix-1 );
		const float3 PosLm = FETCHPOS(patch_index, prevprefix_c );

		float3 pos, tanU, tanV;
		AccCornerAttributes(pos, tanU, tanV, ip, i, patch_index, prevprefix_c, prefix, valence_l,
							PosLu, PosLm, PosCu, PosCm, PosRu, PosRm, PosRd);

		output.corner.xyz = pos;

		output.tanu.xyz = tanU;
		output.tanv.xyz = tanV;

		// texture coordinate
		output.tanu.w = texCoord.x;
		output.tanv.w = texCoord.y;
	}

 
  
    return output;
}

void AccCornerAttributes( out float3 Corner, out float3 TanU, out float3 TanV,
                          const in InputPatch<LS_OUTPUT, NR_INPUT_CTRL_POINTS> ip,
						  const uint index,
						  const uint patch_index,
						  const int prevprefix_c, const int prefix, 
						  const uint valence,
						  const float3 PosLu, const float3 PosLm,
						  const float3 PosCu, const float3 PosCm,
						  const float3 PosRu, const float3 PosRm, const float3 PosRd )
{
    const float fOdd = 1;
    const float fEven = 4;

	const float fCosDelta = cos( M_PI / valence );
    const float fTmp = valence * sqrt( 4.0 + fCosDelta * fCosDelta );
	const float fEvenWgt = ( ( 1.0f / valence ) + fCosDelta / fTmp );
	const float fOddWgt = ( 1.0f / fTmp );


	//cos(a+b) = cos(a)*cos(b) - sin(a)*sin(b)
	//sin(a+b) = cos(a)*sin(b) + sin(a)*cos(b)

	const float cs_o = cos(M_PI / (float)valence);
	const float sn_o = sin(M_PI / (float)valence);

	const float cs_i = cs_o*cs_o - sn_o*sn_o;//cos((2*M_PI) / (float)valence);
	const float sn_i = 2*cs_o*sn_o;//sin((2*M_PI) / (float)valence);

	


	// initialize. Valence^2 is the weight of the center position
    Corner = (valence*valence)*PosCm;
    float3 C0 = 0; float3 C1 = 0;

	// initial cosines and sines
	float cso_p = fOddWgt*cs_o;		// first odd (pi / valence)
	float cs = cs_i, sn = sn_i;		// second edge (twopi / valence)

	// collect the position just before the previous prefix
	{
		Corner += PosLu * fOdd;
		const float tmp = fOddWgt*(cs*cs_o - sn*sn_o);
		C0 += PosLu * tmp;		// odd vertex, offset by (pi / valence)
		C1 += PosLu * cso_p; cso_p=tmp;
	}

	// collect position at previous prefix
	{
		const float cs_tmp = cs;
		cs = cs_tmp*cs_i - sn*sn_i;	// third edge
		sn = cs_tmp*sn_i + sn*cs_i;
		Corner += PosLm * fEven;
		C0 += PosLm * fEvenWgt * cs;		// even vertex, no offset
		C1 += PosLm * fEvenWgt * cs_tmp;
	}

	// collect pairs of positions between previous and current prefix
    uint uStart = prevprefix_c;
    while(uStart < (prefix-1)) 
    {
        ++uStart;
		const float3 pos_o = FETCHPOS(patch_index, uStart);
		Corner += pos_o * fOdd;
		const float tmp = fOddWgt*(cs*cs_o - sn*sn_o);
		C0 += pos_o * tmp;
		C1 += pos_o * cso_p; cso_p=tmp;

        const float cs_tmp = cs;
		cs = cs_tmp*cs_i - sn*sn_i;
		sn = cs_tmp*sn_i + sn*cs_i;
        ++uStart;
		const float3 pos_e = FETCHPOS(patch_index, uStart);
        Corner += pos_e * fEven;
        C0 += pos_e * fEvenWgt * cs;
        C1 += pos_e * fEvenWgt * cs_tmp;
    }
    
	// collect position at the current prefix
	{
		cs = cs_i; sn = -sn_i;		// this Line can be commented in/out
		//cso_p = fOddWgt*((cs*cs - sn*sn)*cs_o - (2*cs*sn)*sn_o);			// this Line can be commented in/out
		Corner += PosRd * fOdd;
		const float tmp = fOddWgt*(cs*cs_o - sn*sn_o);
		C0 += PosRd * tmp;
		C1 += PosRd * cso_p; cso_p=tmp;
	}

    // collect the other 3 positions on the quad.
	{
		const float cs_tmp = cs;
		cs = 1; sn = 0;
		Corner += PosRm * fEven;
		C0 += PosRm * fEvenWgt * cs;
		C1 += PosRm * fEvenWgt * cs_tmp;
	}
    
	Corner += PosRu * fOdd;
    C0 += PosRu * fOddWgt*(cs*cs_o - sn*sn_o);
    C1 += PosRu * cso_p;

	const float cs_tmp = cs;
	cs = cs_tmp*cs_i - sn*sn_i;
	Corner += PosCu * fEven;
    C0 += PosCu * fEvenWgt * cs;
    C1 += PosCu * fEvenWgt * cs_tmp;

    // divide by sum of weights
    Corner *= 1.0f / ( valence * valence + 5 * valence );


	const float fS0 = (index&2)==0 ? 1 : (-1);
	const float fS1 = ((index - 1) & 2)!=0 ? 1 : (-1);

	C0 *= fS0;
	C1 *= fS1;

	// swap enabled
	const bool bSwap = (index&1)!=0;
	TanU = bSwap ? C1 : C0;
	TanV = bSwap ? C0 : C1;
}


#ifdef HS_GENERATED_TANGENTS
void CreateTangentPatches(out SQuadTangent res, const OutputPatch<HS_OUTPUT, 4> bezier_patch, const float4 vCW_in, const int i)
{
	const float3 inner0 = float3(bezier_patch[i].corner.w, bezier_patch[i].edge_l.w, bezier_patch[i].edge_r.w);
	const float3 inner1 = float3(bezier_patch[(i+1)&0x3].corner.w, bezier_patch[(i+1)&0x3].edge_l.w, bezier_patch[(i+1)&0x3].edge_r.w);

	float3 P02=bezier_patch[(i-1)&0x3].edge_l.xyz,																		P32=bezier_patch[(i+1)&0x3].edge_r.xyz;
	float3 P01=bezier_patch[(i-1)&0x3].edge_r.xyz, P11=inner0, P21=inner1, P31=bezier_patch[(i+1)&0x3].edge_l.xyz;
	float3 P00=bezier_patch[i].corner.xyz, P10=bezier_patch[i].edge_l.xyz, P20=bezier_patch[i].edge_r.xyz, P30=bezier_patch[(i+1)&0x3].corner.xyz;
		

	const float3 tanU0 = bezier_patch[i].tanu.xyz;
	const float3 tanV0 = bezier_patch[i].tanv.xyz;
	const float3 tanU1 = bezier_patch[(i+1)&0x3].tanu.xyz;
	const float3 tanV1 = bezier_patch[(i+1)&0x3].tanv.xyz;

	float3 vLow = 3*(P20-P10);

	const bool bSwap = (i&1)!=0;
	const float fS0 = (i&2)==0 ? 1 : (-1);
	const float3 tanU00 = fS0*(bSwap ? tanV0 : tanU0);
	const float3 tanU30 = fS0*(bSwap ? tanV1 : tanU1);
	const float3 tanU10 = (1*tanU00 + 2*vLow)/3;
	const float3 tanU20 = (2*vLow + 1*tanU30)/3;

	const float fS1 = ((i - 1) & 2)!=0 ? 1 : (-1);
	const float3 tanV00 = fS1*(bSwap ? tanU0 : tanV0);
	const float3 tanV30 = fS1*(bSwap ? tanU1 : tanV1);


	float3 vUpL = 3*(P11-P01), vUpM = 3*(P21-P11), vUpR = 3*(P31-P21);

	const float4 vCW = i==0 ? vCW_in : (i==1 ? vCW_in.yzwx : (i==2 ? vCW_in.zwxy : vCW_in.wxyz));
 
	// sign flip
	vUpL +=  (-1.0f/3.0)*(vCW[3]*tanV00 - 2.0f*vCW[0]*(3.0f*(P02-P01)));
	vUpR += (-1.0f/3.0)*(2.0f*vCW[1]*(3.0f*(P32 - P31)) - vCW[2]*tanV30);

	//const int offs = (i&1)*16+(i&2)*4;

	res.Tan0.xyz = fS0*tanU10; res.Tan1.xyz = fS0*tanU20;

	const float3 tanU01 = vUpL;
	const float3 tanU11 = (1*vUpL + 2*vUpM)/3;
	const float3 tanU21 = (2*vUpM + 1*vUpR)/3;
	const float3 tanU31 = vUpR;

	res.Tan2.xyz = fS0*tanU01; res.Tan3.xyz = fS0*tanU11; res.Tan4.xyz = fS0*tanU21; 
	
	const float3 vLast = fS0*tanU31;
	res.Tan0.w=vLast.x; res.Tan1.w=vLast.y; res.Tan2.w=vLast.z;
}
#endif

