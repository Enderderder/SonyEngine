/* SIE CONFIDENTIAL
PlayStation(R)4 Programmer Tool Runtime Library Release 05.008.001
* Copyright (C) 2013 Sony Interactive Entertainment Inc.
* All Rights Reserved.
*/

#include "std_cbuffer.h"
#include "yifplayer/sh_outputs.hs"
#include "../toolkit/shader_common/illum.hs"
#include "../toolkit/shader_common/noise.hs"


SamplerState g_linSampler : register( s2 );
Texture2D height_tex : register( t2 );
Texture2D ao_tex : register( t3 );

//#define USE_DERIVATIVE_MAP


float4 main( VS_OUTPUT In ) : S_TARGET_OUTPUT
{
	//const float bump_scale = 0.2;
	const float3 vPos = In.pos.xyz;
	//const float bump_scale = g_fMeshScale * 0.16;
	const float bump_scale = g_fMeshScale * 0.2;
	const float3 vEyePos = float3(0,0,0);
	float3 vToLgt = normalize(g_vLightPos.xyz - vPos);
	float3 vToLgt2 = normalize(g_vLightPos2.xyz - vPos);
	float3 vV = normalize(vEyePos - vPos);
	const float3 vVertNorm = normalize(In.norm.xyz);

	const float2 texCoord = float2(In.pos.w, 1-In.norm.w);		// flip the .y coordinate
	
	
	// do bump mapping using either height or derivative map using the "surface gradient based formulation"
	// see the paper: "Bump Mapping Unparametrized Surfaces on the GPU".
	// Since the underlying parametrization is irrelevant we may use
	// the screen as our domain space.
#ifndef USE_DERIVATIVE_MAP
	// do bump mapping using height map.
	//float2 scr_deriv = CalcDerivativesFast(height_tex, g_linSampler, texCoord);
	//float2 scr_deriv = CalcDerivativesFwd(height_tex, g_linSampler, texCoord);
	float2 scr_deriv = CalcDerivativesCen(height_tex, g_linSampler, texCoord);
#else
	// do bump mapping using derivative map.
	bool bFlipVertDeriv = true;		// need this since texCoord has flipped y coordinate.
	const float range_scale = 1.0/(6*8*2);	// derivative map based on heights with filter multiplier.
	
	// transform texture space derivative to screen space using the chain rule.
	// http://mmikkelsen3d.blogspot.com/2011/07/derivative-maps.html
	// choose range_scale such that it adapts the derivatives to the stored height map range [0;1].
	float2 scr_deriv = range_scale*CalcDerivativesFromDerivMap(deriv_tex, g_linSampler, texCoord, bFlipVertDeriv);

	// you can produce your own derivative maps using the following free tool makedudv
	// available at: http://jbit.net/~sparky/makedudv/
	// the tool supports most formats incl. exr and hdr
#endif

	float AO = ao_tex.Sample(g_linSampler, texCoord).x;
	scr_deriv *= bump_scale;
	const float3 vN = PerturbNormalArb(vPos, vVertNorm, scr_deriv.x, scr_deriv.y);
	
	// lighting
	//float3 diff_col = 0.5*float3(0.8,0.86,1);
	float mix = AO*AO;
	float3 diff_col = 0.7*(mix*float3(0.9,0.89,0.875) + (1-mix)*float3(0.9,0.86,0.1));
	float3 spec_col = 0.2*AO*float3(1,0.8,0.7);
	float surf_roughness = 1.5*2*12;		// relative to phong
	
	float fNormWorldY = 0.5*vN.y+0.5;
	float3 vAmb = 0.5*0.2*lerp( float3(1,0.15,0.2), float3(0.2,0.3,1), fNormWorldY);
	
	float3 vDiff = 0;
	float3 vLgtDir[] = {vToLgt, vToLgt2};
	float3 vLgtCols[] = {0.6*float3(0.6, 0.8, 0.67), 1.3*float3(1,1,1)};
	//const float m = toBeckmannParam(surf_roughness);
	for(int k=0; k<2; k++)
		vDiff += vLgtCols[k]*BRDF2_ts_nphong(vN, vVertNorm, vLgtDir[k], vV, diff_col, spec_col, surf_roughness);
	float3 res = AO*(vDiff+vAmb);
	
	return float4(res,1);
}