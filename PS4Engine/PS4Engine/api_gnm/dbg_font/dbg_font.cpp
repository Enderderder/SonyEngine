/* SIE CONFIDENTIAL
PlayStation(R)4 Programmer Tool Runtime Library Release 05.008.001
* Copyright (C) 2017 Sony Interactive Entertainment Inc.
* All Rights Reserved.
*/

#include "dbg_font.h"
#include "../toolkit/toolkit.h"
#include "../toolkit/embedded_shader.h"
#include <algorithm>
#include <ctype.h>
#include <string.h>
using namespace sce;

namespace
{
	enum { kBytesPerGlyph = 8 };

	static sce::Gnm::Buffer s_fontBuffer;

	static bool s_initialized = false;

	struct Colors
	{
		uint32_t m_color[16][4][4];
	};
	static Colors* s_colors;
	static sce::Gnm::Buffer s_colorsBuffer;

	static const uint32_t dbg_font_render_p[] = {
#include "dbg_font_render_p.h"
	};

	static const uint32_t dbg_font_render_c[] = {
#include "dbg_font_render_c.h"
	};

	static const uint32_t dbg_font_printf_c[] = {
#include "dbg_font_printf_c.h"
	};

	static Gnmx::Toolkit::EmbeddedPsShader s_dbg_font_render_p = {dbg_font_render_p, "Debug Font Render Pixel Shader"};
	static Gnmx::Toolkit::EmbeddedPsShader* s_embeddedPsShader[] =
	{
		&s_dbg_font_render_p,
	};

	static Gnmx::Toolkit::EmbeddedCsShader s_dbg_font_render_c = {dbg_font_render_c, "Debug Font Render Compute Shader"};
	static Gnmx::Toolkit::EmbeddedCsShader s_dbg_font_printf_c = {dbg_font_printf_c, "Debug Font Printf Compute Shader"};
	static Gnmx::Toolkit::EmbeddedCsShader* s_embeddedCsShader[] =
	{
		&s_dbg_font_render_c,
		&s_dbg_font_printf_c,
	};

	static Gnmx::Toolkit::EmbeddedShaders s_embeddedShaders =
	{
		s_embeddedCsShader, sizeof(s_embeddedCsShader) / sizeof(s_embeddedCsShader[0]),
		s_embeddedPsShader, sizeof(s_embeddedPsShader) / sizeof(s_embeddedPsShader[0]),
	};

	static const uint8_t font[][kBytesPerGlyph] =
	{
		{0,0,0,0,0,0,0,0,}, {0,0,0,0,0,0,0,0,}, {0,0,0,0,0,0,0,0,}, {0,0,0,0,0,0,0,0,}, {0,0,0,0,0,0,0,0,}, {0,0,0,0,0,0,0,0,}, {0,0,0,0,0,0,0,0,}, {0,0,0,0,0,0,0,0,}, // 0..7
		{0,0,0,0,0,0,0,0,}, {0,0,0,0,0,0,0,0,}, {0,0,0,0,0,0,0,0,}, {0,0,0,0,0,0,0,0,},	{0,0,0,0,0,0,0,0,}, {0,0,0,0,0,0,0,0,}, {0,0,0,0,0,0,0,0,}, {0,0,0,0,0,0,0,0,}, // 8..15
		{0,0,0,0,0,0,0,0,}, {0,0,0,0,0,0,0,0,}, {0,0,0,0,0,0,0,0,}, {0,0,0,0,0,0,0,0,},	{0,0,0,0,0,0,0,0,}, {0,0,0,0,0,0,0,0,}, {0,0,0,0,0,0,0,0,}, {0,0,0,0,0,0,0,0,}, // 16..23
		{0,0,0,0,0,0,0,0,}, {0,0,0,0,0,0,0,0,}, {0,0,0,0,0,0,0,0,}, {0,0,0,0,0,0,0,0,},	{0,0,0,0,0,0,0,0,}, {0,0,0,0,0,0,0,0,}, {0,0,0,0,0,0,0,0,}, {0,0,0,0,0,0,0,0,}, // 24..31

		{ // 32
			0x00, // ........
			0x00, // ........
			0x00, // ........
			0x00, // ........
			0x00, // ........
			0x00, // ........
			0x00, // ........
			0x00, // ........
		},
		{ // 33
			0x20, // ..*.....
			0x20, // ..*.....
			0x20, // ..*.....
			0x20, // ..*.....
			0x20, // ..*.....
			0x00, // ........
			0x20, // ..*.....
			0x00, // ........
		},
		{ // 34
			0x50, // .*.*....
			0x50, // .*.*....
			0x50, // .*.*....
			0x00, // ........
			0x00, // ........
			0x00, // ........
			0x00, // ........
			0x00, // ........
		},
		{ // 35
			0x50, // .*.*....
			0x50, // .*.*....
			0xf8, // *****...
			0x50, // .*.*....
			0xf8, // *****...
			0x50, // .*.*....
			0x50, // .*.*....
			0x00, // ........
		},
		{ // 36
			0x20, // ..*.....
			0x78, // .****...
			0xa0, // *.*.....
			0x70, // .***....
			0x28, // ..*.*...
			0xf0, // ****....
			0x20, // ..*.....
			0x00, // ........
		},
		{ // 37
			0xc0, // **......
			0xc8, // **..*...
			0x10, // ...*....
			0x20, // ..*.....
			0x40, // .*......
			0x98, // *..**...
			0x18, // ...**...
			0x00, // ........
		},
		{ // 38
			0x40, // .*......
			0xa0, // *.*.....
			0xa0, // *.*.....
			0x40, // .*......
			0xa8, // *.*.*...
			0x90, // *..*....
			0x68, // .**.*...
			0x00, // ........
		},
		{ // 39
			0x20, // ..*.....
			0x20, // ..*.....
			0x20, // ..*.....
			0x00, // ........
			0x00, // ........
			0x00, // ........
			0x00, // ........
			0x00, // ........
		},
		{ // 40
			0x20, // ..*.....
			0x40, // .*......
			0x80, // *.......
			0x80, // *.......
			0x80, // *.......
			0x40, // .*......
			0x20, // ..*.....
			0x00, // ........
		},
		{ // 41
			0x20, // ..*.....
			0x10, // ...*....
			0x08, // ....*...
			0x08, // ....*...
			0x08, // ....*...
			0x10, // ...*....
			0x20, // ..*.....
			0x00, // ........
		},
		{ // 42
			0x20, // ..*.....
			0xa8, // *.*.*...
			0x70, // .***....
			0xa8, // *.*.*...
			0x70, // .***....
			0xa8, // *.*.*...
			0x20, // ..*.....
			0x00, // ........
		},
		{ // 43
			0x00, // ........
			0x20, // ..*.....
			0x20, // ..*.....
			0xf8, // *****...
			0x20, // ..*.....
			0x20, // ..*.....
			0x00, // ........
			0x00, // ........
		},
		{ // 44
			0x00, // ........
			0x00, // ........
			0x00, // ........
			0x00, // ........
			0x00, // ........
			0x20, // ..*.....
			0x20, // ..*.....
			0x40, // .*......
		},
		{ // 45
			0x00, // ........
			0x00, // ........
			0x00, // ........
			0xf8, // *****...
			0x00, // ........
			0x00, // ........
			0x00, // ........
			0x00, // ........
		},
		{ // 46
			0x00, // ........
			0x00, // ........
			0x00, // ........
			0x00, // ........
			0x00, // ........
			0x00, // ........
			0x20, // ..*.....
			0x00, // ........
		},
		{ // 47
			0x00, // ........
			0x08, // ....*...
			0x10, // ...*....
			0x20, // ..*.....
			0x40, // .*......
			0x80, // *.......
			0x00, // ........
			0x00, // ........
		},
		{ // 48
			0x70, // .***....
			0x88, // *...*...
			0x98, // *..**...
			0xa8, // *.*.*...
			0xc8, // **..*...
			0x88, // *...*...
			0x70, // .***....
			0x00, // ........
		},
		{ // 49
			0x20, // ..*.....
			0x60, // .**.....
			0x20, // ..*.....
			0x20, // ..*.....
			0x20, // ..*.....
			0x20, // ..*.....
			0x70, // .***....
			0x00, // ........
		},
		{ // 50
			0x70, // .***....
			0x88, // *...*...
			0x08, // ....*...
			0x30, // ..**....
			0x40, // .*......
			0x80, // *.......
			0xf8, // *****...
			0x00, // ........
		},
		{ // 51
			0xf8, // *****...
			0x08, // ....*...
			0x10, // ...*....
			0x30, // ..**....
			0x08, // ....*...
			0x88, // *...*...
			0x70, // .***....
			0x00, // ........
		},
		{ // 52
			0x10, // ...*....
			0x30, // ..**....
			0x50, // .*.*....
			0x90, // *..*....
			0xf8, // *****...
			0x10, // ...*....
			0x10, // ...*....
			0x00, // ........
		},
		{ // 53
			0xf8, // *****...
			0x80, // *.......
			0xf0, // ****....
			0x08, // ....*...
			0x08, // ....*...
			0x88, // *...*...
			0x70, // .***....
			0x00, // ........
		},
		{ // 54
			0x38, // ..***...
			0x40, // .*......
			0x80, // *.......
			0xf0, // ****....
			0x88, // *...*...
			0x88, // *...*...
			0x70, // .***....
			0x00, // ........
		},
		{ // 55
			0xf8, // *****...
			0x08, // ....*...
			0x10, // ...*....
			0x20, // ..*.....
			0x40, // .*......
			0x40, // .*......
			0x40, // .*......
			0x00, // ........
		},
		{ // 56
			0x70, // .***....
			0x88, // *...*...
			0x88, // *...*...
			0x70, // .***....
			0x88, // *...*...
			0x88, // *...*...
			0x70, // .***....
			0x00, // ........
		},
		{ // 57
			0x70, // .***....
			0x88, // *...*...
			0x88, // *...*...
			0x78, // .****...
			0x08, // ....*...
			0x10, // ...*....
			0xe0, // ***.....
			0x00, // ........
		},
		{ // 58
			0x00, // ........
			0x00, // ........
			0x00, // ........
			0x20, // ..*.....
			0x00, // ........
			0x20, // ..*.....
			0x00, // ........
			0x00, // ........
		},
		{ // 59
			0x00, // ........
			0x00, // ........
			0x00, // ........
			0x20, // ..*.....
			0x00, // ........
			0x20, // ..*.....
			0x20, // ..*.....
			0x40, // .*......
		},
		{ // 60
			0x10, // ...*....
			0x20, // ..*.....
			0x40, // .*......
			0x80, // *.......
			0x40, // .*......
			0x20, // ..*.....
			0x10, // ...*....
			0x00, // ........
		},
		{ // 61
			0x00, // ........
			0x00, // ........
			0xf8, // *****...
			0x00, // ........
			0xf8, // *****...
			0x00, // ........
			0x00, // ........
			0x00, // ........
		},
		{ // 62
			0x40, // .*......
			0x20, // ..*.....
			0x10, // ...*....
			0x08, // ....*...
			0x10, // ...*....
			0x20, // ..*.....
			0x40, // .*......
			0x00, // ........
		},
		{ // 63
			0x70, // .***....
			0x88, // *...*...
			0x10, // ...*....
			0x20, // ..*.....
			0x20, // ..*.....
			0x00, // ........
			0x20, // ..*.....
			0x00, // ........
		},
		{ // 64
			0x70, // .***....
			0x88, // *...*...
			0xa8, // *.*.*...
			0xb8, // *.***...
			0xb0, // *.**....
			0x80, // *.......
			0x78, // .****...
			0x00, // ........
		},
		{ // 65
			0x20, // ..*.....
			0x50, // .*.*....
			0x88, // *...*...
			0x88, // *...*...
			0xf8, // *****...
			0x88, // *...*...
			0x88, // *...*...
			0x00, // ........
		},
		{ // 66
			0xf0, // ****....
			0x88, // *...*...
			0x88, // *...*...
			0xf0, // ****....
			0x88, // *...*...
			0x88, // *...*...
			0xf0, // ****....
			0x00, // ........
		},
		{ // 67
			0x70, // .***....
			0x88, // *...*...
			0x80, // *.......
			0x80, // *.......
			0x80, // *.......
			0x88, // *...*...
			0x70, // .***....
			0x00, // ........
		},
		{ // 68
			0xf0, // ****....
			0x88, // *...*...
			0x88, // *...*...
			0x88, // *...*...
			0x88, // *...*...
			0x88, // *...*...
			0xf0, // ****....
			0x00, // ........
		},
		{ // 69
			0xf8, // *****...
			0x80, // *.......
			0x80, // *.......
			0xf0, // ****....
			0x80, // *.......
			0x80, // *.......
			0xf8, // *****...
			0x00, // ........
		},
		{ // 70
			0xf8, // *****...
			0x80, // *.......
			0x80, // *.......
			0xf0, // ****....
			0x80, // *.......
			0x80, // *.......
			0x80, // *.......
			0x00, // ........
		},
		{ // 71
			0x70, // .***....
			0x88, // *...*...
			0x80, // *.......
			0x80, // *.......
			0x98, // *..**...
			0x88, // *...*...
			0x78, // .****...
			0x00, // ........
		},
		{ // 72
			0x88, // *...*...
			0x88, // *...*...
			0x88, // *...*...
			0xf8, // *****...
			0x88, // *...*...
			0x88, // *...*...
			0x88, // *...*...
			0x00, // ........
		},
		{ // 73
			0x70, // .***....
			0x20, // ..*.....
			0x20, // ..*.....
			0x20, // ..*.....
			0x20, // ..*.....
			0x20, // ..*.....
			0x70, // .***....
			0x00, // ........
		},
		{ // 74
			0x08, // ....*...
			0x08, // ....*...
			0x08, // ....*...
			0x08, // ....*...
			0x08, // ....*...
			0x88, // *...*...
			0x70, // .***....
			0x00, // ........
		},
		{ // 75
			0x88, // *...*...
			0x90, // *..*....
			0xa0, // *.*.....
			0xc0, // **......
			0xa0, // *.*.....
			0x90, // *..*....
			0x88, // *...*...
			0x00, // ........
		},
		{ // 76
			0x80, // *.......
			0x80, // *.......
			0x80, // *.......
			0x80, // *.......
			0x80, // *.......
			0x80, // *.......
			0xf8, // *****...
			0x00, // ........
		},
		{ // 77
			0x88, // *...*...
			0xd8, // **.**...
			0xa8, // *.*.*...
			0xa8, // *.*.*...
			0x88, // *...*...
			0x88, // *...*...
			0x88, // *...*...
			0x00, // ........
		},
		{ // 78
			0x88, // *...*...
			0x88, // *...*...
			0xc8, // **..*...
			0xa8, // *.*.*...
			0x98, // *..**...
			0x88, // *...*...
			0x88, // *...*...
			0x00, // ........
		},
		{ // 79
			0x70, // .***....
			0x88, // *...*...
			0x88, // *...*...
			0x88, // *...*...
			0x88, // *...*...
			0x88, // *...*...
			0x70, // .***....
			0x00, // ........
		},
		{ // 80
			0xf0, // ****....
			0x88, // *...*...
			0x88, // *...*...
			0xf0, // ****....
			0x80, // *.......
			0x80, // *.......
			0x80, // *.......
			0x00, // ........
		},
		{ // 81
			0x70, // .***....
			0x88, // *...*...
			0x88, // *...*...
			0x88, // *...*...
			0xa8, // *.*.*...
			0x90, // *..*....
			0x68, // .**.*...
			0x00, // ........
		},
		{ // 82
			0xf0, // ****....
			0x88, // *...*...
			0x88, // *...*...
			0xf0, // ****....
			0xa0, // *.*.....
			0x90, // *..*....
			0x88, // *...*...
			0x00, // ........
		},
		{ // 83
			0x70, // .***....
			0x88, // *...*...
			0x80, // *.......
			0x70, // .***....
			0x08, // ....*...
			0x88, // *...*...
			0x70, // .***....
			0x00, // ........
		},
		{ // 84
			0xf8, // *****...
			0x20, // ..*.....
			0x20, // ..*.....
			0x20, // ..*.....
			0x20, // ..*.....
			0x20, // ..*.....
			0x20, // ..*.....
			0x00, // ........
		},
		{ // 85
			0x88, // *...*...
			0x88, // *...*...
			0x88, // *...*...
			0x88, // *...*...
			0x88, // *...*...
			0x88, // *...*...
			0x70, // .***....
			0x00, // ........
		},
		{ // 86
			0x88, // *...*...
			0x88, // *...*...
			0x88, // *...*...
			0x88, // *...*...
			0x88, // *...*...
			0x50, // .*.*....
			0x20, // ..*.....
			0x00, // ........
		},
		{ // 87
			0x88, // *...*...
			0x88, // *...*...
			0x88, // *...*...
			0xa8, // *.*.*...
			0xa8, // *.*.*...
			0xd8, // **.**...
			0x88, // *...*...
			0x00, // ........
		},
		{ // 88
			0x88, // *...*...
			0x88, // *...*...
			0x50, // .*.*....
			0x20, // ..*.....
			0x50, // .*.*....
			0x88, // *...*...
			0x88, // *...*...
			0x00, // ........
		},
		{ // 89
			0x88, // *...*...
			0x88, // *...*...
			0x50, // .*.*....
			0x20, // ..*.....
			0x20, // ..*.....
			0x20, // ..*.....
			0x20, // ..*.....
			0x00, // ........
		},
		{ // 90
			0xf8, // *****...
			0x08, // ....*...
			0x10, // ...*....
			0x20, // ..*.....
			0x40, // .*......
			0x80, // *.......
			0xf8, // *****...
			0x00, // ........
		},
		{ // 91
			0xf8, // *****...
			0xc0, // **......
			0xc0, // **......
			0xc0, // **......
			0xc0, // **......
			0xc0, // **......
			0xf8, // *****...
			0x00, // ........
		},
		{ // 92
			0x00, // ........
			0x80, // *.......
			0x40, // .*......
			0x20, // ..*.....
			0x10, // ...*....
			0x08, // ....*...
			0x00, // ........
			0x00, // ........
		},
		{ // 93
			0xf8, // *****...
			0x18, // ...**...
			0x18, // ...**...
			0x18, // ...**...
			0x18, // ...**...
			0x18, // ...**...
			0xf8, // *****...
			0x00, // ........
		},
		{ // 94
			0x00, // ........
			0x00, // ........
			0x20, // ..*.....
			0x50, // .*.*....
			0x88, // *...*...
			0x00, // ........
			0x00, // ........
			0x00, // ........
		},
		{ // 95
			0x00, // ........
			0x00, // ........
			0x00, // ........
			0x00, // ........
			0x00, // ........
			0x00, // ........
			0x00, // ........
			0xf8, // *****...
		},
		{ // 96
			0x40, // .*......
			0x20, // ..*.....
			0x10, // ...*....
			0x00, // ........
			0x00, // ........
			0x00, // ........
			0x00, // ........
			0x00, // ........
		},
		{ // 97
			0x00, // ........
			0x00, // ........
			0x60, // .**.....
			0x98, // *..**...
			0x88, // *...*...
			0x98, // *..**...
			0x68, // .**.*...
			0x00, // ........
		},
		{ // 98
			0x40, // .*......
			0x40, // .*......
			0x50, // .*.*....
			0x68, // .**.*...
			0x48, // .*..*...
			0x48, // .*..*...
			0x30, // ..**....
			0x00, // ........
		},
		{ // 99
			0x00, // ........
			0x00, // ........
			0x38, // ..***...
			0x40, // .*......
			0x40, // .*......
			0x40, // .*......
			0x38, // ..***...
			0x00, // ........
		},
		{ // 100
			0x08, // ....*...
			0x08, // ....*...
			0x28, // ..*.*...
			0x58, // .*.**...
			0x48, // .*..*...
			0x48, // .*..*...
			0x30, // ..**....
			0x00, // ........
		},
		{ // 101
			0x00, // ........
			0x00, // ........
			0x30, // ..**....
			0x48, // .*..*...
			0x70, // .***....
			0x40, // .*......
			0x38, // ..***...
			0x00, // ........
		},
		{ // 102
			0x30, // ..**....
			0x28, // ..*.*...
			0x20, // ..*.....
			0x70, // .***....
			0x20, // ..*.....
			0x20, // ..*.....
			0x20, // ..*.....
			0x00, // ........
		},
		{ // 103
			0x00, // ........
			0x00, // ........
			0x30, // ..**....
			0x48, // .*..*...
			0x48, // .*..*...
			0x38, // ..***...
			0x08, // ....*...
			0x38, // ..***...
		},
		{ // 104
			0x40, // .*......
			0x40, // .*......
			0x50, // .*.*....
			0x68, // .**.*...
			0x48, // .*..*...
			0x48, // .*..*...
			0x48, // .*..*...
			0x00, // ........
		},
		{ // 105
			0x20, // ..*.....
			0x00, // ........
			0x60, // .**.....
			0x20, // ..*.....
			0x20, // ..*.....
			0x20, // ..*.....
			0x70, // .***....
			0x00, // ........
		},
		{ // 106
			0x08, // ....*...
			0x00, // ........
			0x08, // ....*...
			0x08, // ....*...
			0x08, // ....*...
			0x08, // ....*...
			0x48, // .*..*...
			0x70, // .***....
		},
		{ // 107
			0x40, // .*......
			0x40, // .*......
			0x48, // .*..*...
			0x50, // .*.*....
			0x70, // .***....
			0x48, // .*..*...
			0x48, // .*..*...
			0x00, // ........
		},
		{ // 108
			0x60, // .**.....
			0x20, // ..*.....
			0x20, // ..*.....
			0x20, // ..*.....
			0x20, // ..*.....
			0x20, // ..*.....
			0x70, // .***....
			0x00, // ........
		},
		{ // 109
			0x00, // ........
			0x00, // ........
			0xd0, // **.*....
			0xa8, // *.*.*...
			0xa8, // *.*.*...
			0xa8, // *.*.*...
			0x88, // *...*...
			0x00, // ........
		},
		{ // 110
			0x00, // ........
			0x00, // ........
			0x70, // .***....
			0x48, // .*..*...
			0x48, // .*..*...
			0x48, // .*..*...
			0x48, // .*..*...
			0x00, // ........
		},
		{ // 111
			0x00, // ........
			0x00, // ........
			0x30, // ..**....
			0x48, // .*..*...
			0x48, // .*..*...
			0x48, // .*..*...
			0x30, // ..**....
			0x00, // ........
		},
		{ // 112
			0x00, // ........
			0x00, // ........
			0x30, // ..**....
			0x48, // .*..*...
			0x48, // .*..*...
			0x70, // .***....
			0x40, // .*......
			0x40, // .*......
		},
		{ // 113
			0x00, // ........
			0x00, // ........
			0x38, // ..***...
			0x48, // .*..*...
			0x48, // .*..*...
			0x38, // ..***...
			0x08, // ....*...
			0x08, // ....*...
		},
		{ // 114
			0x00, // ........
			0x00, // ........
			0x58, // .*.**...
			0x68, // .**.*...
			0x40, // .*......
			0x40, // .*......
			0x40, // .*......
			0x00, // ........
		},
		{ // 115
			0x00, // ........
			0x00, // ........
			0x38, // ..***...
			0x40, // .*......
			0x30, // ..**....
			0x08, // ....*...
			0x70, // .***....
			0x00, // ........
		},
		{ // 116
			0x20, // ..*.....
			0x20, // ..*.....
			0x70, // .***....
			0x20, // ..*.....
			0x20, // ..*.....
			0x20, // ..*.....
			0x30, // ..**....
			0x00, // ........
		},
		{ // 117
			0x00, // ........
			0x00, // ........
			0x48, // .*..*...
			0x48, // .*..*...
			0x48, // .*..*...
			0x58, // .*.**...
			0x28, // ..*.*...
			0x00, // ........
		},
		{ // 118
			0x00, // ........
			0x00, // ........
			0x88, // *...*...
			0x88, // *...*...
			0x50, // .*.*....
			0x50, // .*.*....
			0x20, // ..*.....
			0x00, // ........
		},
		{ // 119
			0x00, // ........
			0x00, // ........
			0x88, // *...*...
			0xa8, // *.*.*...
			0xa8, // *.*.*...
			0xa8, // *.*.*...
			0xd0, // **.*....
			0x00, // ........
		},
		{ // 120
			0x00, // ........
			0x00, // ........
			0xd8, // **.**...
			0x50, // .*.*....
			0x20, // ..*.....
			0x50, // .*.*....
			0xd8, // **.**...
			0x00, // ........
		},
		{ // 121
			0x00, // ........
			0x00, // ........
			0x48, // .*..*...
			0x48, // .*..*...
			0x58, // .*.**...
			0x28, // ..*.*...
			0x08, // ....*...
			0x18, // ...**...
		},
		{ // 122
			0x00, // ........
			0x00, // ........
			0x78, // .****...
			0x08, // ....*...
			0x30, // ..**....
			0x40, // .*......
			0x78, // .****...
			0x00, // ........
		},
		{ // 123
			0x18, // ...**...
			0x60, // .**.....
			0x40, // .*......
			0x20, // ..*.....
			0x40, // .*......
			0x60, // .**.....
			0x18, // ...**...
			0x00, // ........
		},
		{ // 124
			0x20, // ..*.....
			0x20, // ..*.....
			0x20, // ..*.....
			0x00, // ........
			0x20, // ..*.....
			0x20, // ..*.....
			0x20, // ..*.....
			0x00, // ........
		},
		{ // 125
			0xc0, // **......
			0x30, // ..**....
			0x10, // ...*....
			0x20, // ..*.....
			0x10, // ...*....
			0x30, // ..**....
			0xc0, // **......
			0x00, // ........
		},
		{ // 126
			0x40, // .*......
			0xa8, // *.*.*...
			0x10, // ...*....
			0x00, // ........
			0x00, // ........
			0x00, // ........
			0x00, // ........
			0x00, // ........
		},
		{ // 127
			0xa8, // *.*.*...
			0x50, // .*.*....
			0xa8, // *.*.*...
			0x50, // .*.*....
			0xa8, // *.*.*...
			0x50, // .*.*....
			0xa8, // *.*.*...
			0x00, // ........
		},
		{ // 128
			0x00, // ........
			0x00, // ........
			0x18, // ...**...
			0x3c, // ..****..
			0x3c, // ..****..
			0x18, // ...**...
			0x00, // ........
			0x00, // ........
		},
		{ // 129
			0x00, // ........
			0x00, // ........
			0x00, // ........
			0xf8, // *****...
			0xf8, // *****...
			0x00, // ........
			0x00, // ........
			0x00, // ........
		},
		{ // 130
			0x18, // ...**...
			0x18, // ...**...
			0x18, // ...**...
			0x18, // ...**...
			0x18, // ...**...
			0x00, // ........
			0x00, // ........
			0x00, // ........
		},
		{ // 131
			0x18, // ...**...
			0x18, // ...**...
			0x18, // ...**...
			0xf8, // *****...
			0xf8, // *****...
			0x00, // ........
			0x00, // ........
			0x00, // ........
		},
		{ // 132
			0x00, // ........
			0x00, // ........
			0x00, // ........
			0x1f, // ...*****
			0x1f, // ...*****
			0x00, // ........
			0x00, // ........
			0x00, // ........
		},
		{ // 133
			0x00, // ........
			0x00, // ........
			0x00, // ........
			0xff, // ********
			0xff, // ********
			0x00, // ........
			0x00, // ........
			0x00, // ........
		},
		{ // 134
			0x18, // ...**...
			0x18, // ...**...
			0x18, // ...**...
			0x1f, // ...*****
			0x1f, // ...*****
			0x00, // ........
			0x00, // ........
			0x00, // ........
		},
		{ // 135
			0x18, // ...**...
			0x18, // ...**...
			0x18, // ...**...
			0xff, // ********
			0xff, // ********
			0x00, // ........
			0x00, // ........
			0x00, // ........
		},
		{ // 136
			0x00, // ........
			0x00, // ........
			0x00, // ........
			0x18, // ...**...
			0x18, // ...**...
			0x18, // ...**...
			0x18, // ...**...
			0x18, // ...**...
		},
		{ // 137
			0x00, // ........
			0x00, // ........
			0x00, // ........
			0xf8, // *****...
			0xf8, // *****...
			0x18, // ...**...
			0x18, // ...**...
			0x18, // ...**...
		},
		{ // 138
			0x18, // ...**...
			0x18, // ...**...
			0x18, // ...**...
			0x18, // ...**...
			0x18, // ...**...
			0x18, // ...**...
			0x18, // ...**...
			0x18, // ...**...
		},
		{ // 139
			0x18, // ...**...
			0x18, // ...**...
			0x18, // ...**...
			0xf8, // *****...
			0xf8, // *****...
			0x18, // ...**...
			0x18, // ...**...
			0x18, // ...**...
		},
		{ // 140
			0x00, // ........
			0x00, // ........
			0x00, // ........
			0x1f, // ...*****
			0x1f, // ...*****
			0x18, // ...**...
			0x18, // ...**...
			0x18, // ...**...
		},
		{ // 141
			0x00, // ........
			0x00, // ........
			0x00, // ........
			0xff, // ********
			0xff, // ********
			0x18, // ...**...
			0x18, // ...**...
			0x18, // ...**...
		},
		{ // 142
			0x18, // ...**...
			0x18, // ...**...
			0x18, // ...**...
			0x1f, // ...*****
			0x1f, // ...*****
			0x18, // ...**...
			0x18, // ...**...
			0x18, // ...**...
		},
		{ // 143
			0x18, // ...**...
			0x18, // ...**...
			0x18, // ...**...
			0xff, // ********
			0xff, // ********
			0x18, // ...**...
			0x18, // ...**...
			0x18, // ...**...
		},
		{ // 144
			0x07, // .....***
			0x3c, // ..****..
			0x60, // .**.....
			0xc0, // **......
			0xc0, // **......
			0x60, // .**.....
			0x3c, // ..****..
			0x07, // .....***
		},
		{ // 145
			0xc0, // **......
			0x30, // ..**....
			0x0c, // ....**..
			0x03, // ......**
			0x03, // ......**
			0x0c, // ....**..
			0x30, // ..**....
			0xc0, // **......
		},
		{ // 146
			0xff, // ********
			0xc0, // **......
			0xc0, // **......
			0xc0, // **......
			0xc0, // **......
			0xc0, // **......
			0xc0, // **......
			0xff, // ********
		},
		{ // 147
			0x01, // .......*
			0x03, // ......**
			0x06, // .....**.
			0x0c, // ....**..
			0x18, // ...**...
			0x30, // ..**....
			0x60, // .**.....
			0xff, // ********
		},
		{ // 148
			0xc0, // **......
			0x78, // .****...
			0x0c, // ....**..
			0x06, // .....**.
			0x06, // .....**.
			0x0c, // ....**..
			0x78, // .****...
			0xc0, // **......
		},
		{ // 149
			0x06, // .....**.
			0x18, // ...**...
			0x60, // .**.....
			0x80, // *.......
			0x80, // *.......
			0x60, // .**.....
			0x18, // ...**...
			0x06, // .....**.
		},
		{ // 150
			0xfe, // *******.
			0x06, // .....**.
			0x06, // .....**.
			0x06, // .....**.
			0x06, // .....**.
			0x06, // .....**.
			0x06, // .....**.
			0xfe, // *******.
		},
		{ // 151
			0x00, // ........
			0x80, // *.......
			0xc0, // **......
			0x60, // .**.....
			0x30, // ..**....
			0x18, // ...**...
			0x0c, // ....**..
			0xfe, // *******.
		},
	};

	enum { kLowCharacterCode = 0 };
	enum { kHighCharacterCode = sizeof(font)/sizeof(font[0]) };
	enum { kCharacterCodeCount = kHighCharacterCode-kLowCharacterCode+1 };
};

void DbgFont::initializeWithAllocators(Gnmx::Toolkit::Allocators *allocators)
{
	SCE_GNM_ASSERT(s_initialized == false);

	s_embeddedShaders.initializeWithAllocators(allocators);

	void *fontDest = allocators->m_garlic.allocate(sizeof(font), Gnm::kAlignmentOfBufferInBytes);
	memcpy(fontDest, font, sizeof(font));
	s_fontBuffer.initAsRegularBuffer(fontDest, sizeof(uint32_t), sizeof(font)/sizeof(uint32_t));
	s_fontBuffer.setResourceMemoryType(Gnm::kResourceMemoryTypeRO); // never bound as RWBuffer, so read-only is OK

	s_colors = static_cast<Colors*>(allocators->m_garlic.allocate(sizeof(Colors), Gnm::kAlignmentOfBufferInBytes));
	const uint32_t standard[16] =
	{
		0x00000000, 0x0000AA00, 0x00AA0000, 0x00AAAA00,
		0xAA000000, 0xAA00AA00, 0xAA550000, 0xAAAAAA00,
		0x55555500, 0x5555FF00, 0x55FF5500, 0x55FFFF00,
		0xFF555500, 0xFF55FF00, 0xFFFF5500, 0xFFFFFF00,
	};
	for(uint32_t i=0; i<16; ++i)
		for(uint32_t j=0; j<16; ++j)
			s_colors->m_color[i][j>>2][j&3] = standard[j] | ((i * 0xFF) / 15);
	s_colorsBuffer.initAsConstantBuffer(s_colors, sizeof(Colors));
	s_colorsBuffer.setResourceMemoryType(Gnm::kResourceMemoryTypeRO); // it's a constant buffer, so read-only is OK

	s_initialized = true;
}

Gnm::SizeAlign DbgFont::Screen::calculateRequiredBufferSizeAlign(uint32_t widthInCharacters, uint32_t heightInCharacters)
{
	Gnm::SizeAlign result;
	result.m_align = Gnm::kAlignmentOfBufferInBytes;
	result.m_size = sizeof(Cell) * widthInCharacters * heightInCharacters;
	return result;
}

void DbgFont::Screen::initialize(void *addr, uint32_t widthInCharacters, uint32_t heightInCharacters)
{
	m_cell = static_cast<Cell*>(addr);
	m_widthInCharacters = widthInCharacters;
	m_heightInCharacters = heightInCharacters;
	m_cellBuffer.initAsRegularBuffer(m_cell, sizeof(Cell), m_widthInCharacters * m_heightInCharacters);
	m_cellBuffer.setResourceMemoryType(Gnm::kResourceMemoryTypeGC); // this needs to we do bind this as RWBuffer sometimes, so it's GPU coherent
	Cell cell = {};
	for(uint32_t i = 0; i < m_widthInCharacters * m_heightInCharacters; ++i)
		m_cell[i] = cell;
	memset(&m_hardwareCursors, 0, sizeof(m_hardwareCursors));
	// TO BE DEPRECATED
	//m_window.initialize(this);
}

void DbgFont::Window::advanceCursor()
{
	++m_cursor.m_x;
	if(m_cursor.m_x >= m_widthInCharacters)
		newLine();
}

DbgFont::Cell DbgFont::Screen::getCell(uint32_t positionXInCharacters, uint32_t positionYInCharacters) const
{
	SCE_GNM_ASSERT(positionXInCharacters < m_widthInCharacters);
	SCE_GNM_ASSERT(positionYInCharacters < m_heightInCharacters);
	return m_cell[positionYInCharacters * m_widthInCharacters + positionXInCharacters];
}

void DbgFont::Screen::setCell(uint32_t positionXInCharacters, uint32_t positionYInCharacters, Cell cell)
{
	SCE_GNM_ASSERT(positionXInCharacters < m_widthInCharacters);
	SCE_GNM_ASSERT(positionYInCharacters < m_heightInCharacters);
	m_cell[positionYInCharacters * m_widthInCharacters + positionXInCharacters] = cell;
}

void DbgFont::Screen::setCells(uint32_t left, uint32_t top, uint32_t right, uint32_t bottom, Cell cell)
{
	SCE_GNM_ASSERT(left < m_widthInCharacters);
	SCE_GNM_ASSERT(top < m_heightInCharacters);
	SCE_GNM_ASSERT(right < m_widthInCharacters);
	SCE_GNM_ASSERT(bottom < m_heightInCharacters);
	SCE_GNM_ASSERT(left <= right);
	SCE_GNM_ASSERT(top <= bottom);
	Cell *dest = m_cell + top * m_widthInCharacters + left;
	const uint32_t count = right - left + 1;
	while(top++ <= bottom)
	{
		std::fill(dest, dest + count, cell);
		dest += m_widthInCharacters;
	}
}

void DbgFont::Window::setCells(uint32_t left, uint32_t top, uint32_t right, uint32_t bottom, Cell cell)
{
	right = std::min(m_widthInCharacters - 1, right);
	bottom = std::min(m_heightInCharacters - 1, bottom);

	left   += m_positionXInCharactersRelativeToScreen;
	top    += m_positionYInCharactersRelativeToScreen;
	right  += m_positionXInCharactersRelativeToScreen;
	bottom += m_positionYInCharactersRelativeToScreen;

	right = std::min(m_screen->m_widthInCharacters - 1, right);
	bottom = std::min(m_screen->m_heightInCharacters - 1, bottom);

	if(left > right)
		return;
	if(top > bottom)
		return;
	m_screen->setCells(left, top, right, bottom, cell);
}

void DbgFont::Window::deferredPrintf(Gnmx::GnmxGfxContext& gfxc, uint32_t x, uint32_t y, const Cell& cell, uint32_t length, const char* format, ...)
{
	SCE_GNM_ASSERT(s_initialized);

	va_list args;
	char* buffer = (char*)gfxc.allocateFromCommandBuffer(length, Gnm::kEmbeddedDataAlignment4);
	va_start(args,format);
	vsnprintf(buffer, length, format, args );
	va_end(args);

	length = strlen(buffer);

	struct Constants
	{
		int32_t m_cursorX;
		int32_t m_cursorY;
		uint32_t m_color;
		int32_t m_screenWidthInCharacters;
		int32_t m_windowX;
		int32_t m_windowY;
		int32_t m_windowWidth;
		int32_t m_windowHeight;
	};
	Constants* constants = (Constants*)gfxc.allocateFromCommandBuffer(sizeof(Constants), Gnm::kEmbeddedDataAlignment4);
	constants->m_cursorX = x;
	constants->m_cursorY = y;
	constants->m_color = (const uint32_t&)cell;
	constants->m_color &= 0xFFFF0000;
	constants->m_screenWidthInCharacters = m_screen->m_widthInCharacters;
	constants->m_windowX = m_positionXInCharactersRelativeToScreen;
	constants->m_windowY = m_positionYInCharactersRelativeToScreen;
	constants->m_windowWidth = m_widthInCharacters;
	constants->m_windowHeight = m_heightInCharacters;
	Gnm::Buffer constantBuffer;
	constantBuffer.initAsConstantBuffer(constants, sizeof(Constants));
	constantBuffer.setResourceMemoryType(Gnm::kResourceMemoryTypeRO); // it's a constant buffer, so read-only is OK

	Gnm::Buffer srcBuffer;
	srcBuffer.initAsDataBuffer(buffer, Gnm::kDataFormatR8Uint, length);
	srcBuffer.setResourceMemoryType(Gnm::kResourceMemoryTypeRO); // never bound as RWBuffer, so read-only is OK

	gfxc.setCsShader(s_dbg_font_printf_c.m_shader, &s_dbg_font_printf_c.m_offsetsTable);

	gfxc.setConstantBuffers(Gnm::kShaderStageCs, 0, 1, &constantBuffer);
	gfxc.setBuffers(Gnm::kShaderStageCs, 0, 1, &srcBuffer);
	gfxc.setRwBuffers(Gnm::kShaderStageCs, 0, 1, &m_screen->m_cellBuffer);

	gfxc.dispatch( (length+Gnm::kThreadsPerWavefront-1)/Gnm::kThreadsPerWavefront, 1, 1 );

	Gnmx::Toolkit::synchronizeComputeToGraphics( &gfxc.m_dcb );
}

void DbgFont::Screen::render(Gnmx::GnmxGfxContext& gfxc, Gnm::Texture* texture, uint32_t log2CharacterWidthInPixels, uint32_t log2CharacterHeightInPixels, int32_t horizontalPixelOffset, int32_t verticalPixelOffset)
{
	SCE_GNM_ASSERT_MSG(texture->getResourceMemoryType() != Gnm::kResourceMemoryTypeRO, "texture's resourceMemoryType can not be kResourceMemoryTypeR0");
	SCE_GNM_ASSERT(s_initialized);

	gfxc.setCsShader(s_dbg_font_render_c.m_shader, &s_dbg_font_render_c.m_offsetsTable);

	gfxc.setConstantBuffers(Gnm::kShaderStageCs, 0, 1, &s_colorsBuffer);

	struct Parameters
	{
		uint32_t m_log2CharacterWidth;
		uint32_t m_log2CharacterHeight;
		uint32_t m_screenWidthInCharacters;
		uint32_t m_padding;
		int32_t m_horizontalPixelOffset;
		int32_t m_verticalPixelOffset;
		uint32_t m_screenWidthInPixels;
		uint32_t m_screenHeightInPixels;
		HardwareCursors m_hardwareCursors;
	};
	Parameters *parameters = static_cast<Parameters*>(gfxc.allocateFromCommandBuffer(sizeof(Parameters), Gnm::kEmbeddedDataAlignment4));
	parameters->m_log2CharacterWidth = log2CharacterWidthInPixels;
	parameters->m_log2CharacterHeight = log2CharacterHeightInPixels;
	parameters->m_screenWidthInCharacters = m_widthInCharacters;
	parameters->m_horizontalPixelOffset = horizontalPixelOffset;
	parameters->m_verticalPixelOffset = verticalPixelOffset;
	parameters->m_screenWidthInPixels = m_widthInCharacters << log2CharacterWidthInPixels;
	parameters->m_screenHeightInPixels = m_heightInCharacters << log2CharacterHeightInPixels;
	parameters->m_hardwareCursors = m_hardwareCursors;
	Gnm::Buffer parametersBuffer;
	parametersBuffer.initAsConstantBuffer(parameters, sizeof(Parameters));
	parametersBuffer.setResourceMemoryType(Gnm::kResourceMemoryTypeRO); // it's a constant buffer, so read-only is OK
	gfxc.setConstantBuffers(Gnm::kShaderStageCs, 1, 1, &parametersBuffer);

	gfxc.setBuffers(Gnm::kShaderStageCs, 0, 1, &m_cellBuffer);
	gfxc.setBuffers(Gnm::kShaderStageCs, 1, 1, &s_fontBuffer);
	gfxc.setTextures(Gnm::kShaderStageCs, 2, 1, texture);

	gfxc.setRwTextures(Gnm::kShaderStageCs, 0, 1, texture);

	gfxc.dispatch( texture->getWidth()/8, texture->getHeight()/8, 1 );

	Gnmx::Toolkit::synchronizeComputeToGraphics(&gfxc.m_dcb);
}

void DbgFont::Screen::render(Gnmx::GnmxGfxContext& gfxc, Gnm::Texture* texture, uint32_t log2CharacterWidthInPixels, uint32_t log2CharacterHeightInPixels)
{
	render(gfxc, texture, log2CharacterWidthInPixels, log2CharacterHeightInPixels, 0, 0);
}

void DbgFont::Screen::render(Gnmx::GnmxGfxContext& gfxc, sce::Gnm::RenderTarget* target, uint32_t log2CharacterWidthInPixels, uint32_t log2CharacterHeightInPixels, int32_t horizontalPixelOffset, int32_t verticalPixelOffset)
{
	SCE_GNM_ASSERT(s_initialized);

	gfxc.setRenderTarget(0, target);
	gfxc.setupScreenViewport(0, 0, target->getWidth(), target->getHeight(), 0.5f, 0.5f);
	gfxc.setRenderTargetMask(0x0000000F);

	Gnm::BlendControl blendControl;
	blendControl.init();
	blendControl.setBlendEnable(true);
	blendControl.setColorEquation(Gnm::kBlendMultiplierSrcAlpha, Gnm::kBlendFuncAdd, Gnm::kBlendMultiplierOneMinusSrcAlpha);
	gfxc.setBlendControl(0, blendControl);
	gfxc.setDepthStencilDisable();

	gfxc.setPsShader(s_dbg_font_render_p.m_shader, &s_dbg_font_render_p.m_offsetsTable);
	gfxc.setConstantBuffers(Gnm::kShaderStagePs, 0, 1, &s_colorsBuffer);

	struct Parameters
	{
		uint32_t m_log2CharacterWidth;
		uint32_t m_log2CharacterHeight;
		uint32_t m_screenWidthInCharacters;
		uint32_t m_padding;
		int32_t m_horizontalPixelOffset;
		int32_t m_verticalPixelOffset;
		uint32_t m_screenWidthInPixels;
		uint32_t m_screenHeightInPixels;
		HardwareCursors m_hardwareCursors;
	};
	Parameters *parameters = static_cast<Parameters*>(gfxc.allocateFromCommandBuffer(sizeof(Parameters), Gnm::kEmbeddedDataAlignment4));
	parameters->m_log2CharacterWidth = log2CharacterWidthInPixels;
	parameters->m_log2CharacterHeight = log2CharacterHeightInPixels;
	parameters->m_screenWidthInCharacters = m_widthInCharacters;
	parameters->m_horizontalPixelOffset = horizontalPixelOffset;
	parameters->m_verticalPixelOffset = verticalPixelOffset;
	parameters->m_screenWidthInPixels = m_widthInCharacters << log2CharacterWidthInPixels;
	parameters->m_screenHeightInPixels = m_heightInCharacters << log2CharacterHeightInPixels;
	parameters->m_hardwareCursors = m_hardwareCursors;
	Gnm::Buffer parametersBuffer;
	parametersBuffer.initAsConstantBuffer(parameters, sizeof(Parameters));
	parametersBuffer.setResourceMemoryType(Gnm::kResourceMemoryTypeRO); // it's a constant buffer, so read-only is OK
	gfxc.setConstantBuffers(Gnm::kShaderStagePs, 1, 1, &parametersBuffer);

	gfxc.setBuffers(Gnm::kShaderStagePs, 0, 1, &m_cellBuffer);
	gfxc.setBuffers(Gnm::kShaderStagePs, 1, 1, &s_fontBuffer);

	Gnmx::renderFullScreenQuad(&gfxc);
}

void DbgFont::Screen::render(Gnmx::GnmxGfxContext& gfxc, Gnm::RenderTarget* target, uint32_t log2CharacterWidthInPixels, uint32_t log2CharacterHeightInPixels)
{
	render(gfxc, target, log2CharacterWidthInPixels, log2CharacterHeightInPixels, 0, 0);
}

void DbgFont::Window::putCell(Cell cell)
{
	switch(cell.m_character)
	{
		case '\n':
		{
			newLine();
			break;
		}
		default:
		{
			setCell(m_cursor.m_x, m_cursor.m_y, cell);
			advanceCursor();
			break;
		}
	}
}

const char *DbgFont::Window::processHexInteger(uint32_t *dest, const char* c)
{
	*dest = 0;
	while(*c && isspace(*c))
		++c;
	while(*c && isxdigit(*c))
	{
		*dest *= 16;
		if(*c >= '0' && *c <= '9')
			*dest += *c - '0';
		if(*c >= 'a' && *c <= 'f')
			*dest += 10 + *c - 'a';
		if(*c >= 'A' && *c <= 'F')
			*dest += 10 + *c - 'A';
		++c;
	}
	return c;
}

const char *DbgFont::Window::processAlpha(const char* c)
{
	while(*c && isspace(*c))
		++c;
	while(*c && !isspace(*c) && *c != ']')
	{
		++c;
	}
	return c;
}

const char *DbgFont::Window::processForegroundColor(const char *c)
{
	uint32_t temp;
	c = processHexInteger(&temp, c);
	m_cell.m_foregroundColor = temp / 16;
	m_cell.m_foregroundAlpha = temp % 16;
	return c;
}

const char *DbgFont::Window::processBackgroundColor(const char *c)
{
	uint32_t temp;
	c = processHexInteger(&temp, c);
	m_cell.m_backgroundColor = temp / 16;
	m_cell.m_backgroundAlpha = temp % 16;
	return c;
}

const char *DbgFont::Window::processCommand(const char *c, Cell *wordBuffer, uint32_t &wordLength)
{
	SCE_GNM_ASSERT(*c == '[');
	++c;
	const char *command = c;
	c = processAlpha(c);
	if(strncasecmp(command, "/", c - command) == 0)
	{
		SCE_GNM_ASSERT(m_colorStackTop > 0);
		--m_colorStackTop;
		m_cell.m_backgroundColor = m_colorStack[m_colorStackTop].m_backgroundColor;
		m_cell.m_backgroundAlpha = m_colorStack[m_colorStackTop].m_backgroundAlpha;
		m_cell.m_foregroundColor = m_colorStack[m_colorStackTop].m_foregroundColor;
		m_cell.m_foregroundAlpha = m_colorStack[m_colorStackTop].m_foregroundAlpha;
	}
	if(strncasecmp(command, "fc", c - command) == 0)
	{
		SCE_GNM_ASSERT(m_colorStackTop < kMaximumColorStackLength);
		m_colorStack[m_colorStackTop++] = m_cell;
		c = processForegroundColor(c);
	}
	if(strncasecmp(command, "bc", c - command) == 0)
	{
		SCE_GNM_ASSERT(m_colorStackTop < kMaximumColorStackLength);
		m_colorStack[m_colorStackTop++] = m_cell;
		c = processBackgroundColor(c);
	}
	if(strncasecmp(command, "circle", c - command) == 0)
	{
		m_cell.m_character = DbgFont::kCircleLeft;
		wordBuffer[wordLength++] = m_cell;
		m_cell.m_character = DbgFont::kCircleRight;
		wordBuffer[wordLength++] = m_cell;
	}
	if(strncasecmp(command, "cross", c - command) == 0)
	{
		m_cell.m_character = DbgFont::kCrossLeft;
		wordBuffer[wordLength++] = m_cell;
		m_cell.m_character = DbgFont::kCrossRight;
		wordBuffer[wordLength++] = m_cell;
	}
	if(strncasecmp(command, "square", c - command) == 0)
	{
		m_cell.m_character = DbgFont::kSquareLeft;
		wordBuffer[wordLength++] = m_cell;
		m_cell.m_character = DbgFont::kSquareRight;
		wordBuffer[wordLength++] = m_cell;
	}
	if(strncasecmp(command, "triangle", c - command) == 0)
	{
		m_cell.m_character = DbgFont::kTriangleLeft;
		wordBuffer[wordLength++] = m_cell;
		m_cell.m_character = DbgFont::kTriangleRight;
		wordBuffer[wordLength++] = m_cell;
	}
	while(*c && isspace(*c))
		++c;
	SCE_GNM_ASSERT(*c == ']');
	++c;
	return c;
}

void DbgFont::Window::putString(const char *c)
{
	enum {kMaximumWorldLength = 256};
	Cell wordBuffer[kMaximumWorldLength];
	while(*c)
	{
		if(m_cursor.m_y >= m_heightInCharacters)
			return;
		while(*c && isspace(*c))
		{
			m_cell.m_character = *c++;
			putCell(m_cell);
		}
		const char *word = c;
		uint32_t wordLength = 0;
		while(*word && !isspace(*word))
		{
			if(*word == '[')
			{
				word = processCommand(word, wordBuffer, wordLength);
			}
			else
			{
				SCE_GNM_ASSERT(wordLength < kMaximumWorldLength);
				m_cell.m_character = *word++;
				wordBuffer[wordLength++] = m_cell;
			}
		}
		if(m_cursor.m_x + wordLength > m_widthInCharacters)
			newLine();
		for(uint32_t offset = 0; offset < wordLength; ++offset)
			putCell(wordBuffer[offset]);
		c = word;
	}
}

void DbgFont::Window::printf( const char* format, ... )
{
  va_list args;
  char buffer[2048];

  va_start(args,format);
  vsnprintf(buffer, sizeof(buffer), format, args );
  va_end(args);

  putString( buffer );
}

void DbgFont::Window::newLine()
{
	m_cursor.m_x = 0;
	++m_cursor.m_y;
}

void DbgFont::Window::clear(Cell cell)
{
	m_cell = cell;
	for(uint32_t y = 0; y < m_heightInCharacters; ++y)
		for(uint32_t x = 0; x < m_widthInCharacters; ++x)
			setCell(x, y, cell);
}

void DbgFont::Window::setCursor( int x, int y )
{
	m_cursor.m_x = x;
	m_cursor.m_y = y;
}

DbgFont::Cell DbgFont::Window::getCell(uint32_t positionXInCharacters, uint32_t positionYInCharacters) const
{
	Cell cell = {};
	if(positionXInCharacters < m_widthInCharacters && positionYInCharacters < m_heightInCharacters)
		cell = m_screen->getCell(m_positionXInCharactersRelativeToScreen + positionXInCharacters, m_positionYInCharactersRelativeToScreen + positionYInCharacters);
	return cell;
}

void DbgFont::Window::setCell(uint32_t x, uint32_t y, Cell cell)
{
	if(x >= m_widthInCharacters || y >= m_heightInCharacters)
		return;
	m_screen->setCell(m_positionXInCharactersRelativeToScreen + x, m_positionYInCharactersRelativeToScreen + y, cell);
}

void DbgFont::Window::renderOutlineBox(int left, int top, int right, int bottom, Cell cell)
{
	cell.m_character = kHorizontalLine;
	for(int x=left; x<=right; ++x)
	{
		setCell(x, top, cell);
		setCell(x, bottom, cell);
	}
	cell.m_character = kVerticalLine;
	for(int y=top; y<=bottom; ++y)
	{
		setCell(left, y, cell);
		setCell(right, y, cell);
	}
	cell.m_character = kUpperLeftCorner;
	setCell(left, top, cell);
	cell.m_character = kUpperRightCorner;
	setCell(right, top, cell);
	cell.m_character = kLowerLeftCorner;
	setCell(left, bottom, cell);
	cell.m_character = kLowerRightCorner;
	setCell(right, bottom, cell);
}

void DbgFont::Window::renderOutlineBox(Cell cell)
{
	renderOutlineBox(0, 0, m_widthInCharacters - 1, m_heightInCharacters - 1, cell);
}

void DbgFont::Window::renderSplitOutlineBox(int left, int top, int right, int bottom, Cell cell, int middle)
{
	renderOutlineBox(left, top, right, bottom, cell);
	cell.m_character = kVerticalLine;
	for(int y=top; y<=bottom; ++y)
	{
		setCell(middle, y, cell);
	}
	cell.m_character = kDownwardT;
	setCell(middle, top, cell);
	cell.m_character = kUpwardT;
	setCell(middle, bottom, cell);
}

void DbgFont::Window::initialize(DbgFont::Screen *screen)
{
	m_colorStackTop = 0;
	m_cell.m_backgroundAlpha = 0;
	m_cell.m_foregroundAlpha = 15;
	m_cell.m_backgroundColor = DbgFont::kWhite;
	m_cell.m_foregroundColor = DbgFont::kWhite;
	m_screen = screen;
	m_cursor.m_x = 0;
	m_cursor.m_y = 0;
	m_positionXInCharactersRelativeToScreen = 0;
	m_positionYInCharactersRelativeToScreen = 0;
	m_widthInCharacters = screen->m_widthInCharacters;
	m_heightInCharacters = screen->m_heightInCharacters;
}

void DbgFont::Window::initialize(Window *window, uint32_t positionXInCharacters, uint32_t positionYInCharacters, uint32_t widthInCharacters, uint32_t heightInCharacters)
{
	m_colorStackTop = 0;
	m_cell = window->m_cell;
	m_screen = window->m_screen;
	m_cursor.m_x = 0;
	m_cursor.m_y = 0;
	m_positionXInCharactersRelativeToScreen = window->m_positionXInCharactersRelativeToScreen + positionXInCharacters;
	m_positionYInCharactersRelativeToScreen = window->m_positionYInCharactersRelativeToScreen + positionYInCharacters;
	m_widthInCharacters = widthInCharacters;
	m_heightInCharacters = heightInCharacters; 
}

// BEGINNING OF DEPRECATED THINGS -------------------------------------

// END OF DEPRECATED THINGS -------------------------------------
